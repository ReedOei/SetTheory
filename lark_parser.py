# The file was automatically generated by Lark v0.8.5
#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

import os
from io import open

class LarkError(Exception):
    pass

class GrammarError(LarkError):
    pass

class ParseError(LarkError):
    pass

class LexError(LarkError):
    pass

class UnexpectedEOF(ParseError):
    def __init__(self, expected):
        self.expected = expected

        message = ("Unexpected end-of-input. Expected one of: \n\t* %s\n" % '\n\t* '.join(x.name for x in self.expected))
        super(UnexpectedEOF, self).__init__(message)


class UnexpectedInput(LarkError):
    pos_in_stream = None

    def get_context(self, text, span=40):
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        before = text[start:pos].rsplit('\n', 1)[-1]
        after = text[pos:end].split('\n', 1)[0]
        return before + after + '\n' + ' ' * len(before) + '^\n'

    def match_examples(self, parse_fn, examples):
        """ Given a parser instance and a dictionary mapping some label with
            some malformed syntax examples, it'll return the label for the
            example that bests matches the current error.
        """
        assert self.state is not None, "Not supported for this exception"

        candidate = None
        for label, example in examples.items():
            assert not isinstance(example, STRING_TYPE)

            for malformed in example:
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        try:
                            if ut.token == self.token:  # Try exact match first
                                return label
                        except AttributeError:
                            pass
                        if not candidate:
                            candidate = label

        return candidate


class UnexpectedCharacters(LexError, UnexpectedInput):
    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None):
        message = "No terminal defined for '%s' at line %d col %d" % (seq[lex_pos], line, column)

        self.line = line
        self.column = column
        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.pos_in_stream = lex_pos
        self.state = state

        message += '\n\n' + self.get_context(seq)
        if allowed:
            message += '\nExpecting: %s\n' % allowed
        if token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in token_history)

        super(UnexpectedCharacters, self).__init__(message)



class UnexpectedToken(ParseError, UnexpectedInput):
    def __init__(self, token, expected, considered_rules=None, state=None):
        self.token = token
        self.expected = expected     # XXX str shouldn't necessary
        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.considered_rules = considered_rules
        self.state = state
        self.pos_in_stream = getattr(token, 'pos_in_stream', None)

        message = ("Unexpected token %r at line %s, column %s.\n"
                   "Expected one of: \n\t* %s\n"
                   % (token, self.line, self.column, '\n\t* '.join(self.expected)))

        super(UnexpectedToken, self).__init__(message)

class VisitError(LarkError):
    """VisitError is raised when visitors are interrupted by an exception

    It provides the following attributes for inspection:
    - obj: the tree node or token it was processing when the exception was raised
    - orig_exc: the exception that cause it to fail
    """
    def __init__(self, rule, obj, orig_exc):
        self.obj = obj
        self.orig_exc = orig_exc

        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

def classify(seq, key=None, value=None):
    d = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data, namespace, memo):
    if isinstance(data, dict):
        if '__type__' in data: # Object
            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


class Serialize(object):
    def memo_serialize(self, types_to_memoize):
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None):
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        postprocess = getattr(self, '_serialize', None)
        if postprocess:
            postprocess(res, memo)
        return res

    @classmethod
    def deserialize(cls, data, memo):
        namespace = getattr(cls, '__serialize_namespace__', {})
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)
        postprocess = getattr(inst, '_deserialize', None)
        if postprocess:
            postprocess()
        return inst


class SerializeMemoizer(Serialize):
    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize):
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value):
        return isinstance(value, self.types_to_memoize)

    def serialize(self):
        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data, namespace, memo):
        return _deserialize(data, namespace, memo)



try:
    STRING_TYPE = basestring
except NameError:   # Python 3
    STRING_TYPE = str


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')
try:
    classtype = types.ClassType # Python2
except AttributeError:
    classtype = type    # Python3

def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (classtype, type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        # wraps does not work for partials in 2.7: https://bugs.python.org/issue3445
        return wraps(f.func)(create_decorator(lambda *args, **kw: f(*args[1:], **kw), True))

    else:
        return create_decorator(f.__func__.__call__, True)

import sys, re
Py36 = (sys.version_info[:2] >= (3, 6))

import sre_parse
import sre_constants
def get_regexp_width(regexp):
    try:
        return [int(x) for x in sre_parse.parse(regexp).getwidth()]
    except sre_constants.error:
        raise ValueError(regexp)


class Meta:
    def __init__(self):
        self.empty = True

class Tree(object):
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%s, %s)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [ indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [ indent_str*level, self._pretty_label(), '\n' ]
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [ indent_str*(level+1), '%s' % (n,), '\n' ]

        return l

    def pretty(self, indent_str='  '):
        return ''.join(self._pretty(0, indent_str))

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self):
        # TODO: Re-write as a more efficient version

        visited = set()
        q = [self]

        l = []
        while q:
            subtree = q.pop()
            l.append( subtree )
            if id(subtree) in visited:
                continue    # already been here from another branch
            visited.add(id(subtree))
            q += [c for c in subtree.children if isinstance(c, Tree)]

        seen = set()
        for x in reversed(l):
            if id(x) not in seen:
                yield x
                seen.add(id(x))

    def find_pred(self, pred):
        "Find all nodes where pred(tree) == True"
        return filter(pred, self.iter_subtrees())

    def find_data(self, data):
        "Find all nodes where tree.data == data"
        return self.find_pred(lambda t: t.data == data)


from inspect import getmembers, getmro

class Discard(Exception):
    pass

# Transformers

class _Decoratable:
    @classmethod
    def _apply_decorator(cls, decorator, **kwargs):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            # Make sure the function isn't inherited (unless it's overwritten)
            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(cls.__dict__[name]):
                continue

            # Skip if v_args already applied (at the function level)
            if hasattr(cls.__dict__[name], 'vargs_applied'):
                continue

            static = isinstance(cls.__dict__[name], (staticmethod, classmethod))
            setattr(cls, name, decorator(value, static=static, **kwargs))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable):
    """Visits the tree recursively, starting with the leaves and finally the root (bottom-up)

    Calls its methods (provided by user via inheritance) according to tree.data
    The returned value replaces the old one in the structure.

    Can be used to implement map or reduce.
    """
    __visit_tokens__ = True   # For backwards compatibility

    def __init__(self,  visit_tokens=True):
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)


    def _transform_children(self, children):
        for c in children:
            try:
                if isinstance(c, Tree):
                    yield self._transform_tree(c)
                elif self.__visit_tokens__ and isinstance(c, Token):
                    yield self._call_userfunc_token(c)
                else:
                    yield c
            except Discard:
                pass

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree):
        return self._transform_tree(tree)

    def __mul__(self, other):
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        "Default operation on tree (for override)"
        return Tree(data, children, meta)

    def __default_token__(self, token):
        "Default operation on token (for override)"
        return token



class InlineTransformer(Transformer):   # XXX Deprecated
    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    "Non-recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):           # Cancel recursion
        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_InPlaceRecursive(Transformer):
    "Recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)



# Visitors

class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        "Default operation on tree (for override)"
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase):
    """Bottom-up visitor, non-recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self,tree):
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree

class Visitor_Recursive(VisitorBase):
    """Bottom-up visitor, recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree):
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree



def visit_children_decor(func):
    "See Interpreter"
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner


class Interpreter(_Decoratable):
    """Top-down visitor, recursive

    Visits the tree, starting with the root and finally the leaves (top-down)
    Calls its methods (provided by user via inheritance) according to tree.data

    Unlike Transformer and Visitor, the Interpreter doesn't automatically visit its sub-branches.
    The user has to explicitly call visit_children, or use the @visit_children_decor
    """

    def visit(self, tree):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree):
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)




# Decorators

def _apply_decorator(obj, decorator, **kwargs):
    try:
        _apply = obj._apply_decorator
    except AttributeError:
        return decorator(obj, **kwargs)
    else:
        return _apply(decorator, **kwargs)



def _inline_args__func(func):
    @wraps(func)
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, children):
                return _f(self, *children)
        else:
            def f(self, children):
                return _f(*children)
        return f

    return smart_decorator(func, create_decorator)


def inline_args(obj):   # XXX Deprecated
    return _apply_decorator(obj, _inline_args__func)



def _visitor_args_func_dec(func, visit_wrapper=None, static=False):
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, *args, **kwargs):
                return _f(self, *args, **kwargs)
        else:
            def f(self, *args, **kwargs):
                return _f(*args, **kwargs)
        return f

    if static:
        f = wraps(func)(create_decorator(func, False))
    else:
        f = smart_decorator(func, create_decorator)
    f.vargs_applied = True
    f.visit_wrapper = visit_wrapper
    return f


def _vargs_inline(f, data, children, meta):
    return f(*children)
def _vargs_meta_inline(f, data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, data, children, meta):
    return f(children, meta)   # TODO swap these for consistency? Backwards incompatible!
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))

def v_args(inline=False, meta=False, tree=False, wrapper=None):
    "A convenience decorator factory, for modifying the behavior of user-supplied visitor methods"
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_decorator(obj, _visitor_args_func_dec, visit_wrapper=func)
    return _visitor_args_dec



class Indenter:
    def __init__(self):
        self.paren_level = None
        self.indent_level = None
        assert self.tab_len > 0

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] # Tabs and spaces
        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    # XXX Hack for ContextualLexer. Maybe there's a more elegant solution?
    @property
    def always_accept(self):
        return (self.NL_type,)



class Symbol(Serialize):
    __slots__ = ('name',)

    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)



class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term = False



class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'empty_indices'

    def __init__(self, keep_all_tokens=False, expand1=False, priority=None, empty_indices=()):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
        )


class Rule(Serialize):
    """
        origin : a symbol
        expansion : a list of symbols
        order : index of this expansion amongst all rules of the same name
    """
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion





class Pattern(Serialize):

    def __init__(self, value, flags=()):
        self.value = value
        self.flags = frozenset(flags)

    def __repr__(self):
        return repr(self.to_regexp())

    # Pattern Hashing assumes all subclasses have a different priority!
    def __hash__(self):
        return hash((type(self), self.value, self.flags))
    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    def to_regexp(self):
        raise NotImplementedError()

    if Py36:
        # Python 3.6 changed syntax for flags in regular expression
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s:%s)' % (f, value))
            return value

    else:
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s)' % f) + value
            return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type = "str"

    def to_regexp(self):
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self):
        return len(self.value)
    max_width = min_width

class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type = "re"

    def to_regexp(self):
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self):
        return self._get_width()[0]
    @property
    def max_width(self):
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    def __init__(self, name, pattern, priority=1):
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)



class Token(Str):
    __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        try:
            self = super(Token, cls).__new__(cls, value)
        except UnicodeDecodeError:
            value = value.decode('latin1')
            self = super(Token, cls).__new__(cls, value)

        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = value
        self.line = line
        self.column = column
        self.end_line = end_line
        self.end_column = end_column
        self.end_pos = end_pos
        return self

    def update(self, type_=None, value=None):
        return Token.new_borrow_pos(
            type_ if type_ is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.pos_in_stream, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column, ))

    def __repr__(self):
        return 'Token(%s, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    def __init__(self):
        self.newline_char = '\n'
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def feed(self, token, test_newline=True):
        """Consume a token and calculate the new line & column.

        As an optional optimization, set test_newline=False is token doesn't contain a newline.
        """
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1

class _Lex:
    "Built to serve both Lexer and ContextualLexer"
    def __init__(self, lexer, state=None):
        self.lexer = lexer
        self.state = state

    def lex(self, stream, newline_types, ignore_types):
        newline_types = frozenset(newline_types)
        ignore_types = frozenset(ignore_types)
        line_ctr = LineCounter()
        last_token = None

        while line_ctr.char_pos < len(stream):
            lexer = self.lexer
            res = lexer.match(stream, line_ctr.char_pos)
            if not res:
                allowed = {v for m, tfi in lexer.mres for v in tfi.values()} - ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(stream, line_ctr.char_pos, line_ctr.line, line_ctr.column, allowed=allowed, state=self.state, token_history=last_token and [last_token])

            value, type_ = res

            if type_ not in ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                line_ctr.feed(value, type_ in newline_types)
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in lexer.callback:
                    t = lexer.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise ValueError("Callbacks must return a token (returned %r)" % t)
                yield t
                last_token = t
            else:
                if type_ in lexer.callback:
                    t2 = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    lexer.callback[type_](t2)
                line_ctr.feed(value, type_ in newline_types)




class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                t.type = type_from_index[m.lastindex]
                break
        return t

class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2





def _create_unless(terminals, g_regex_flags):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = [] # {}
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority > retok.priority:
                continue
            s = strtok.pattern.value
            m = re.match(retok.pattern.to_regexp(), s, g_regex_flags)
            if m and m.group(0) == s:
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(build_mres(unless, g_regex_flags, match_whole=True))

    terminals = [t for t in terminals if t not in embedded_strs]
    return terminals, callback


def _build_mres(terminals, max_size, g_regex_flags, match_whole):
    # Python sets an unreasonable group limit (currently 100) in its re module
    # Worse, the only way to know we reached it is by catching an AssertionError!
    # This function recursively tries less and less groups until it's successful.
    postfix = '$' if match_whole else ''
    mres = []
    while terminals:
        try:
            mre = re.compile(u'|'.join(u'(?P<%s>%s)'%(t.name, t.pattern.to_regexp()+postfix) for t in terminals[:max_size]), g_regex_flags)
        except AssertionError:  # Yes, this is what Python provides us.. :/
            return _build_mres(terminals, max_size//2, g_regex_flags, match_whole)

        # terms_from_name = {t.name: t for t in terminals[:max_size]}
        mres.append((mre, {i:n for n,i in mre.groupindex.items()} ))
        terminals = terminals[max_size:]
    return mres

def build_mres(terminals, g_regex_flags, match_whole=False):
    return _build_mres(terminals, len(terminals), g_regex_flags, match_whole)

def _regexp_has_newline(r):
    r"""Expressions that may indicate newlines in a regexp:
        - newlines (\n)
        - escaped newline (\\n)
        - anything but ([^...])
        - any-char (.) when the flag (?s) exists
        - spaces (\s)
    """
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)

class Lexer(object):
    """Lexer interface

    Method Signatures:
        lex(self, stream) -> Iterator[Token]
    """
    lex = NotImplemented


class TraditionalLexer(Lexer):

    def __init__(self, terminals, ignore=(), user_callbacks={}, g_regex_flags=0):
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        terminals = list(terminals)

        # Sanitization
        for t in terminals:
            try:
                re.compile(t.pattern.to_regexp(), g_regex_flags)
            except re.error:
                raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

            if t.pattern.min_width == 0:
                raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

        assert set(ignore) <= {t.name for t in terminals}

        # Init
        self.newline_types = [t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp())]
        self.ignore_types = list(ignore)

        terminals.sort(key=lambda x:(-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = user_callbacks
        self.build(g_regex_flags)

    def build(self, g_regex_flags=0):
        terminals, self.callback = _create_unless(self.terminals, g_regex_flags)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                # Already a callback there, probably UnlessCallback
                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self.mres = build_mres(terminals, g_regex_flags)

    def match(self, stream, pos):
        for mre, type_from_index in self.mres:
            m = mre.match(stream, pos)
            if m:
                return m.group(0), type_from_index[m.lastindex]

    def lex(self, stream):
        return _Lex(self).lex(stream, self.newline_types, self.ignore_types)




class ContextualLexer(Lexer):

    def __init__(self, terminals, states, ignore=(), always_accept=(), user_callbacks={}, g_regex_flags=0):
        tokens_by_name = {}
        for t in terminals:
            assert t.name not in tokens_by_name, t
            tokens_by_name[t.name] = t

        lexer_by_tokens = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(ignore) | set(always_accept)
                state_tokens = [tokens_by_name[n] for n in accepts if n and n in tokens_by_name]
                lexer = TraditionalLexer(state_tokens, ignore=ignore, user_callbacks=user_callbacks, g_regex_flags=g_regex_flags)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        self.root_lexer = TraditionalLexer(terminals, ignore=ignore, user_callbacks=user_callbacks, g_regex_flags=g_regex_flags)

    def lex(self, stream, get_parser_state):
        parser_state = get_parser_state()
        l = _Lex(self.lexers[parser_state], parser_state)
        try:
            for x in l.lex(stream, self.root_lexer.newline_types, self.root_lexer.ignore_types):
                yield x
                parser_state = get_parser_state()
                l.lexer = self.lexers[parser_state]
                l.state = parser_state # For debug only, no need to worry about multithreading
        except UnexpectedCharacters as e:
            # In the contextual lexer, UnexpectedCharacters can mean that the terminal is defined,
            # but not in the current context.
            # This tests the input against the global context, to provide a nicer error.
            root_match = self.root_lexer.match(stream, e.pos_in_stream)
            if not root_match:
                raise

            value, type_ = root_match
            t = Token(type_, value, e.pos_in_stream, e.line, e.column)
            raise UnexpectedToken(t, e.allowed, state=e.state)



class LexerConf(Serialize):
    __serialize_fields__ = 'tokens', 'ignore', 'g_regex_flags'
    __serialize_namespace__ = TerminalDef,

    def __init__(self, tokens, ignore=(), postlex=None, callbacks=None, g_regex_flags=0):
        self.tokens = tokens
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags

    def _deserialize(self):
        self.callbacks = {} # TODO


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)

class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            for c in children:
                if isinstance(c, Tree) and not c.meta.empty:
                    res.meta.line = c.meta.line
                    res.meta.column = c.meta.column
                    res.meta.start_pos = c.meta.start_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.line = c.line
                    res.meta.column = c.column
                    res.meta.start_pos = c.pos_in_stream
                    res.meta.empty = False
                    break

            for c in reversed(children):
                if isinstance(c, Tree) and not c.meta.empty:
                    res.meta.end_line = c.meta.end_line
                    res.meta.end_column = c.meta.end_column
                    res.meta.end_pos = c.meta.end_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.end_line = c.end_line
                    res.meta.end_column = c.end_column
                    res.meta.end_pos = c.end_pos
                    res.meta.empty = False
                    break

        return res


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR_NoPlaceholders(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)

def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')

def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices):
    # Prepare empty_indices as: How many Nones to insert at each index?
    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            # LALR without placeholders
            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])

class AmbiguousExpander:
    """Deal with the case where we're expanding children ('_rule') into a parent but the children
       are ambiguous. i.e. (parent->_ambig->_expand_this_rule). In this case, make the parent itself
       ambiguous with as many copies as their are ambiguous children, and then copy the ambiguous children
       into the right parents in the right places, essentially shifting the ambiguiuty up the tree."""
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(child):
            return hasattr(child, 'data') and child.data == '_ambig'

        #### When we're repeatedly expanding ambiguities we can end up with nested ambiguities.
        #    All children of an _ambig node should be a derivation of that ambig node, hence
        #    it is safe to assume that if we see an _ambig node nested within an ambig node
        #    it is safe to simply expand it into the parent _ambig node as an alternative derivation.
        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                to_expand = [j for j, grandchild in enumerate(child.children) if _is_ambig_tree(grandchild)]
                child.expand_kids_by_index(*to_expand)

        if not ambiguous:
            return self.node_builder(children)

        expand = [ iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children) ]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])

def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)

def ptb_inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f

def inplace_transformer(func):
    @wraps(func)
    def f(children):
        # function name in a Transformer is a rule name.
        tree = Tree(func.__name__, children)
        return func(tree)
    return f

def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")
    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, keep_all_tokens=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.always_keep_all_tokens = keep_all_tokens
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        for rule in rules:
            options = rule.options
            keep_all_tokens = self.always_keep_all_tokens or options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                self.propagate_positions and PropagatePositions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
            ]))

            yield rule, wrapper_chain


    def create_callback(self, transformer=None):
        callbacks = {}

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                # XXX InlineTransformer is deprecated!
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                else:
                    if isinstance(transformer, InlineTransformer):
                        f = ptb_inline_args(f)
                    elif isinstance(transformer, Transformer_InPlace):
                        f = inplace_transformer(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks


class LALR_Parser(object):
    def __init__(self, parser_conf, debug=False):
        assert all(r.options.priority is None for r in parser_conf.rules), "LALR doesn't yet support prioritization"
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks)

    @classmethod
    def deserialize(cls, data, memo, callbacks):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks)
        return inst

    def serialize(self, memo):
        return self._parse_table.serialize(memo)

    def parse(self, *args):
        return self.parser.parse(*args)


class _Parser:
    def __init__(self, parse_table, callbacks):
        self.states = parse_table.states
        self.start_states = parse_table.start_states
        self.end_states = parse_table.end_states
        self.callbacks = callbacks

    def parse(self, seq, start, set_state=None):
        token = None
        stream = iter(seq)
        states = self.states

        start_state = self.start_states[start]
        end_state = self.end_states[start]

        state_stack = [start_state]
        value_stack = []

        if set_state: set_state(start_state)

        def get_action(token):
            state = state_stack[-1]
            try:
                return states[state][token.type]
            except KeyError:
                expected = [s for s in states[state].keys() if s.isupper()]
                raise UnexpectedToken(token, expected, state=state)

        def reduce(rule):
            size = len(rule.expansion)
            if size:
                s = value_stack[-size:]
                del state_stack[-size:]
                del value_stack[-size:]
            else:
                s = []

            value = self.callbacks[rule](s)

            _action, new_state = states[state_stack[-1]][rule.origin.name]
            assert _action is Shift
            state_stack.append(new_state)
            value_stack.append(value)

        # Main LALR-parser loop
        for token in stream:
            while True:
                action, arg = get_action(token)
                assert arg != end_state

                if action is Shift:
                    state_stack.append(arg)
                    value_stack.append(token)
                    if set_state: set_state(arg)
                    break # next token
                else:
                    reduce(arg)

        token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
        while True:
            _action, arg = get_action(token)
            assert(_action is Reduce)
            reduce(arg)
            if state_stack[-1] == end_state:
                return value_stack[-1]



class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')


class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()
        rules = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def get_frontend(parser, lexer):
    if parser=='lalr':
        if lexer is None:
            raise ValueError('The LALR parser requires use of a lexer')
        elif lexer == 'standard':
            return LALR_TraditionalLexer
        elif lexer == 'contextual':
            return LALR_ContextualLexer
        elif issubclass(lexer, Lexer):
            return partial(LALR_CustomLexer, lexer)
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser=='earley':
        if lexer=='standard':
            return Earley
        elif lexer=='dynamic':
            return XEarley
        elif lexer=='dynamic_complete':
            return XEarley_CompleteLex
        elif lexer=='contextual':
            raise ValueError('The Earley parser does not support the contextual parser')
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser == 'cyk':
        if lexer == 'standard':
            return CYK
        else:
            raise ValueError('CYK parser requires using standard parser.')
    else:
        raise ValueError('Unknown parser: %s' % parser)


class _ParserFrontend(Serialize):
    def _parse(self, input, start, *args):
        if start is None:
            start = self.start
            if len(start) > 1:
                raise ValueError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start)
            start ,= start
        return self.parser.parse(input, start, *args)


class WithLexer(_ParserFrontend):
    lexer = None
    parser = None
    lexer_conf = None
    start = None

    __serialize_fields__ = 'parser', 'lexer_conf', 'start'
    __serialize_namespace__ = LexerConf,

    def __init__(self, lexer_conf, parser_conf, options=None):
        self.lexer_conf = lexer_conf
        self.start = parser_conf.start
        self.postlex = lexer_conf.postlex

    @classmethod
    def deserialize(cls, data, memo, callbacks, postlex):
        inst = super(WithLexer, cls).deserialize(data, memo)
        inst.postlex = postlex
        inst.parser = LALR_Parser.deserialize(inst.parser, memo, callbacks)
        inst.init_lexer()
        return inst

    def _serialize(self, data, memo):
        data['parser'] = data['parser'].serialize(memo)

    def lex(self, *args):
        stream = self.lexer.lex(*args)
        return self.postlex.process(stream) if self.postlex else stream

    def parse(self, text, start=None):
        token_stream = self.lex(text)
        return self._parse(token_stream, start)

    def init_traditional_lexer(self):
        self.lexer = TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks, g_regex_flags=self.lexer_conf.g_regex_flags)

class LALR_WithLexer(WithLexer):
    def __init__(self, lexer_conf, parser_conf, options=None):
        debug = options.debug if options else False
        self.parser = LALR_Parser(parser_conf, debug=debug)
        WithLexer.__init__(self, lexer_conf, parser_conf, options)

        self.init_lexer()

    def init_lexer(self):
        raise NotImplementedError()

class LALR_TraditionalLexer(LALR_WithLexer):
    def init_lexer(self):
        self.init_traditional_lexer()

class LALR_ContextualLexer(LALR_WithLexer):
    def init_lexer(self):
        states = {idx:list(t.keys()) for idx, t in self.parser._parse_table.states.items()}
        always_accept = self.postlex.always_accept if self.postlex else ()
        self.lexer = ContextualLexer(self.lexer_conf.tokens, states,
                                     ignore=self.lexer_conf.ignore,
                                     always_accept=always_accept,
                                     user_callbacks=self.lexer_conf.callbacks,
                                     g_regex_flags=self.lexer_conf.g_regex_flags)


    def parse(self, text, start=None):
        parser_state = [None]
        def set_parser_state(s):
            parser_state[0] = s

        token_stream = self.lex(text, lambda: parser_state[0])
        return self._parse(token_stream, start, set_parser_state)


class LarkOptions(Serialize):
    """Specifies the options for Lark

    """
    OPTIONS_DOC = """
# General

    start - The start symbol. Either a string, or a list of strings for
            multiple possible starts (Default: "start")
    debug - Display debug information, such as warnings (default: False)
    transformer - Applies the transformer to every parse tree (equivlent to
                  applying it after the parse, but faster)
    propagate_positions - Propagates (line, column, end_line, end_column)
                          attributes into all tree branches.
    maybe_placeholders - When True, the `[]` operator returns `None` when not matched.
                         When `False`,  `[]` behaves like the `?` operator,
                             and returns no value at all.
                         (default=`False`. Recommended to set to `True`)
    cache_grammar - Cache the Lark grammar (Default: False)
    g_regex_flags - Flags that are applied to all terminals
                    (both regex and strings)
    keep_all_tokens - Prevent the tree builder from automagically
                      removing "punctuation" tokens (default: False)

# Algorithm

    parser - Decides which parser engine to use
             Accepts "earley" or "lalr". (Default: "earley")
             (there is also a "cyk" option for legacy)

    lexer - Decides whether or not to use a lexer stage
        "auto" (default): Choose for me based on the parser
        "standard": Use a standard lexer
        "contextual": Stronger lexer (only works with parser="lalr")
        "dynamic": Flexible and powerful (only with parser="earley")
        "dynamic_complete": Same as dynamic, but tries *every* variation
                            of tokenizing possible.

    ambiguity - Decides how to handle ambiguity in the parse.
                Only relevant if parser="earley"
        "resolve": The parser will automatically choose the simplest
                    derivation (it chooses consistently: greedy for
                    tokens, non-greedy for rules)
        "explicit": The parser will return all derivations wrapped
                    in "_ambig" tree nodes (i.e. a forest).

# Domain Specific

    postlex - Lexer post-processing (Default: None) Only works with the
                standard and contextual lexers.
    priority - How priorities should be evaluated - auto, none, normal,
                invert (Default: auto)
    lexer_callbacks - Dictionary of callbacks for the lexer. May alter
                        tokens during lexing. Use with caution.
    edit_terminals - A callback
    """
    if __doc__:
        __doc__ += OPTIONS_DOC

    _defaults = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache_grammar': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': False,
        'edit_terminals': None,
        'g_regex_flags': 0,
    }

    def __init__(self, options_dict):
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], STRING_TYPE):
            options['start'] = [options['start']]

        self.__dict__['options'] = options

        assert self.parser in ('earley', 'lalr', 'cyk', None)

        if self.parser == 'earley' and self.transformer:
            raise ValueError('Cannot specify an embedded transformer when using the Earley algorithm.'
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ValueError("Unknown options: %s" % o.keys())

    def __getattr__(self, name):
        try:
            return self.options[name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name, value):
        assert name in self.options
        self.options[name] = value

    def serialize(self, memo):
        return self.options

    @classmethod
    def deserialize(cls, data, memo):
        return cls(data)


class Lark(Serialize):
    def __init__(self, grammar, **options):
        """
            grammar : a string or file-object containing the grammar spec (using Lark's ebnf syntax)
            options : a dictionary controlling various aspects of Lark.
        """
        self.options = LarkOptions(options)

        # Some, but not all file-like objects have a 'name' attribute
        try:
            self.source = grammar.name
        except AttributeError:
            self.source = '<string>'

        # Drain file-like objects to get their contents
        try:
            read = grammar.read
        except AttributeError:
            pass
        else:
            grammar = read()

        assert isinstance(grammar, STRING_TYPE)

        if self.options.cache_grammar:
            raise NotImplementedError("Not available yet")

        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'standard'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        assert lexer in ('standard', 'contextual', 'dynamic', 'dynamic_complete') or issubclass(lexer, Lexer)

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            disambig_parsers = ['earley', 'cyk']
            assert self.options.parser in disambig_parsers, (
                'Only %s supports disambiguation right now') % ', '.join(disambig_parsers)

        if self.options.priority == 'auto':
            if self.options.parser in ('earley', 'cyk', ):
                self.options.priority = 'normal'
            elif self.options.parser in ('lalr', ):
                self.options.priority = None
        elif self.options.priority in ('invert', 'normal'):
            assert self.options.parser in ('earley', 'cyk'), "priorities are not supported for LALR at this time"

        assert self.options.priority in ('auto', None, 'normal', 'invert'), 'invalid priority option specified: {}. options are auto, none, normal, invert.'.format(self.options.priority)
        assert self.options.ambiguity not in ('resolve__antiscore_sum', ), 'resolve__antiscore_sum has been replaced with the option priority="invert"'
        assert self.options.ambiguity in ('resolve', 'explicit', 'auto', )

        # Parse the grammar file and compose the grammars (TODO)
        self.grammar = load_grammar(grammar, self.source)

        # Compile the EBNF grammar into BNF
        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name:t for t in self.terminals}

        # If the user asked to invert the priorities, negate them all here.
        # This replaces the old 'resolve__antiscore_sum' option.
        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
        # Else, if the user asked to disable priorities, strip them from the
        # rules. This allows the Earley parsers to skip an extra forest walk
        # for improved performance, if you don't need them (or didn't specify any).
        elif self.options.priority == None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None

        # TODO Deprecate lexer_callbacks?
        lexer_callbacks = dict(self.options.lexer_callbacks)
        if self.options.transformer:
            t = self.options.transformer
            for term in self.terminals:
                if hasattr(t, term.name):
                    lexer_callbacks[term.name] = getattr(t, term.name)

        self.lexer_conf = LexerConf(self.terminals, self.ignore_tokens, self.options.postlex, lexer_callbacks, self.options.g_regex_flags)

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

    if __init__.__doc__:
        __init__.__doc__ += "\nOptions:\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self):
        return TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks, g_regex_flags=self.lexer_conf.g_regex_flags)

    def _prepare_callbacks(self):
        self.parser_class = get_frontend(self.options.parser, self.options.lexer)
        self._parse_tree_builder = ParseTreeBuilder(self.rules, self.options.tree_class or Tree, self.options.propagate_positions, self.options.keep_all_tokens, self.options.parser!='lalr' and self.options.ambiguity=='explicit', self.options.maybe_placeholders)
        self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)

    def _build_parser(self):
        self._prepare_callbacks()
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return self.parser_class(self.lexer_conf, parser_conf, options=self.options)

    @classmethod
    def deserialize(cls, data, namespace, memo, transformer=None, postlex=None):
        if memo:
            memo = SerializeMemoizer.deserialize(memo, namespace, {})
        inst = cls.__new__(cls)
        options = dict(data['options'])
        if transformer is not None:
            options['transformer'] = transformer
        if postlex is not None:
            options['postlex'] = postlex
        inst.options = LarkOptions.deserialize(options, memo)
        inst.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        inst.source = '<deserialized>'
        inst._prepare_callbacks()
        inst.parser = inst.parser_class.deserialize(data['parser'], memo, inst._callbacks, inst.options.postlex)
        return inst

    def save(self, f):
        data, m = self.memo_serialize([TerminalDef, Rule])
        pickle.dump({'data': data, 'memo': m}, f)

    @classmethod
    def load(cls, f):
        d = pickle.load(f)
        namespace = {'Rule': Rule, 'TerminalDef': TerminalDef}
        memo = d['memo']
        return Lark.deserialize(d['data'], namespace, memo)


    @classmethod
    def open(cls, grammar_filename, rel_to=None, **options):
        """Create an instance of Lark with the grammar given by its filename

        If rel_to is provided, the function will find the grammar filename in relation to it.

        Example:

            >>> Lark.open("grammar_file.lark", rel_to=__file__, parser="lalr")
            Lark(...)

        """
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source, self.options.parser, self.options.lexer)


    def lex(self, text):
        "Only lex (and postlex) the text, without parsing it. Only relevant when lexer='standard'"
        if not hasattr(self, 'lexer'):
            self.lexer = self._build_lexer()
        stream = self.lexer.lex(text)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name):
        "Get information about a terminal"
        return self._terminals_dict[name]

    def parse(self, text, start=None):
        """Parse the given text, according to the options provided.

        The 'start' parameter is required if Lark was given multiple possible start symbols (using the start option).

        Returns a tree, unless specified otherwise.
        """
        return self.parser.parse(text, start=start)


DATA = (
{'parser': {'parser': {'tokens': {0: '__ANON_1', 1: 'CONJ', 2: 'DISJ', 3: 'LPAR', 4: 'PP', 5: 'OR', 6: 'PLUS', 7: 'BANG', 8: '__ANON_7', 9: 'LSQB', 10: 'LT', 11: 'EQ', 12: 'SLASH', 13: 'MINUS', 14: 'MM', 15: 'ATSIGN', 16: 'CIRCUMFLEX', 17: 'PERCENT', 18: '__ANON_2', 19: 'COMP', 20: '__ANON_6', 21: 'TT', 22: '_IS', 23: '__ANON_8', 24: 'GT', 25: '__ANON_4', 26: 'AND', 27: 'STAR', 28: 'COMMA', 29: '__ANON_5', 30: 'RBRACE', 31: 'COLON', 32: '__ANON_9', 33: 'FALSE', 34: '__ANON_3', 35: 'FORALL', 36: 'EXISTS', 37: 'TRUE', 38: 'IF', 39: '__ANON_10', 40: 'VAR', 41: 'ESCAPED_STRING', 42: 'LBRACE', 43: 'INT', 44: 'DOT', 45: 'THAT', 46: 'RSQB', 47: 'HAS', 48: '__ANON_0', 49: 'ELSE', 50: 'RPAR', 51: 'SEQUENCE', 52: 'IN', 53: 'LET', 54: '$END', 55: 'RULE', 56: 'ASSUME', 57: 'SEMICOLON', 58: 'SECTION', 59: 'PROOF', 60: 'ASSUMING', 61: 'THEN', 62: 'var', 63: 'praline_div', 64: 'operator', 65: 'app', 66: 'praline_atom', 67: 'praline_arith', 68: '__operator_sym_plus_6', 69: 'praline_factorial', 70: 'string', 71: 'ne', 72: 'praline_add', 73: 'forall_sym', 74: 'exists_sym', 75: 'ge', 76: 'operator_sym_char', 77: 'praline_exp', 78: 'operator_sym', 79: 'praline_mul', 80: 'int', 81: 'praline_sub', 82: 'le', 83: 'quant_qual', 84: 'term', 85: 'bool', 86: 'SUM', 87: 'QUOTE', 88: 'assumption', 89: '__definition_plus_1', 90: '__bool_star_4', 91: '__bool_plus_5', 92: '__praline_sub_star_7', 93: '__app_star_13', 94: '__praline_exp_star_12', 95: '__term_star_3', 96: '__praline_mul_star_9', 97: '__sequence_star_2', 98: 'seq_def', 99: '__praline_div_plus_11', 100: '__praline_div_star_10', 101: '__start_star_0', 102: 'start', 103: 'sequence', 104: 'definition', 105: 'PROPERTY', 106: '__praline_add_star_8'}, 'states': {0: {0: (0, 161), 1: (1, {'@': 66}), 2: (1, {'@': 66}), 3: (1, {'@': 66}), 4: (1, {'@': 66}), 5: (1, {'@': 66}), 6: (1, {'@': 66}), 7: (1, {'@': 66}), 8: (1, {'@': 66}), 9: (1, {'@': 66}), 10: (1, {'@': 66}), 11: (1, {'@': 66}), 12: (1, {'@': 66}), 13: (1, {'@': 66}), 14: (1, {'@': 66}), 15: (1, {'@': 66}), 16: (1, {'@': 66}), 17: (1, {'@': 66}), 18: (1, {'@': 66}), 19: (1, {'@': 66}), 20: (1, {'@': 66}), 21: (1, {'@': 66}), 22: (1, {'@': 66}), 23: (1, {'@': 66}), 24: (1, {'@': 66}), 25: (1, {'@': 66}), 26: (1, {'@': 66}), 27: (1, {'@': 66}), 28: (1, {'@': 66}), 29: (1, {'@': 66}), 30: (1, {'@': 66}), 31: (1, {'@': 66}), 32: (1, {'@': 66}), 33: (1, {'@': 66}), 34: (1, {'@': 66}), 35: (1, {'@': 66}), 36: (1, {'@': 66}), 37: (1, {'@': 66}), 38: (1, {'@': 66}), 39: (1, {'@': 66}), 40: (1, {'@': 66}), 41: (1, {'@': 66}), 42: (1, {'@': 66}), 43: (1, {'@': 66}), 44: (1, {'@': 66}), 45: (1, {'@': 66}), 46: (1, {'@': 66}), 47: (1, {'@': 66}), 48: (1, {'@': 66}), 49: (1, {'@': 66}), 50: (1, {'@': 66}), 51: (1, {'@': 66}), 52: (1, {'@': 66}), 53: (1, {'@': 66}), 54: (1, {'@': 66}), 55: (1, {'@': 66}), 56: (1, {'@': 66}), 57: (1, {'@': 66}), 58: (1, {'@': 66}), 59: (1, {'@': 66}), 60: (1, {'@': 66}), 61: (1, {'@': 66})}, 1: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 80), 32: (0, 88), 84: (0, 22), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 2: {1: (1, {'@': 67}), 2: (1, {'@': 67}), 8: (1, {'@': 67}), 10: (1, {'@': 67}), 11: (1, {'@': 67}), 12: (1, {'@': 67}), 14: (1, {'@': 67}), 4: (1, {'@': 67}), 17: (1, {'@': 67}), 18: (1, {'@': 67}), 19: (1, {'@': 67}), 20: (1, {'@': 67}), 21: (1, {'@': 67}), 86: (1, {'@': 67}), 23: (1, {'@': 67}), 24: (1, {'@': 67}), 25: (1, {'@': 67}), 15: (1, {'@': 67}), 40: (1, {'@': 67}), 41: (1, {'@': 67}), 42: (1, {'@': 67}), 3: (1, {'@': 67}), 43: (1, {'@': 67}), 33: (1, {'@': 67}), 9: (1, {'@': 67}), 13: (1, {'@': 67}), 37: (1, {'@': 67}), 87: (1, {'@': 67})}, 3: {49: (0, 102), 18: (0, 230), 22: (0, 90)}, 4: {3: (0, 240), 79: (0, 217), 80: (0, 239), 42: (0, 5), 40: (0, 68), 63: (0, 112), 9: (0, 10), 65: (0, 43), 66: (0, 87), 62: (0, 173), 37: (0, 30), 33: (0, 232), 43: (0, 94), 69: (0, 98), 77: (0, 123), 70: (0, 64), 41: (0, 125), 72: (0, 13)}, 5: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 84: (0, 192), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 30: (0, 160), 39: (0, 236)}, 6: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 84: (0, 191), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 7: {2: (1, {'@': 68}), 4: (1, {'@': 68}), 86: (1, {'@': 68}), 8: (1, {'@': 68}), 10: (1, {'@': 68}), 11: (1, {'@': 68}), 12: (1, {'@': 68}), 14: (1, {'@': 68}), 17: (1, {'@': 68}), 18: (1, {'@': 68}), 19: (1, {'@': 68}), 20: (1, {'@': 68}), 21: (1, {'@': 68}), 24: (1, {'@': 68}), 23: (1, {'@': 68}), 1: (1, {'@': 68}), 25: (1, {'@': 68}), 15: (1, {'@': 68}), 40: (1, {'@': 68}), 41: (1, {'@': 68}), 42: (1, {'@': 68}), 3: (1, {'@': 68}), 43: (1, {'@': 68}), 33: (1, {'@': 68}), 9: (1, {'@': 68}), 13: (1, {'@': 68}), 37: (1, {'@': 68}), 87: (1, {'@': 68})}, 8: {3: (0, 240), 79: (0, 217), 80: (0, 239), 81: (0, 89), 42: (0, 5), 40: (0, 68), 72: (0, 56), 63: (0, 112), 64: (0, 206), 9: (0, 10), 65: (0, 43), 66: (0, 87), 62: (0, 173), 37: (0, 30), 33: (0, 232), 67: (0, 228), 43: (0, 94), 69: (0, 98), 77: (0, 123), 70: (0, 64), 13: (0, 156), 41: (0, 125)}, 9: {2: (1, {'@': 69}), 4: (1, {'@': 69}), 51: (1, {'@': 69}), 32: (1, {'@': 69}), 33: (1, {'@': 69}), 34: (1, {'@': 69}), 35: (1, {'@': 69}), 53: (1, {'@': 69}), 11: (1, {'@': 69}), 9: (1, {'@': 69}), 12: (1, {'@': 69}), 36: (1, {'@': 69}), 54: (1, {'@': 69}), 18: (1, {'@': 69}), 19: (1, {'@': 69}), 37: (1, {'@': 69}), 21: (1, {'@': 69}), 55: (1, {'@': 69}), 20: (1, {'@': 69}), 1: (1, {'@': 69}), 38: (1, {'@': 69}), 25: (1, {'@': 69}), 56: (1, {'@': 69}), 39: (1, {'@': 69}), 40: (1, {'@': 69}), 41: (1, {'@': 69}), 58: (1, {'@': 69}), 42: (1, {'@': 69}), 3: (1, {'@': 69}), 59: (1, {'@': 69}), 43: (1, {'@': 69}), 8: (1, {'@': 69}), 10: (1, {'@': 69}), 13: (1, {'@': 69}), 14: (1, {'@': 69}), 17: (1, {'@': 69}), 23: (1, {'@': 69}), 24: (1, {'@': 69}), 15: (1, {'@': 69})}, 10: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 84: (0, 165), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236), 46: (0, 174)}, 11: {44: (0, 155), 18: (0, 230), 22: (0, 90)}, 12: {2: (1, {'@': 70}), 4: (1, {'@': 70}), 86: (1, {'@': 70}), 8: (1, {'@': 70}), 10: (1, {'@': 70}), 11: (1, {'@': 70}), 12: (1, {'@': 70}), 14: (1, {'@': 70}), 17: (1, {'@': 70}), 18: (1, {'@': 70}), 19: (1, {'@': 70}), 20: (1, {'@': 70}), 21: (1, {'@': 70}), 24: (1, {'@': 70}), 23: (1, {'@': 70}), 1: (1, {'@': 70}), 25: (1, {'@': 70}), 15: (1, {'@': 70}), 40: (1, {'@': 70}), 41: (1, {'@': 70}), 42: (1, {'@': 70}), 3: (1, {'@': 70}), 43: (1, {'@': 70}), 33: (1, {'@': 70}), 9: (1, {'@': 70}), 13: (1, {'@': 70}), 37: (1, {'@': 70}), 87: (1, {'@': 70})}, 13: {50: (1, {'@': 71}), 29: (1, {'@': 71}), 45: (1, {'@': 71}), 51: (1, {'@': 71}), 47: (1, {'@': 71}), 34: (1, {'@': 71}), 35: (1, {'@': 71}), 9: (1, {'@': 71}), 36: (1, {'@': 71}), 54: (1, {'@': 71}), 18: (1, {'@': 71}), 19: (1, {'@': 71}), 20: (1, {'@': 71}), 55: (1, {'@': 71}), 38: (1, {'@': 71}), 26: (1, {'@': 71}), 39: (1, {'@': 71}), 57: (1, {'@': 71}), 28: (1, {'@': 71}), 59: (1, {'@': 71}), 5: (1, {'@': 71}), 8: (1, {'@': 71}), 10: (1, {'@': 71}), 24: (1, {'@': 71}), 2: (1, {'@': 71}), 48: (1, {'@': 71}), 4: (1, {'@': 71}), 49: (1, {'@': 71}), 30: (1, {'@': 71}), 32: (1, {'@': 71}), 52: (1, {'@': 71}), 33: (1, {'@': 71}), 53: (1, {'@': 71}), 11: (1, {'@': 71}), 12: (1, {'@': 71}), 37: (1, {'@': 71}), 21: (1, {'@': 71}), 1: (1, {'@': 71}), 25: (1, {'@': 71}), 56: (1, {'@': 71}), 40: (1, {'@': 71}), 41: (1, {'@': 71}), 58: (1, {'@': 71}), 42: (1, {'@': 71}), 3: (1, {'@': 71}), 46: (1, {'@': 71}), 43: (1, {'@': 71}), 31: (1, {'@': 71}), 60: (1, {'@': 71}), 13: (1, {'@': 71}), 14: (1, {'@': 71}), 17: (1, {'@': 71}), 44: (1, {'@': 71}), 22: (1, {'@': 71}), 61: (1, {'@': 71}), 23: (1, {'@': 71}), 15: (1, {'@': 71})}, 14: {18: (0, 230), 22: (0, 90), 28: (1, {'@': 72}), 29: (1, {'@': 72}), 30: (1, {'@': 72}), 31: (1, {'@': 72}), 2: (1, {'@': 72}), 4: (1, {'@': 72}), 32: (1, {'@': 72}), 33: (1, {'@': 72}), 34: (1, {'@': 72}), 35: (1, {'@': 72}), 11: (1, {'@': 72}), 9: (1, {'@': 72}), 12: (1, {'@': 72}), 36: (1, {'@': 72}), 19: (1, {'@': 72}), 37: (1, {'@': 72}), 21: (1, {'@': 72}), 20: (1, {'@': 72}), 1: (1, {'@': 72}), 38: (1, {'@': 72}), 25: (1, {'@': 72}), 39: (1, {'@': 72}), 40: (1, {'@': 72}), 41: (1, {'@': 72}), 42: (1, {'@': 72}), 3: (1, {'@': 72}), 43: (1, {'@': 72}), 8: (1, {'@': 72}), 10: (1, {'@': 72}), 13: (1, {'@': 72}), 14: (1, {'@': 72}), 44: (1, {'@': 72}), 17: (1, {'@': 72}), 23: (1, {'@': 72}), 24: (1, {'@': 72}), 45: (1, {'@': 72}), 15: (1, {'@': 72}), 46: (1, {'@': 72}), 47: (1, {'@': 72}), 48: (1, {'@': 72}), 49: (1, {'@': 72}), 50: (1, {'@': 72}), 51: (1, {'@': 72}), 52: (1, {'@': 72}), 61: (1, {'@': 72}), 53: (1, {'@': 72}), 54: (1, {'@': 72}), 55: (1, {'@': 72}), 56: (1, {'@': 72}), 57: (1, {'@': 72}), 58: (1, {'@': 72}), 59: (1, {'@': 72}), 60: (1, {'@': 72})}, 15: {2: (1, {'@': 73}), 4: (1, {'@': 73}), 51: (1, {'@': 73}), 32: (1, {'@': 73}), 33: (1, {'@': 73}), 34: (1, {'@': 73}), 35: (1, {'@': 73}), 53: (1, {'@': 73}), 11: (1, {'@': 73}), 9: (1, {'@': 73}), 12: (1, {'@': 73}), 36: (1, {'@': 73}), 54: (1, {'@': 73}), 18: (1, {'@': 73}), 19: (1, {'@': 73}), 37: (1, {'@': 73}), 21: (1, {'@': 73}), 55: (1, {'@': 73}), 20: (1, {'@': 73}), 1: (1, {'@': 73}), 38: (1, {'@': 73}), 25: (1, {'@': 73}), 56: (1, {'@': 73}), 39: (1, {'@': 73}), 40: (1, {'@': 73}), 41: (1, {'@': 73}), 58: (1, {'@': 73}), 42: (1, {'@': 73}), 3: (1, {'@': 73}), 59: (1, {'@': 73}), 43: (1, {'@': 73}), 8: (1, {'@': 73}), 10: (1, {'@': 73}), 13: (1, {'@': 73}), 14: (1, {'@': 73}), 17: (1, {'@': 73}), 23: (1, {'@': 73}), 24: (1, {'@': 73}), 15: (1, {'@': 73})}, 16: {44: (0, 166), 18: (1, {'@': 74}), 22: (1, {'@': 74})}, 17: {28: (0, 77), 50: (0, 59)}, 18: {23: (0, 177), 19: (0, 195), 88: (0, 47), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 89: (0, 119), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 84: (0, 79), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 45: (0, 214), 39: (0, 236)}, 19: {18: (0, 230), 22: (0, 90), 28: (1, {'@': 75}), 29: (1, {'@': 75}), 30: (1, {'@': 75}), 31: (1, {'@': 75}), 2: (1, {'@': 75}), 4: (1, {'@': 75}), 32: (1, {'@': 75}), 33: (1, {'@': 75}), 34: (1, {'@': 75}), 35: (1, {'@': 75}), 11: (1, {'@': 75}), 9: (1, {'@': 75}), 12: (1, {'@': 75}), 36: (1, {'@': 75}), 19: (1, {'@': 75}), 37: (1, {'@': 75}), 21: (1, {'@': 75}), 20: (1, {'@': 75}), 1: (1, {'@': 75}), 38: (1, {'@': 75}), 25: (1, {'@': 75}), 39: (1, {'@': 75}), 40: (1, {'@': 75}), 41: (1, {'@': 75}), 42: (1, {'@': 75}), 3: (1, {'@': 75}), 43: (1, {'@': 75}), 8: (1, {'@': 75}), 10: (1, {'@': 75}), 13: (1, {'@': 75}), 14: (1, {'@': 75}), 44: (1, {'@': 75}), 17: (1, {'@': 75}), 23: (1, {'@': 75}), 24: (1, {'@': 75}), 45: (1, {'@': 75}), 15: (1, {'@': 75}), 46: (1, {'@': 75}), 47: (1, {'@': 75}), 48: (1, {'@': 75}), 49: (1, {'@': 75}), 50: (1, {'@': 75}), 51: (1, {'@': 75}), 52: (1, {'@': 75}), 61: (1, {'@': 75}), 53: (1, {'@': 75}), 54: (1, {'@': 75}), 55: (1, {'@': 75}), 56: (1, {'@': 75}), 57: (1, {'@': 75}), 58: (1, {'@': 75}), 59: (1, {'@': 75}), 60: (1, {'@': 75})}, 20: {18: (0, 230), 44: (0, 54), 22: (0, 90)}, 21: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 84: (0, 37), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 22: {18: (0, 230), 22: (0, 90)}, 23: {50: (1, {'@': 76}), 29: (1, {'@': 76}), 45: (1, {'@': 76}), 51: (1, {'@': 76}), 47: (1, {'@': 76}), 34: (1, {'@': 76}), 35: (1, {'@': 76}), 9: (1, {'@': 76}), 36: (1, {'@': 76}), 54: (1, {'@': 76}), 18: (1, {'@': 76}), 19: (1, {'@': 76}), 20: (1, {'@': 76}), 55: (1, {'@': 76}), 38: (1, {'@': 76}), 26: (1, {'@': 76}), 39: (1, {'@': 76}), 57: (1, {'@': 76}), 28: (1, {'@': 76}), 59: (1, {'@': 76}), 5: (1, {'@': 76}), 8: (1, {'@': 76}), 10: (1, {'@': 76}), 24: (1, {'@': 76}), 2: (1, {'@': 76}), 48: (1, {'@': 76}), 4: (1, {'@': 76}), 49: (1, {'@': 76}), 30: (1, {'@': 76}), 32: (1, {'@': 76}), 52: (1, {'@': 76}), 33: (1, {'@': 76}), 53: (1, {'@': 76}), 11: (1, {'@': 76}), 12: (1, {'@': 76}), 37: (1, {'@': 76}), 21: (1, {'@': 76}), 1: (1, {'@': 76}), 25: (1, {'@': 76}), 56: (1, {'@': 76}), 40: (1, {'@': 76}), 41: (1, {'@': 76}), 58: (1, {'@': 76}), 42: (1, {'@': 76}), 3: (1, {'@': 76}), 46: (1, {'@': 76}), 43: (1, {'@': 76}), 31: (1, {'@': 76}), 60: (1, {'@': 76}), 13: (1, {'@': 76}), 14: (1, {'@': 76}), 17: (1, {'@': 76}), 44: (1, {'@': 76}), 22: (1, {'@': 76}), 61: (1, {'@': 76}), 23: (1, {'@': 76}), 15: (1, {'@': 76})}, 24: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 84: (0, 45), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 25: {42: (0, 5), 3: (0, 240), 70: (0, 64), 66: (0, 87), 80: (0, 239), 9: (0, 10), 40: (0, 68), 65: (0, 43), 62: (0, 173), 37: (0, 30), 33: (0, 232), 69: (0, 248), 43: (0, 94), 41: (0, 125)}, 26: {2: (1, {'@': 77}), 4: (1, {'@': 77}), 5: (1, {'@': 77}), 6: (1, {'@': 77}), 7: (1, {'@': 77}), 8: (1, {'@': 77}), 10: (1, {'@': 77}), 11: (1, {'@': 77}), 12: (1, {'@': 77}), 13: (1, {'@': 77}), 14: (1, {'@': 77}), 16: (1, {'@': 77}), 17: (1, {'@': 77}), 18: (1, {'@': 77}), 19: (1, {'@': 77}), 20: (1, {'@': 77}), 21: (1, {'@': 77}), 22: (1, {'@': 77}), 24: (1, {'@': 77}), 27: (1, {'@': 77}), 23: (1, {'@': 77}), 1: (1, {'@': 77}), 25: (1, {'@': 77}), 26: (1, {'@': 77}), 15: (1, {'@': 77}), 48: (1, {'@': 77}), 49: (1, {'@': 77}), 50: (1, {'@': 77}), 29: (1, {'@': 77}), 45: (1, {'@': 77}), 51: (1, {'@': 77}), 47: (1, {'@': 77}), 30: (1, {'@': 77}), 32: (1, {'@': 77}), 52: (1, {'@': 77}), 34: (1, {'@': 77}), 33: (1, {'@': 77}), 35: (1, {'@': 77}), 53: (1, {'@': 77}), 9: (1, {'@': 77}), 36: (1, {'@': 77}), 54: (1, {'@': 77}), 37: (1, {'@': 77}), 55: (1, {'@': 77}), 38: (1, {'@': 77}), 56: (1, {'@': 77}), 39: (1, {'@': 77}), 57: (1, {'@': 77}), 40: (1, {'@': 77}), 28: (1, {'@': 77}), 41: (1, {'@': 77}), 58: (1, {'@': 77}), 42: (1, {'@': 77}), 3: (1, {'@': 77}), 59: (1, {'@': 77}), 46: (1, {'@': 77}), 43: (1, {'@': 77}), 31: (1, {'@': 77}), 60: (1, {'@': 77}), 44: (1, {'@': 77}), 61: (1, {'@': 77})}, 27: {1: (1, {'@': 78}), 2: (1, {'@': 78}), 3: (1, {'@': 78}), 4: (1, {'@': 78}), 5: (1, {'@': 78}), 6: (1, {'@': 78}), 7: (1, {'@': 78}), 8: (1, {'@': 78}), 9: (1, {'@': 78}), 10: (1, {'@': 78}), 11: (1, {'@': 78}), 12: (1, {'@': 78}), 13: (1, {'@': 78}), 14: (1, {'@': 78}), 15: (1, {'@': 78}), 16: (1, {'@': 78}), 17: (1, {'@': 78}), 18: (1, {'@': 78}), 19: (1, {'@': 78}), 20: (1, {'@': 78}), 21: (1, {'@': 78}), 22: (1, {'@': 78}), 23: (1, {'@': 78}), 24: (1, {'@': 78}), 25: (1, {'@': 78}), 26: (1, {'@': 78}), 27: (1, {'@': 78}), 48: (1, {'@': 78}), 49: (1, {'@': 78}), 50: (1, {'@': 78}), 29: (1, {'@': 78}), 51: (1, {'@': 78}), 47: (1, {'@': 78}), 30: (1, {'@': 78}), 32: (1, {'@': 78}), 52: (1, {'@': 78}), 34: (1, {'@': 78}), 33: (1, {'@': 78}), 35: (1, {'@': 78}), 53: (1, {'@': 78}), 36: (1, {'@': 78}), 54: (1, {'@': 78}), 37: (1, {'@': 78}), 55: (1, {'@': 78}), 38: (1, {'@': 78}), 56: (1, {'@': 78}), 39: (1, {'@': 78}), 57: (1, {'@': 78}), 40: (1, {'@': 78}), 28: (1, {'@': 78}), 41: (1, {'@': 78}), 58: (1, {'@': 78}), 42: (1, {'@': 78}), 59: (1, {'@': 78}), 46: (1, {'@': 78}), 43: (1, {'@': 78}), 31: (1, {'@': 78}), 60: (1, {'@': 78}), 44: (1, {'@': 78}), 61: (1, {'@': 78}), 45: (1, {'@': 78})}, 28: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 88: (0, 63), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 84: (0, 79), 34: (0, 138), 13: (0, 156), 44: (0, 72), 85: (0, 233), 25: (0, 205), 14: (0, 229), 45: (0, 214), 39: (0, 236)}, 29: {2: (1, {'@': 79}), 4: (1, {'@': 79}), 51: (1, {'@': 79}), 32: (1, {'@': 79}), 33: (1, {'@': 79}), 34: (1, {'@': 79}), 35: (1, {'@': 79}), 53: (1, {'@': 79}), 11: (1, {'@': 79}), 9: (1, {'@': 79}), 12: (1, {'@': 79}), 36: (1, {'@': 79}), 54: (1, {'@': 79}), 18: (1, {'@': 79}), 19: (1, {'@': 79}), 37: (1, {'@': 79}), 21: (1, {'@': 79}), 55: (1, {'@': 79}), 20: (1, {'@': 79}), 1: (1, {'@': 79}), 38: (1, {'@': 79}), 25: (1, {'@': 79}), 56: (1, {'@': 79}), 39: (1, {'@': 79}), 40: (1, {'@': 79}), 41: (1, {'@': 79}), 58: (1, {'@': 79}), 42: (1, {'@': 79}), 3: (1, {'@': 79}), 59: (1, {'@': 79}), 43: (1, {'@': 79}), 8: (1, {'@': 79}), 10: (1, {'@': 79}), 13: (1, {'@': 79}), 14: (1, {'@': 79}), 17: (1, {'@': 79}), 23: (1, {'@': 79}), 24: (1, {'@': 79}), 15: (1, {'@': 79})}, 30: {1: (1, {'@': 80}), 2: (1, {'@': 80}), 3: (1, {'@': 80}), 4: (1, {'@': 80}), 5: (1, {'@': 80}), 6: (1, {'@': 80}), 7: (1, {'@': 80}), 8: (1, {'@': 80}), 9: (1, {'@': 80}), 10: (1, {'@': 80}), 11: (1, {'@': 80}), 12: (1, {'@': 80}), 13: (1, {'@': 80}), 14: (1, {'@': 80}), 15: (1, {'@': 80}), 16: (1, {'@': 80}), 17: (1, {'@': 80}), 18: (1, {'@': 80}), 19: (1, {'@': 80}), 20: (1, {'@': 80}), 21: (1, {'@': 80}), 22: (1, {'@': 80}), 23: (1, {'@': 80}), 24: (1, {'@': 80}), 25: (1, {'@': 80}), 26: (1, {'@': 80}), 27: (1, {'@': 80}), 48: (1, {'@': 80}), 49: (1, {'@': 80}), 50: (1, {'@': 80}), 29: (1, {'@': 80}), 51: (1, {'@': 80}), 47: (1, {'@': 80}), 30: (1, {'@': 80}), 32: (1, {'@': 80}), 52: (1, {'@': 80}), 34: (1, {'@': 80}), 33: (1, {'@': 80}), 35: (1, {'@': 80}), 53: (1, {'@': 80}), 36: (1, {'@': 80}), 54: (1, {'@': 80}), 37: (1, {'@': 80}), 55: (1, {'@': 80}), 38: (1, {'@': 80}), 56: (1, {'@': 80}), 39: (1, {'@': 80}), 57: (1, {'@': 80}), 40: (1, {'@': 80}), 28: (1, {'@': 80}), 41: (1, {'@': 80}), 58: (1, {'@': 80}), 42: (1, {'@': 80}), 59: (1, {'@': 80}), 46: (1, {'@': 80}), 43: (1, {'@': 80}), 31: (1, {'@': 80}), 60: (1, {'@': 80}), 44: (1, {'@': 80}), 61: (1, {'@': 80}), 45: (1, {'@': 80})}, 31: {2: (1, {'@': 81}), 4: (1, {'@': 81}), 86: (1, {'@': 81}), 8: (1, {'@': 81}), 10: (1, {'@': 81}), 11: (1, {'@': 81}), 12: (1, {'@': 81}), 14: (1, {'@': 81}), 17: (1, {'@': 81}), 18: (1, {'@': 81}), 19: (1, {'@': 81}), 20: (1, {'@': 81}), 21: (1, {'@': 81}), 24: (1, {'@': 81}), 23: (1, {'@': 81}), 1: (1, {'@': 81}), 25: (1, {'@': 81}), 15: (1, {'@': 81}), 40: (1, {'@': 81}), 41: (1, {'@': 81}), 42: (1, {'@': 81}), 3: (1, {'@': 81}), 43: (1, {'@': 81}), 33: (1, {'@': 81}), 9: (1, {'@': 81}), 13: (1, {'@': 81}), 37: (1, {'@': 81}), 87: (1, {'@': 81})}, 32: {29: (1, {'@': 82}), 50: (1, {'@': 82}), 51: (1, {'@': 82}), 47: (1, {'@': 82}), 34: (1, {'@': 82}), 35: (1, {'@': 82}), 9: (1, {'@': 82}), 36: (1, {'@': 82}), 54: (1, {'@': 82}), 18: (1, {'@': 82}), 19: (1, {'@': 82}), 20: (1, {'@': 82}), 55: (1, {'@': 82}), 38: (1, {'@': 82}), 26: (1, {'@': 82}), 39: (1, {'@': 82}), 57: (1, {'@': 82}), 28: (1, {'@': 82}), 59: (1, {'@': 82}), 5: (1, {'@': 82}), 6: (1, {'@': 82}), 8: (1, {'@': 82}), 10: (1, {'@': 82}), 24: (1, {'@': 82}), 2: (1, {'@': 82}), 48: (1, {'@': 82}), 4: (1, {'@': 82}), 49: (1, {'@': 82}), 30: (1, {'@': 82}), 32: (1, {'@': 82}), 52: (1, {'@': 82}), 33: (1, {'@': 82}), 61: (1, {'@': 82}), 53: (1, {'@': 82}), 11: (1, {'@': 82}), 12: (1, {'@': 82}), 37: (1, {'@': 82}), 21: (1, {'@': 82}), 1: (1, {'@': 82}), 25: (1, {'@': 82}), 56: (1, {'@': 82}), 40: (1, {'@': 82}), 41: (1, {'@': 82}), 58: (1, {'@': 82}), 42: (1, {'@': 82}), 3: (1, {'@': 82}), 46: (1, {'@': 82}), 43: (1, {'@': 82}), 31: (1, {'@': 82}), 60: (1, {'@': 82}), 13: (1, {'@': 82}), 14: (1, {'@': 82}), 17: (1, {'@': 82}), 44: (1, {'@': 82}), 22: (1, {'@': 82}), 23: (1, {'@': 82}), 45: (1, {'@': 82}), 15: (1, {'@': 82})}, 33: {44: (0, 9), 57: (0, 96)}, 34: {18: (0, 230), 22: (0, 90), 2: (1, {'@': 83}), 4: (1, {'@': 83}), 51: (1, {'@': 83}), 32: (1, {'@': 83}), 33: (1, {'@': 83}), 34: (1, {'@': 83}), 35: (1, {'@': 83}), 53: (1, {'@': 83}), 11: (1, {'@': 83}), 9: (1, {'@': 83}), 12: (1, {'@': 83}), 36: (1, {'@': 83}), 54: (1, {'@': 83}), 19: (1, {'@': 83}), 37: (1, {'@': 83}), 21: (1, {'@': 83}), 55: (1, {'@': 83}), 20: (1, {'@': 83}), 1: (1, {'@': 83}), 38: (1, {'@': 83}), 25: (1, {'@': 83}), 56: (1, {'@': 83}), 39: (1, {'@': 83}), 40: (1, {'@': 83}), 41: (1, {'@': 83}), 58: (1, {'@': 83}), 42: (1, {'@': 83}), 3: (1, {'@': 83}), 59: (1, {'@': 83}), 43: (1, {'@': 83}), 8: (1, {'@': 83}), 10: (1, {'@': 83}), 13: (1, {'@': 83}), 14: (1, {'@': 83}), 17: (1, {'@': 83}), 23: (1, {'@': 83}), 24: (1, {'@': 83}), 15: (1, {'@': 83})}, 35: {2: (1, {'@': 84}), 4: (1, {'@': 84}), 51: (1, {'@': 84}), 32: (1, {'@': 84}), 33: (1, {'@': 84}), 34: (1, {'@': 84}), 35: (1, {'@': 84}), 53: (1, {'@': 84}), 11: (1, {'@': 84}), 9: (1, {'@': 84}), 12: (1, {'@': 84}), 36: (1, {'@': 84}), 54: (1, {'@': 84}), 18: (1, {'@': 84}), 19: (1, {'@': 84}), 37: (1, {'@': 84}), 21: (1, {'@': 84}), 55: (1, {'@': 84}), 20: (1, {'@': 84}), 1: (1, {'@': 84}), 38: (1, {'@': 84}), 25: (1, {'@': 84}), 56: (1, {'@': 84}), 39: (1, {'@': 84}), 40: (1, {'@': 84}), 41: (1, {'@': 84}), 58: (1, {'@': 84}), 42: (1, {'@': 84}), 3: (1, {'@': 84}), 59: (1, {'@': 84}), 43: (1, {'@': 84}), 8: (1, {'@': 84}), 10: (1, {'@': 84}), 13: (1, {'@': 84}), 14: (1, {'@': 84}), 17: (1, {'@': 84}), 23: (1, {'@': 84}), 24: (1, {'@': 84}), 15: (1, {'@': 84})}, 36: {18: (1, {'@': 74}), 29: (1, {'@': 74}), 22: (1, {'@': 74}), 28: (1, {'@': 74}), 30: (1, {'@': 74}), 31: (1, {'@': 74}), 2: (1, {'@': 74}), 4: (1, {'@': 74}), 32: (1, {'@': 74}), 33: (1, {'@': 74}), 34: (1, {'@': 74}), 35: (1, {'@': 74}), 11: (1, {'@': 74}), 9: (1, {'@': 74}), 12: (1, {'@': 74}), 36: (1, {'@': 74}), 19: (1, {'@': 74}), 37: (1, {'@': 74}), 21: (1, {'@': 74}), 20: (1, {'@': 74}), 1: (1, {'@': 74}), 38: (1, {'@': 74}), 25: (1, {'@': 74}), 39: (1, {'@': 74}), 40: (1, {'@': 74}), 41: (1, {'@': 74}), 42: (1, {'@': 74}), 3: (1, {'@': 74}), 43: (1, {'@': 74}), 8: (1, {'@': 74}), 10: (1, {'@': 74}), 13: (1, {'@': 74}), 14: (1, {'@': 74}), 44: (1, {'@': 74}), 17: (1, {'@': 74}), 23: (1, {'@': 74}), 24: (1, {'@': 74}), 45: (1, {'@': 74}), 15: (1, {'@': 74}), 46: (1, {'@': 74}), 47: (1, {'@': 74}), 48: (1, {'@': 74}), 49: (1, {'@': 74}), 50: (1, {'@': 74}), 51: (1, {'@': 74}), 52: (1, {'@': 74}), 61: (1, {'@': 74}), 53: (1, {'@': 74}), 54: (1, {'@': 74}), 55: (1, {'@': 74}), 56: (1, {'@': 74}), 57: (1, {'@': 74}), 58: (1, {'@': 74}), 59: (1, {'@': 74}), 60: (1, {'@': 74})}, 37: {18: (0, 230), 22: (0, 90), 28: (1, {'@': 85}), 29: (1, {'@': 85}), 30: (1, {'@': 85}), 31: (1, {'@': 85}), 2: (1, {'@': 85}), 4: (1, {'@': 85}), 32: (1, {'@': 85}), 33: (1, {'@': 85}), 34: (1, {'@': 85}), 35: (1, {'@': 85}), 11: (1, {'@': 85}), 9: (1, {'@': 85}), 12: (1, {'@': 85}), 36: (1, {'@': 85}), 19: (1, {'@': 85}), 37: (1, {'@': 85}), 21: (1, {'@': 85}), 20: (1, {'@': 85}), 1: (1, {'@': 85}), 38: (1, {'@': 85}), 25: (1, {'@': 85}), 39: (1, {'@': 85}), 40: (1, {'@': 85}), 41: (1, {'@': 85}), 42: (1, {'@': 85}), 3: (1, {'@': 85}), 43: (1, {'@': 85}), 8: (1, {'@': 85}), 10: (1, {'@': 85}), 13: (1, {'@': 85}), 14: (1, {'@': 85}), 44: (1, {'@': 85}), 17: (1, {'@': 85}), 23: (1, {'@': 85}), 24: (1, {'@': 85}), 45: (1, {'@': 85}), 15: (1, {'@': 85}), 46: (1, {'@': 85}), 47: (1, {'@': 85}), 48: (1, {'@': 85}), 49: (1, {'@': 85}), 50: (1, {'@': 85}), 51: (1, {'@': 85}), 52: (1, {'@': 85}), 61: (1, {'@': 85}), 53: (1, {'@': 85}), 54: (1, {'@': 85}), 55: (1, {'@': 85}), 56: (1, {'@': 85}), 57: (1, {'@': 85}), 58: (1, {'@': 85}), 59: (1, {'@': 85}), 60: (1, {'@': 85})}, 38: {50: (1, {'@': 86}), 29: (1, {'@': 86}), 51: (1, {'@': 86}), 47: (1, {'@': 86}), 34: (1, {'@': 86}), 35: (1, {'@': 86}), 9: (1, {'@': 86}), 36: (1, {'@': 86}), 54: (1, {'@': 86}), 18: (1, {'@': 86}), 19: (1, {'@': 86}), 20: (1, {'@': 86}), 55: (1, {'@': 86}), 38: (1, {'@': 86}), 26: (1, {'@': 86}), 39: (1, {'@': 86}), 57: (1, {'@': 86}), 28: (1, {'@': 86}), 59: (1, {'@': 86}), 5: (1, {'@': 86}), 6: (1, {'@': 86}), 8: (1, {'@': 86}), 10: (1, {'@': 86}), 24: (1, {'@': 86}), 2: (1, {'@': 86}), 48: (1, {'@': 86}), 4: (1, {'@': 86}), 49: (1, {'@': 86}), 30: (1, {'@': 86}), 32: (1, {'@': 86}), 52: (1, {'@': 86}), 33: (1, {'@': 86}), 61: (1, {'@': 86}), 53: (1, {'@': 86}), 11: (1, {'@': 86}), 15: (1, {'@': 86}), 12: (1, {'@': 86}), 37: (1, {'@': 86}), 21: (1, {'@': 86}), 1: (1, {'@': 86}), 25: (1, {'@': 86}), 56: (1, {'@': 86}), 40: (1, {'@': 86}), 41: (1, {'@': 86}), 58: (1, {'@': 86}), 42: (1, {'@': 86}), 3: (1, {'@': 86}), 46: (1, {'@': 86}), 43: (1, {'@': 86}), 31: (1, {'@': 86}), 60: (1, {'@': 86}), 13: (1, {'@': 86}), 14: (1, {'@': 86}), 17: (1, {'@': 86}), 44: (1, {'@': 86}), 22: (1, {'@': 86}), 23: (1, {'@': 86}), 45: (1, {'@': 86}), 27: (1, {'@': 86})}, 39: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 84: (0, 79), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 45: (0, 214), 88: (0, 171), 39: (0, 236)}, 40: {12: (0, 139), 1: (1, {'@': 87}), 2: (1, {'@': 87}), 4: (1, {'@': 87}), 5: (1, {'@': 87}), 6: (1, {'@': 87}), 8: (1, {'@': 87}), 10: (1, {'@': 87}), 11: (1, {'@': 87}), 15: (1, {'@': 87}), 13: (1, {'@': 87}), 14: (1, {'@': 87}), 17: (1, {'@': 87}), 18: (1, {'@': 87}), 19: (1, {'@': 87}), 20: (1, {'@': 87}), 21: (1, {'@': 87}), 22: (1, {'@': 87}), 23: (1, {'@': 87}), 24: (1, {'@': 87}), 25: (1, {'@': 87}), 26: (1, {'@': 87}), 27: (1, {'@': 87}), 48: (1, {'@': 87}), 49: (1, {'@': 87}), 50: (1, {'@': 87}), 29: (1, {'@': 87}), 45: (1, {'@': 87}), 51: (1, {'@': 87}), 47: (1, {'@': 87}), 30: (1, {'@': 87}), 32: (1, {'@': 87}), 52: (1, {'@': 87}), 34: (1, {'@': 87}), 33: (1, {'@': 87}), 35: (1, {'@': 87}), 53: (1, {'@': 87}), 9: (1, {'@': 87}), 36: (1, {'@': 87}), 54: (1, {'@': 87}), 37: (1, {'@': 87}), 55: (1, {'@': 87}), 38: (1, {'@': 87}), 56: (1, {'@': 87}), 39: (1, {'@': 87}), 57: (1, {'@': 87}), 40: (1, {'@': 87}), 28: (1, {'@': 87}), 41: (1, {'@': 87}), 58: (1, {'@': 87}), 42: (1, {'@': 87}), 3: (1, {'@': 87}), 59: (1, {'@': 87}), 46: (1, {'@': 87}), 43: (1, {'@': 87}), 31: (1, {'@': 87}), 60: (1, {'@': 87}), 44: (1, {'@': 87}), 61: (1, {'@': 87})}, 41: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 84: (0, 116), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 42: {2: (1, {'@': 88}), 4: (1, {'@': 88}), 51: (1, {'@': 88}), 32: (1, {'@': 88}), 33: (1, {'@': 88}), 34: (1, {'@': 88}), 35: (1, {'@': 88}), 53: (1, {'@': 88}), 11: (1, {'@': 88}), 9: (1, {'@': 88}), 12: (1, {'@': 88}), 36: (1, {'@': 88}), 54: (1, {'@': 88}), 18: (1, {'@': 88}), 19: (1, {'@': 88}), 37: (1, {'@': 88}), 21: (1, {'@': 88}), 55: (1, {'@': 88}), 20: (1, {'@': 88}), 1: (1, {'@': 88}), 38: (1, {'@': 88}), 25: (1, {'@': 88}), 56: (1, {'@': 88}), 39: (1, {'@': 88}), 40: (1, {'@': 88}), 41: (1, {'@': 88}), 58: (1, {'@': 88}), 42: (1, {'@': 88}), 3: (1, {'@': 88}), 59: (1, {'@': 88}), 43: (1, {'@': 88}), 8: (1, {'@': 88}), 10: (1, {'@': 88}), 13: (1, {'@': 88}), 14: (1, {'@': 88}), 17: (1, {'@': 88}), 23: (1, {'@': 88}), 24: (1, {'@': 88}), 15: (1, {'@': 88})}, 43: {7: (0, 237), 1: (1, {'@': 89}), 2: (1, {'@': 89}), 4: (1, {'@': 89}), 5: (1, {'@': 89}), 6: (1, {'@': 89}), 8: (1, {'@': 89}), 10: (1, {'@': 89}), 11: (1, {'@': 89}), 15: (1, {'@': 89}), 12: (1, {'@': 89}), 13: (1, {'@': 89}), 14: (1, {'@': 89}), 16: (1, {'@': 89}), 17: (1, {'@': 89}), 18: (1, {'@': 89}), 19: (1, {'@': 89}), 20: (1, {'@': 89}), 21: (1, {'@': 89}), 22: (1, {'@': 89}), 23: (1, {'@': 89}), 24: (1, {'@': 89}), 25: (1, {'@': 89}), 26: (1, {'@': 89}), 27: (1, {'@': 89}), 48: (1, {'@': 89}), 49: (1, {'@': 89}), 50: (1, {'@': 89}), 29: (1, {'@': 89}), 51: (1, {'@': 89}), 47: (1, {'@': 89}), 30: (1, {'@': 89}), 32: (1, {'@': 89}), 52: (1, {'@': 89}), 34: (1, {'@': 89}), 33: (1, {'@': 89}), 61: (1, {'@': 89}), 35: (1, {'@': 89}), 53: (1, {'@': 89}), 9: (1, {'@': 89}), 36: (1, {'@': 89}), 54: (1, {'@': 89}), 37: (1, {'@': 89}), 55: (1, {'@': 89}), 38: (1, {'@': 89}), 56: (1, {'@': 89}), 39: (1, {'@': 89}), 57: (1, {'@': 89}), 40: (1, {'@': 89}), 28: (1, {'@': 89}), 41: (1, {'@': 89}), 58: (1, {'@': 89}), 42: (1, {'@': 89}), 3: (1, {'@': 89}), 59: (1, {'@': 89}), 46: (1, {'@': 89}), 43: (1, {'@': 89}), 31: (1, {'@': 89}), 60: (1, {'@': 89}), 44: (1, {'@': 89}), 45: (1, {'@': 89})}, 44: {18: (0, 230), 30: (0, 74), 22: (0, 90)}, 45: {18: (0, 230), 22: (0, 90), 57: (1, {'@': 90}), 44: (1, {'@': 90})}, 46: {13: (0, 163), 2: (1, {'@': 91}), 4: (1, {'@': 91}), 5: (1, {'@': 91}), 8: (1, {'@': 91}), 10: (1, {'@': 91}), 11: (1, {'@': 91}), 12: (1, {'@': 91}), 14: (1, {'@': 91}), 17: (1, {'@': 91}), 18: (1, {'@': 91}), 19: (1, {'@': 91}), 20: (1, {'@': 91}), 21: (1, {'@': 91}), 22: (1, {'@': 91}), 24: (1, {'@': 91}), 23: (1, {'@': 91}), 1: (1, {'@': 91}), 25: (1, {'@': 91}), 26: (1, {'@': 91}), 15: (1, {'@': 91}), 28: (1, {'@': 91}), 29: (1, {'@': 91}), 30: (1, {'@': 91}), 31: (1, {'@': 91}), 32: (1, {'@': 91}), 33: (1, {'@': 91}), 34: (1, {'@': 91}), 35: (1, {'@': 91}), 9: (1, {'@': 91}), 36: (1, {'@': 91}), 37: (1, {'@': 91}), 38: (1, {'@': 91}), 39: (1, {'@': 91}), 40: (1, {'@': 91}), 41: (1, {'@': 91}), 42: (1, {'@': 91}), 3: (1, {'@': 91}), 43: (1, {'@': 91}), 44: (1, {'@': 91}), 45: (1, {'@': 91}), 48: (1, {'@': 91}), 49: (1, {'@': 91}), 50: (1, {'@': 91}), 51: (1, {'@': 91}), 47: (1, {'@': 91}), 52: (1, {'@': 91}), 53: (1, {'@': 91}), 54: (1, {'@': 91}), 55: (1, {'@': 91}), 56: (1, {'@': 91}), 57: (1, {'@': 91}), 58: (1, {'@': 91}), 59: (1, {'@': 91}), 46: (1, {'@': 91}), 60: (1, {'@': 91}), 61: (1, {'@': 91})}, 47: {28: (0, 62), 2: (1, {'@': 92}), 4: (1, {'@': 92}), 32: (1, {'@': 92}), 33: (1, {'@': 92}), 34: (1, {'@': 92}), 35: (1, {'@': 92}), 11: (1, {'@': 92}), 9: (1, {'@': 92}), 12: (1, {'@': 92}), 36: (1, {'@': 92}), 18: (1, {'@': 92}), 19: (1, {'@': 92}), 37: (1, {'@': 92}), 21: (1, {'@': 92}), 20: (1, {'@': 92}), 1: (1, {'@': 92}), 38: (1, {'@': 92}), 25: (1, {'@': 92}), 39: (1, {'@': 92}), 40: (1, {'@': 92}), 41: (1, {'@': 92}), 42: (1, {'@': 92}), 3: (1, {'@': 92}), 43: (1, {'@': 92}), 8: (1, {'@': 92}), 10: (1, {'@': 92}), 13: (1, {'@': 92}), 14: (1, {'@': 92}), 17: (1, {'@': 92}), 44: (1, {'@': 92}), 23: (1, {'@': 92}), 24: (1, {'@': 92}), 45: (1, {'@': 92}), 15: (1, {'@': 92})}, 48: {18: (0, 230), 22: (0, 90), 2: (1, {'@': 93}), 4: (1, {'@': 93}), 51: (1, {'@': 93}), 32: (1, {'@': 93}), 33: (1, {'@': 93}), 34: (1, {'@': 93}), 35: (1, {'@': 93}), 53: (1, {'@': 93}), 11: (1, {'@': 93}), 9: (1, {'@': 93}), 12: (1, {'@': 93}), 36: (1, {'@': 93}), 54: (1, {'@': 93}), 19: (1, {'@': 93}), 37: (1, {'@': 93}), 21: (1, {'@': 93}), 55: (1, {'@': 93}), 20: (1, {'@': 93}), 1: (1, {'@': 93}), 38: (1, {'@': 93}), 25: (1, {'@': 93}), 56: (1, {'@': 93}), 39: (1, {'@': 93}), 40: (1, {'@': 93}), 41: (1, {'@': 93}), 58: (1, {'@': 93}), 42: (1, {'@': 93}), 3: (1, {'@': 93}), 59: (1, {'@': 93}), 43: (1, {'@': 93}), 8: (1, {'@': 93}), 10: (1, {'@': 93}), 13: (1, {'@': 93}), 14: (1, {'@': 93}), 17: (1, {'@': 93}), 23: (1, {'@': 93}), 24: (1, {'@': 93}), 15: (1, {'@': 93})}, 49: {2: (1, {'@': 94}), 4: (1, {'@': 94}), 86: (1, {'@': 94}), 8: (1, {'@': 94}), 10: (1, {'@': 94}), 11: (1, {'@': 94}), 12: (1, {'@': 94}), 14: (1, {'@': 94}), 17: (1, {'@': 94}), 18: (1, {'@': 94}), 19: (1, {'@': 94}), 20: (1, {'@': 94}), 21: (1, {'@': 94}), 24: (1, {'@': 94}), 23: (1, {'@': 94}), 1: (1, {'@': 94}), 25: (1, {'@': 94}), 15: (1, {'@': 94}), 40: (1, {'@': 94}), 41: (1, {'@': 94}), 42: (1, {'@': 94}), 3: (1, {'@': 94}), 43: (1, {'@': 94}), 33: (1, {'@': 94}), 9: (1, {'@': 94}), 13: (1, {'@': 94}), 37: (1, {'@': 94}), 87: (1, {'@': 94})}, 50: {22: (0, 90), 18: (0, 230), 28: (1, {'@': 95}), 29: (1, {'@': 95}), 30: (1, {'@': 95}), 31: (1, {'@': 95}), 2: (1, {'@': 95}), 4: (1, {'@': 95}), 32: (1, {'@': 95}), 33: (1, {'@': 95}), 34: (1, {'@': 95}), 35: (1, {'@': 95}), 11: (1, {'@': 95}), 9: (1, {'@': 95}), 12: (1, {'@': 95}), 36: (1, {'@': 95}), 19: (1, {'@': 95}), 37: (1, {'@': 95}), 21: (1, {'@': 95}), 20: (1, {'@': 95}), 1: (1, {'@': 95}), 38: (1, {'@': 95}), 25: (1, {'@': 95}), 39: (1, {'@': 95}), 40: (1, {'@': 95}), 41: (1, {'@': 95}), 42: (1, {'@': 95}), 3: (1, {'@': 95}), 43: (1, {'@': 95}), 8: (1, {'@': 95}), 10: (1, {'@': 95}), 13: (1, {'@': 95}), 14: (1, {'@': 95}), 44: (1, {'@': 95}), 17: (1, {'@': 95}), 23: (1, {'@': 95}), 24: (1, {'@': 95}), 45: (1, {'@': 95}), 15: (1, {'@': 95}), 46: (1, {'@': 95}), 47: (1, {'@': 95}), 48: (1, {'@': 95}), 49: (1, {'@': 95}), 50: (1, {'@': 95}), 51: (1, {'@': 95}), 52: (1, {'@': 95}), 61: (1, {'@': 95}), 53: (1, {'@': 95}), 54: (1, {'@': 95}), 55: (1, {'@': 95}), 56: (1, {'@': 95}), 57: (1, {'@': 95}), 58: (1, {'@': 95}), 59: (1, {'@': 95}), 60: (1, {'@': 95})}, 51: {55: (0, 226)}, 52: {19: (0, 141), 23: (0, 177), 12: (0, 200), 24: (0, 120), 21: (0, 93), 15: (0, 106), 2: (0, 105), 90: (0, 167), 4: (0, 7), 1: (0, 60), 10: (0, 83), 82: (0, 49), 68: (0, 219), 91: (0, 178), 71: (0, 31), 5: (0, 170), 26: (0, 245), 8: (0, 86), 17: (0, 110), 20: (0, 75), 25: (0, 205), 76: (0, 189), 14: (0, 229), 78: (0, 247), 75: (0, 12), 11: (0, 137), 18: (1, {'@': 96}), 22: (1, {'@': 96}), 29: (1, {'@': 96}), 28: (1, {'@': 96}), 30: (1, {'@': 96}), 31: (1, {'@': 96}), 32: (1, {'@': 96}), 33: (1, {'@': 96}), 34: (1, {'@': 96}), 35: (1, {'@': 96}), 9: (1, {'@': 96}), 36: (1, {'@': 96}), 37: (1, {'@': 96}), 38: (1, {'@': 96}), 39: (1, {'@': 96}), 40: (1, {'@': 96}), 41: (1, {'@': 96}), 42: (1, {'@': 96}), 3: (1, {'@': 96}), 43: (1, {'@': 96}), 13: (1, {'@': 96}), 44: (1, {'@': 96}), 45: (1, {'@': 96}), 46: (1, {'@': 96}), 47: (1, {'@': 96}), 48: (1, {'@': 96}), 49: (1, {'@': 96}), 50: (1, {'@': 96}), 51: (1, {'@': 96}), 52: (1, {'@': 96}), 61: (1, {'@': 96}), 53: (1, {'@': 96}), 54: (1, {'@': 96}), 55: (1, {'@': 96}), 56: (1, {'@': 96}), 57: (1, {'@': 96}), 58: (1, {'@': 96}), 59: (1, {'@': 96}), 60: (1, {'@': 96})}, 53: {40: (0, 68), 62: (0, 66)}, 54: {2: (1, {'@': 97}), 4: (1, {'@': 97}), 51: (1, {'@': 97}), 32: (1, {'@': 97}), 33: (1, {'@': 97}), 34: (1, {'@': 97}), 35: (1, {'@': 97}), 53: (1, {'@': 97}), 11: (1, {'@': 97}), 9: (1, {'@': 97}), 12: (1, {'@': 97}), 36: (1, {'@': 97}), 54: (1, {'@': 97}), 18: (1, {'@': 97}), 19: (1, {'@': 97}), 37: (1, {'@': 97}), 21: (1, {'@': 97}), 55: (1, {'@': 97}), 20: (1, {'@': 97}), 1: (1, {'@': 97}), 38: (1, {'@': 97}), 25: (1, {'@': 97}), 56: (1, {'@': 97}), 39: (1, {'@': 97}), 40: (1, {'@': 97}), 41: (1, {'@': 97}), 58: (1, {'@': 97}), 42: (1, {'@': 97}), 3: (1, {'@': 97}), 59: (1, {'@': 97}), 43: (1, {'@': 97}), 8: (1, {'@': 97}), 10: (1, {'@': 97}), 13: (1, {'@': 97}), 14: (1, {'@': 97}), 17: (1, {'@': 97}), 23: (1, {'@': 97}), 24: (1, {'@': 97}), 15: (1, {'@': 97})}, 55: {2: (1, {'@': 98}), 4: (1, {'@': 98}), 32: (1, {'@': 98}), 33: (1, {'@': 98}), 34: (1, {'@': 98}), 35: (1, {'@': 98}), 11: (1, {'@': 98}), 9: (1, {'@': 98}), 12: (1, {'@': 98}), 36: (1, {'@': 98}), 18: (1, {'@': 98}), 19: (1, {'@': 98}), 37: (1, {'@': 98}), 21: (1, {'@': 98}), 20: (1, {'@': 98}), 1: (1, {'@': 98}), 38: (1, {'@': 98}), 25: (1, {'@': 98}), 39: (1, {'@': 98}), 40: (1, {'@': 98}), 41: (1, {'@': 98}), 42: (1, {'@': 98}), 3: (1, {'@': 98}), 43: (1, {'@': 98}), 8: (1, {'@': 98}), 10: (1, {'@': 98}), 13: (1, {'@': 98}), 14: (1, {'@': 98}), 17: (1, {'@': 98}), 44: (1, {'@': 98}), 23: (1, {'@': 98}), 24: (1, {'@': 98}), 45: (1, {'@': 98}), 15: (1, {'@': 98})}, 56: {92: (0, 46), 13: (0, 4), 2: (1, {'@': 99}), 4: (1, {'@': 99}), 5: (1, {'@': 99}), 8: (1, {'@': 99}), 10: (1, {'@': 99}), 11: (1, {'@': 99}), 12: (1, {'@': 99}), 14: (1, {'@': 99}), 17: (1, {'@': 99}), 18: (1, {'@': 99}), 19: (1, {'@': 99}), 20: (1, {'@': 99}), 21: (1, {'@': 99}), 22: (1, {'@': 99}), 24: (1, {'@': 99}), 23: (1, {'@': 99}), 1: (1, {'@': 99}), 25: (1, {'@': 99}), 26: (1, {'@': 99}), 15: (1, {'@': 99}), 28: (1, {'@': 99}), 29: (1, {'@': 99}), 30: (1, {'@': 99}), 31: (1, {'@': 99}), 32: (1, {'@': 99}), 33: (1, {'@': 99}), 34: (1, {'@': 99}), 35: (1, {'@': 99}), 9: (1, {'@': 99}), 36: (1, {'@': 99}), 37: (1, {'@': 99}), 38: (1, {'@': 99}), 39: (1, {'@': 99}), 40: (1, {'@': 99}), 41: (1, {'@': 99}), 42: (1, {'@': 99}), 3: (1, {'@': 99}), 43: (1, {'@': 99}), 44: (1, {'@': 99}), 45: (1, {'@': 99}), 48: (1, {'@': 99}), 49: (1, {'@': 99}), 50: (1, {'@': 99}), 51: (1, {'@': 99}), 47: (1, {'@': 99}), 52: (1, {'@': 99}), 53: (1, {'@': 99}), 54: (1, {'@': 99}), 55: (1, {'@': 99}), 56: (1, {'@': 99}), 57: (1, {'@': 99}), 58: (1, {'@': 99}), 59: (1, {'@': 99}), 46: (1, {'@': 99}), 60: (1, {'@': 99}), 61: (1, {'@': 99})}, 57: {2: (1, {'@': 100}), 4: (1, {'@': 100}), 32: (1, {'@': 100}), 33: (1, {'@': 100}), 34: (1, {'@': 100}), 35: (1, {'@': 100}), 11: (1, {'@': 100}), 9: (1, {'@': 100}), 12: (1, {'@': 100}), 36: (1, {'@': 100}), 18: (1, {'@': 100}), 19: (1, {'@': 100}), 37: (1, {'@': 100}), 21: (1, {'@': 100}), 20: (1, {'@': 100}), 1: (1, {'@': 100}), 38: (1, {'@': 100}), 25: (1, {'@': 100}), 39: (1, {'@': 100}), 40: (1, {'@': 100}), 41: (1, {'@': 100}), 42: (1, {'@': 100}), 3: (1, {'@': 100}), 43: (1, {'@': 100}), 8: (1, {'@': 100}), 10: (1, {'@': 100}), 13: (1, {'@': 100}), 14: (1, {'@': 100}), 17: (1, {'@': 100}), 23: (1, {'@': 100}), 24: (1, {'@': 100}), 15: (1, {'@': 100})}, 58: {1: (1, {'@': 101}), 2: (1, {'@': 101}), 3: (1, {'@': 101}), 4: (1, {'@': 101}), 5: (1, {'@': 101}), 6: (1, {'@': 101}), 7: (1, {'@': 101}), 8: (1, {'@': 101}), 9: (1, {'@': 101}), 10: (1, {'@': 101}), 11: (1, {'@': 101}), 12: (1, {'@': 101}), 13: (1, {'@': 101}), 14: (1, {'@': 101}), 15: (1, {'@': 101}), 16: (1, {'@': 101}), 17: (1, {'@': 101}), 18: (1, {'@': 101}), 19: (1, {'@': 101}), 20: (1, {'@': 101}), 21: (1, {'@': 101}), 22: (1, {'@': 101}), 23: (1, {'@': 101}), 24: (1, {'@': 101}), 25: (1, {'@': 101}), 26: (1, {'@': 101}), 27: (1, {'@': 101}), 48: (1, {'@': 101}), 49: (1, {'@': 101}), 50: (1, {'@': 101}), 29: (1, {'@': 101}), 51: (1, {'@': 101}), 47: (1, {'@': 101}), 30: (1, {'@': 101}), 32: (1, {'@': 101}), 52: (1, {'@': 101}), 34: (1, {'@': 101}), 33: (1, {'@': 101}), 35: (1, {'@': 101}), 53: (1, {'@': 101}), 36: (1, {'@': 101}), 54: (1, {'@': 101}), 37: (1, {'@': 101}), 55: (1, {'@': 101}), 38: (1, {'@': 101}), 56: (1, {'@': 101}), 39: (1, {'@': 101}), 57: (1, {'@': 101}), 40: (1, {'@': 101}), 28: (1, {'@': 101}), 41: (1, {'@': 101}), 58: (1, {'@': 101}), 42: (1, {'@': 101}), 59: (1, {'@': 101}), 46: (1, {'@': 101}), 43: (1, {'@': 101}), 31: (1, {'@': 101}), 60: (1, {'@': 101}), 44: (1, {'@': 101}), 61: (1, {'@': 101}), 45: (1, {'@': 101})}, 59: {2: (1, {'@': 102}), 4: (1, {'@': 102}), 5: (1, {'@': 102}), 6: (1, {'@': 102}), 7: (1, {'@': 102}), 8: (1, {'@': 102}), 10: (1, {'@': 102}), 11: (1, {'@': 102}), 12: (1, {'@': 102}), 13: (1, {'@': 102}), 14: (1, {'@': 102}), 16: (1, {'@': 102}), 17: (1, {'@': 102}), 18: (1, {'@': 102}), 19: (1, {'@': 102}), 20: (1, {'@': 102}), 21: (1, {'@': 102}), 22: (1, {'@': 102}), 24: (1, {'@': 102}), 27: (1, {'@': 102}), 23: (1, {'@': 102}), 1: (1, {'@': 102}), 25: (1, {'@': 102}), 26: (1, {'@': 102}), 15: (1, {'@': 102}), 48: (1, {'@': 102}), 49: (1, {'@': 102}), 50: (1, {'@': 102}), 29: (1, {'@': 102}), 45: (1, {'@': 102}), 51: (1, {'@': 102}), 47: (1, {'@': 102}), 30: (1, {'@': 102}), 32: (1, {'@': 102}), 52: (1, {'@': 102}), 34: (1, {'@': 102}), 33: (1, {'@': 102}), 35: (1, {'@': 102}), 53: (1, {'@': 102}), 9: (1, {'@': 102}), 36: (1, {'@': 102}), 54: (1, {'@': 102}), 37: (1, {'@': 102}), 55: (1, {'@': 102}), 38: (1, {'@': 102}), 56: (1, {'@': 102}), 39: (1, {'@': 102}), 57: (1, {'@': 102}), 40: (1, {'@': 102}), 28: (1, {'@': 102}), 41: (1, {'@': 102}), 58: (1, {'@': 102}), 42: (1, {'@': 102}), 3: (1, {'@': 102}), 59: (1, {'@': 102}), 46: (1, {'@': 102}), 43: (1, {'@': 102}), 31: (1, {'@': 102}), 60: (1, {'@': 102}), 44: (1, {'@': 102}), 61: (1, {'@': 102})}, 60: {2: (1, {'@': 103}), 4: (1, {'@': 103}), 86: (1, {'@': 103}), 8: (1, {'@': 103}), 10: (1, {'@': 103}), 11: (1, {'@': 103}), 12: (1, {'@': 103}), 14: (1, {'@': 103}), 17: (1, {'@': 103}), 18: (1, {'@': 103}), 19: (1, {'@': 103}), 20: (1, {'@': 103}), 21: (1, {'@': 103}), 24: (1, {'@': 103}), 23: (1, {'@': 103}), 1: (1, {'@': 103}), 25: (1, {'@': 103}), 15: (1, {'@': 103}), 40: (1, {'@': 103}), 41: (1, {'@': 103}), 42: (1, {'@': 103}), 3: (1, {'@': 103}), 43: (1, {'@': 103}), 33: (1, {'@': 103}), 9: (1, {'@': 103}), 13: (1, {'@': 103}), 37: (1, {'@': 103}), 87: (1, {'@': 103})}, 61: {0: (0, 221)}, 62: {2: (1, {'@': 104}), 4: (1, {'@': 104}), 32: (1, {'@': 104}), 33: (1, {'@': 104}), 34: (1, {'@': 104}), 35: (1, {'@': 104}), 11: (1, {'@': 104}), 9: (1, {'@': 104}), 12: (1, {'@': 104}), 36: (1, {'@': 104}), 18: (1, {'@': 104}), 19: (1, {'@': 104}), 37: (1, {'@': 104}), 21: (1, {'@': 104}), 20: (1, {'@': 104}), 1: (1, {'@': 104}), 38: (1, {'@': 104}), 25: (1, {'@': 104}), 39: (1, {'@': 104}), 40: (1, {'@': 104}), 41: (1, {'@': 104}), 42: (1, {'@': 104}), 3: (1, {'@': 104}), 43: (1, {'@': 104}), 8: (1, {'@': 104}), 10: (1, {'@': 104}), 13: (1, {'@': 104}), 14: (1, {'@': 104}), 17: (1, {'@': 104}), 44: (1, {'@': 104}), 23: (1, {'@': 104}), 24: (1, {'@': 104}), 45: (1, {'@': 104}), 15: (1, {'@': 104})}, 63: {28: (0, 55), 2: (1, {'@': 105}), 4: (1, {'@': 105}), 32: (1, {'@': 105}), 33: (1, {'@': 105}), 34: (1, {'@': 105}), 35: (1, {'@': 105}), 11: (1, {'@': 105}), 9: (1, {'@': 105}), 12: (1, {'@': 105}), 36: (1, {'@': 105}), 18: (1, {'@': 105}), 19: (1, {'@': 105}), 37: (1, {'@': 105}), 21: (1, {'@': 105}), 20: (1, {'@': 105}), 1: (1, {'@': 105}), 38: (1, {'@': 105}), 25: (1, {'@': 105}), 39: (1, {'@': 105}), 40: (1, {'@': 105}), 41: (1, {'@': 105}), 42: (1, {'@': 105}), 3: (1, {'@': 105}), 43: (1, {'@': 105}), 8: (1, {'@': 105}), 10: (1, {'@': 105}), 13: (1, {'@': 105}), 14: (1, {'@': 105}), 17: (1, {'@': 105}), 44: (1, {'@': 105}), 23: (1, {'@': 105}), 24: (1, {'@': 105}), 45: (1, {'@': 105}), 15: (1, {'@': 105})}, 64: {1: (1, {'@': 106}), 2: (1, {'@': 106}), 3: (1, {'@': 106}), 4: (1, {'@': 106}), 5: (1, {'@': 106}), 6: (1, {'@': 106}), 7: (1, {'@': 106}), 8: (1, {'@': 106}), 9: (1, {'@': 106}), 10: (1, {'@': 106}), 11: (1, {'@': 106}), 12: (1, {'@': 106}), 13: (1, {'@': 106}), 14: (1, {'@': 106}), 15: (1, {'@': 106}), 16: (1, {'@': 106}), 17: (1, {'@': 106}), 18: (1, {'@': 106}), 19: (1, {'@': 106}), 20: (1, {'@': 106}), 21: (1, {'@': 106}), 22: (1, {'@': 106}), 23: (1, {'@': 106}), 24: (1, {'@': 106}), 25: (1, {'@': 106}), 26: (1, {'@': 106}), 27: (1, {'@': 106}), 48: (1, {'@': 106}), 49: (1, {'@': 106}), 50: (1, {'@': 106}), 29: (1, {'@': 106}), 51: (1, {'@': 106}), 47: (1, {'@': 106}), 30: (1, {'@': 106}), 32: (1, {'@': 106}), 52: (1, {'@': 106}), 34: (1, {'@': 106}), 33: (1, {'@': 106}), 35: (1, {'@': 106}), 53: (1, {'@': 106}), 36: (1, {'@': 106}), 54: (1, {'@': 106}), 37: (1, {'@': 106}), 55: (1, {'@': 106}), 38: (1, {'@': 106}), 56: (1, {'@': 106}), 39: (1, {'@': 106}), 57: (1, {'@': 106}), 40: (1, {'@': 106}), 28: (1, {'@': 106}), 41: (1, {'@': 106}), 58: (1, {'@': 106}), 42: (1, {'@': 106}), 59: (1, {'@': 106}), 46: (1, {'@': 106}), 43: (1, {'@': 106}), 31: (1, {'@': 106}), 60: (1, {'@': 106}), 44: (1, {'@': 106}), 61: (1, {'@': 106}), 45: (1, {'@': 106})}, 65: {23: (0, 177), 19: (0, 195), 88: (0, 47), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 89: (0, 28), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 84: (0, 79), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 45: (0, 214), 39: (0, 236)}, 66: {50: (1, {'@': 107}), 28: (1, {'@': 107})}, 67: {30: (0, 82), 18: (0, 230), 22: (0, 90)}, 68: {2: (1, {'@': 108}), 3: (1, {'@': 108}), 4: (1, {'@': 108}), 5: (1, {'@': 108}), 6: (1, {'@': 108}), 7: (1, {'@': 108}), 8: (1, {'@': 108}), 9: (1, {'@': 108}), 10: (1, {'@': 108}), 11: (1, {'@': 108}), 12: (1, {'@': 108}), 13: (1, {'@': 108}), 14: (1, {'@': 108}), 16: (1, {'@': 108}), 17: (1, {'@': 108}), 18: (1, {'@': 108}), 19: (1, {'@': 108}), 20: (1, {'@': 108}), 21: (1, {'@': 108}), 22: (1, {'@': 108}), 24: (1, {'@': 108}), 0: (1, {'@': 108}), 27: (1, {'@': 108}), 23: (1, {'@': 108}), 1: (1, {'@': 108}), 25: (1, {'@': 108}), 26: (1, {'@': 108}), 15: (1, {'@': 108}), 48: (1, {'@': 108}), 49: (1, {'@': 108}), 50: (1, {'@': 108}), 29: (1, {'@': 108}), 51: (1, {'@': 108}), 47: (1, {'@': 108}), 30: (1, {'@': 108}), 32: (1, {'@': 108}), 52: (1, {'@': 108}), 34: (1, {'@': 108}), 33: (1, {'@': 108}), 35: (1, {'@': 108}), 53: (1, {'@': 108}), 36: (1, {'@': 108}), 54: (1, {'@': 108}), 37: (1, {'@': 108}), 55: (1, {'@': 108}), 38: (1, {'@': 108}), 56: (1, {'@': 108}), 39: (1, {'@': 108}), 57: (1, {'@': 108}), 40: (1, {'@': 108}), 28: (1, {'@': 108}), 41: (1, {'@': 108}), 58: (1, {'@': 108}), 42: (1, {'@': 108}), 59: (1, {'@': 108}), 46: (1, {'@': 108}), 43: (1, {'@': 108}), 31: (1, {'@': 108}), 60: (1, {'@': 108}), 44: (1, {'@': 108}), 61: (1, {'@': 108}), 45: (1, {'@': 108})}, 69: {16: (0, 143), 2: (1, {'@': 109}), 4: (1, {'@': 109}), 5: (1, {'@': 109}), 6: (1, {'@': 109}), 8: (1, {'@': 109}), 10: (1, {'@': 109}), 11: (1, {'@': 109}), 12: (1, {'@': 109}), 13: (1, {'@': 109}), 14: (1, {'@': 109}), 17: (1, {'@': 109}), 18: (1, {'@': 109}), 19: (1, {'@': 109}), 20: (1, {'@': 109}), 21: (1, {'@': 109}), 22: (1, {'@': 109}), 24: (1, {'@': 109}), 27: (1, {'@': 109}), 23: (1, {'@': 109}), 1: (1, {'@': 109}), 25: (1, {'@': 109}), 26: (1, {'@': 109}), 15: (1, {'@': 109}), 48: (1, {'@': 109}), 49: (1, {'@': 109}), 50: (1, {'@': 109}), 29: (1, {'@': 109}), 51: (1, {'@': 109}), 47: (1, {'@': 109}), 30: (1, {'@': 109}), 32: (1, {'@': 109}), 52: (1, {'@': 109}), 34: (1, {'@': 109}), 33: (1, {'@': 109}), 35: (1, {'@': 109}), 53: (1, {'@': 109}), 9: (1, {'@': 109}), 36: (1, {'@': 109}), 54: (1, {'@': 109}), 37: (1, {'@': 109}), 55: (1, {'@': 109}), 38: (1, {'@': 109}), 56: (1, {'@': 109}), 39: (1, {'@': 109}), 57: (1, {'@': 109}), 40: (1, {'@': 109}), 28: (1, {'@': 109}), 41: (1, {'@': 109}), 58: (1, {'@': 109}), 42: (1, {'@': 109}), 3: (1, {'@': 109}), 59: (1, {'@': 109}), 46: (1, {'@': 109}), 43: (1, {'@': 109}), 31: (1, {'@': 109}), 60: (1, {'@': 109}), 44: (1, {'@': 109}), 61: (1, {'@': 109}), 45: (1, {'@': 109})}, 70: {28: (0, 77), 30: (0, 76)}, 71: {50: (1, {'@': 110}), 29: (1, {'@': 110}), 51: (1, {'@': 110}), 47: (1, {'@': 110}), 34: (1, {'@': 110}), 35: (1, {'@': 110}), 9: (1, {'@': 110}), 36: (1, {'@': 110}), 54: (1, {'@': 110}), 18: (1, {'@': 110}), 19: (1, {'@': 110}), 20: (1, {'@': 110}), 55: (1, {'@': 110}), 38: (1, {'@': 110}), 26: (1, {'@': 110}), 39: (1, {'@': 110}), 57: (1, {'@': 110}), 28: (1, {'@': 110}), 59: (1, {'@': 110}), 5: (1, {'@': 110}), 6: (1, {'@': 110}), 8: (1, {'@': 110}), 10: (1, {'@': 110}), 24: (1, {'@': 110}), 2: (1, {'@': 110}), 48: (1, {'@': 110}), 4: (1, {'@': 110}), 49: (1, {'@': 110}), 30: (1, {'@': 110}), 32: (1, {'@': 110}), 52: (1, {'@': 110}), 33: (1, {'@': 110}), 61: (1, {'@': 110}), 53: (1, {'@': 110}), 11: (1, {'@': 110}), 15: (1, {'@': 110}), 12: (1, {'@': 110}), 37: (1, {'@': 110}), 21: (1, {'@': 110}), 1: (1, {'@': 110}), 25: (1, {'@': 110}), 56: (1, {'@': 110}), 40: (1, {'@': 110}), 41: (1, {'@': 110}), 58: (1, {'@': 110}), 42: (1, {'@': 110}), 3: (1, {'@': 110}), 46: (1, {'@': 110}), 43: (1, {'@': 110}), 31: (1, {'@': 110}), 60: (1, {'@': 110}), 13: (1, {'@': 110}), 14: (1, {'@': 110}), 17: (1, {'@': 110}), 44: (1, {'@': 110}), 22: (1, {'@': 110}), 23: (1, {'@': 110}), 45: (1, {'@': 110}), 27: (1, {'@': 110})}, 72: {2: (1, {'@': 111}), 4: (1, {'@': 111}), 51: (1, {'@': 111}), 32: (1, {'@': 111}), 33: (1, {'@': 111}), 34: (1, {'@': 111}), 35: (1, {'@': 111}), 53: (1, {'@': 111}), 11: (1, {'@': 111}), 9: (1, {'@': 111}), 12: (1, {'@': 111}), 36: (1, {'@': 111}), 54: (1, {'@': 111}), 18: (1, {'@': 111}), 19: (1, {'@': 111}), 37: (1, {'@': 111}), 21: (1, {'@': 111}), 55: (1, {'@': 111}), 20: (1, {'@': 111}), 1: (1, {'@': 111}), 38: (1, {'@': 111}), 25: (1, {'@': 111}), 56: (1, {'@': 111}), 39: (1, {'@': 111}), 40: (1, {'@': 111}), 41: (1, {'@': 111}), 58: (1, {'@': 111}), 42: (1, {'@': 111}), 3: (1, {'@': 111}), 59: (1, {'@': 111}), 43: (1, {'@': 111}), 8: (1, {'@': 111}), 10: (1, {'@': 111}), 13: (1, {'@': 111}), 14: (1, {'@': 111}), 17: (1, {'@': 111}), 23: (1, {'@': 111}), 24: (1, {'@': 111}), 15: (1, {'@': 111})}, 73: {29: (1, {'@': 112}), 50: (1, {'@': 112}), 51: (1, {'@': 112}), 47: (1, {'@': 112}), 34: (1, {'@': 112}), 35: (1, {'@': 112}), 9: (1, {'@': 112}), 36: (1, {'@': 112}), 54: (1, {'@': 112}), 18: (1, {'@': 112}), 19: (1, {'@': 112}), 20: (1, {'@': 112}), 55: (1, {'@': 112}), 38: (1, {'@': 112}), 26: (1, {'@': 112}), 39: (1, {'@': 112}), 57: (1, {'@': 112}), 28: (1, {'@': 112}), 59: (1, {'@': 112}), 5: (1, {'@': 112}), 6: (1, {'@': 112}), 8: (1, {'@': 112}), 10: (1, {'@': 112}), 24: (1, {'@': 112}), 2: (1, {'@': 112}), 48: (1, {'@': 112}), 4: (1, {'@': 112}), 49: (1, {'@': 112}), 30: (1, {'@': 112}), 32: (1, {'@': 112}), 52: (1, {'@': 112}), 33: (1, {'@': 112}), 61: (1, {'@': 112}), 53: (1, {'@': 112}), 11: (1, {'@': 112}), 12: (1, {'@': 112}), 37: (1, {'@': 112}), 21: (1, {'@': 112}), 1: (1, {'@': 112}), 25: (1, {'@': 112}), 56: (1, {'@': 112}), 40: (1, {'@': 112}), 41: (1, {'@': 112}), 58: (1, {'@': 112}), 42: (1, {'@': 112}), 3: (1, {'@': 112}), 46: (1, {'@': 112}), 43: (1, {'@': 112}), 31: (1, {'@': 112}), 60: (1, {'@': 112}), 13: (1, {'@': 112}), 14: (1, {'@': 112}), 17: (1, {'@': 112}), 44: (1, {'@': 112}), 22: (1, {'@': 112}), 23: (1, {'@': 112}), 45: (1, {'@': 112}), 15: (1, {'@': 112})}, 74: {1: (1, {'@': 113}), 2: (1, {'@': 113}), 3: (1, {'@': 113}), 4: (1, {'@': 113}), 5: (1, {'@': 113}), 6: (1, {'@': 113}), 7: (1, {'@': 113}), 8: (1, {'@': 113}), 9: (1, {'@': 113}), 10: (1, {'@': 113}), 11: (1, {'@': 113}), 12: (1, {'@': 113}), 13: (1, {'@': 113}), 14: (1, {'@': 113}), 15: (1, {'@': 113}), 16: (1, {'@': 113}), 17: (1, {'@': 113}), 18: (1, {'@': 113}), 19: (1, {'@': 113}), 20: (1, {'@': 113}), 21: (1, {'@': 113}), 22: (1, {'@': 113}), 23: (1, {'@': 113}), 24: (1, {'@': 113}), 25: (1, {'@': 113}), 26: (1, {'@': 113}), 27: (1, {'@': 113}), 48: (1, {'@': 113}), 49: (1, {'@': 113}), 50: (1, {'@': 113}), 29: (1, {'@': 113}), 51: (1, {'@': 113}), 47: (1, {'@': 113}), 30: (1, {'@': 113}), 32: (1, {'@': 113}), 52: (1, {'@': 113}), 34: (1, {'@': 113}), 33: (1, {'@': 113}), 35: (1, {'@': 113}), 53: (1, {'@': 113}), 36: (1, {'@': 113}), 54: (1, {'@': 113}), 37: (1, {'@': 113}), 55: (1, {'@': 113}), 38: (1, {'@': 113}), 56: (1, {'@': 113}), 39: (1, {'@': 113}), 57: (1, {'@': 113}), 40: (1, {'@': 113}), 28: (1, {'@': 113}), 41: (1, {'@': 113}), 58: (1, {'@': 113}), 42: (1, {'@': 113}), 59: (1, {'@': 113}), 46: (1, {'@': 113}), 43: (1, {'@': 113}), 31: (1, {'@': 113}), 60: (1, {'@': 113}), 44: (1, {'@': 113}), 61: (1, {'@': 113}), 45: (1, {'@': 113})}, 75: {2: (1, {'@': 114}), 4: (1, {'@': 114}), 86: (1, {'@': 114}), 8: (1, {'@': 114}), 10: (1, {'@': 114}), 11: (1, {'@': 114}), 12: (1, {'@': 114}), 14: (1, {'@': 114}), 17: (1, {'@': 114}), 18: (1, {'@': 114}), 19: (1, {'@': 114}), 20: (1, {'@': 114}), 21: (1, {'@': 114}), 24: (1, {'@': 114}), 23: (1, {'@': 114}), 1: (1, {'@': 114}), 25: (1, {'@': 114}), 15: (1, {'@': 114}), 40: (1, {'@': 114}), 41: (1, {'@': 114}), 42: (1, {'@': 114}), 3: (1, {'@': 114}), 43: (1, {'@': 114}), 33: (1, {'@': 114}), 9: (1, {'@': 114}), 13: (1, {'@': 114}), 37: (1, {'@': 114}), 87: (1, {'@': 114})}, 76: {1: (1, {'@': 115}), 2: (1, {'@': 115}), 3: (1, {'@': 115}), 4: (1, {'@': 115}), 5: (1, {'@': 115}), 6: (1, {'@': 115}), 7: (1, {'@': 115}), 8: (1, {'@': 115}), 9: (1, {'@': 115}), 10: (1, {'@': 115}), 11: (1, {'@': 115}), 12: (1, {'@': 115}), 13: (1, {'@': 115}), 14: (1, {'@': 115}), 15: (1, {'@': 115}), 16: (1, {'@': 115}), 17: (1, {'@': 115}), 18: (1, {'@': 115}), 19: (1, {'@': 115}), 20: (1, {'@': 115}), 21: (1, {'@': 115}), 22: (1, {'@': 115}), 23: (1, {'@': 115}), 24: (1, {'@': 115}), 25: (1, {'@': 115}), 26: (1, {'@': 115}), 27: (1, {'@': 115}), 48: (1, {'@': 115}), 49: (1, {'@': 115}), 50: (1, {'@': 115}), 29: (1, {'@': 115}), 51: (1, {'@': 115}), 47: (1, {'@': 115}), 30: (1, {'@': 115}), 32: (1, {'@': 115}), 52: (1, {'@': 115}), 34: (1, {'@': 115}), 33: (1, {'@': 115}), 35: (1, {'@': 115}), 53: (1, {'@': 115}), 36: (1, {'@': 115}), 54: (1, {'@': 115}), 37: (1, {'@': 115}), 55: (1, {'@': 115}), 38: (1, {'@': 115}), 56: (1, {'@': 115}), 39: (1, {'@': 115}), 57: (1, {'@': 115}), 40: (1, {'@': 115}), 28: (1, {'@': 115}), 41: (1, {'@': 115}), 58: (1, {'@': 115}), 42: (1, {'@': 115}), 59: (1, {'@': 115}), 46: (1, {'@': 115}), 43: (1, {'@': 115}), 31: (1, {'@': 115}), 60: (1, {'@': 115}), 44: (1, {'@': 115}), 61: (1, {'@': 115}), 45: (1, {'@': 115})}, 77: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 84: (0, 91), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 78: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 16), 32: (0, 88), 84: (0, 22), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 79: {18: (0, 230), 22: (0, 90), 47: (0, 190)}, 80: {44: (0, 180), 18: (1, {'@': 74}), 22: (1, {'@': 74})}, 81: {22: (0, 216)}, 82: {1: (1, {'@': 116}), 2: (1, {'@': 116}), 3: (1, {'@': 116}), 4: (1, {'@': 116}), 5: (1, {'@': 116}), 6: (1, {'@': 116}), 7: (1, {'@': 116}), 8: (1, {'@': 116}), 9: (1, {'@': 116}), 10: (1, {'@': 116}), 11: (1, {'@': 116}), 12: (1, {'@': 116}), 13: (1, {'@': 116}), 14: (1, {'@': 116}), 15: (1, {'@': 116}), 16: (1, {'@': 116}), 17: (1, {'@': 116}), 18: (1, {'@': 116}), 19: (1, {'@': 116}), 20: (1, {'@': 116}), 21: (1, {'@': 116}), 22: (1, {'@': 116}), 23: (1, {'@': 116}), 24: (1, {'@': 116}), 25: (1, {'@': 116}), 26: (1, {'@': 116}), 27: (1, {'@': 116}), 48: (1, {'@': 116}), 49: (1, {'@': 116}), 50: (1, {'@': 116}), 29: (1, {'@': 116}), 51: (1, {'@': 116}), 47: (1, {'@': 116}), 30: (1, {'@': 116}), 32: (1, {'@': 116}), 52: (1, {'@': 116}), 34: (1, {'@': 116}), 33: (1, {'@': 116}), 35: (1, {'@': 116}), 53: (1, {'@': 116}), 36: (1, {'@': 116}), 54: (1, {'@': 116}), 37: (1, {'@': 116}), 55: (1, {'@': 116}), 38: (1, {'@': 116}), 56: (1, {'@': 116}), 39: (1, {'@': 116}), 57: (1, {'@': 116}), 40: (1, {'@': 116}), 28: (1, {'@': 116}), 41: (1, {'@': 116}), 58: (1, {'@': 116}), 42: (1, {'@': 116}), 59: (1, {'@': 116}), 46: (1, {'@': 116}), 43: (1, {'@': 116}), 31: (1, {'@': 116}), 60: (1, {'@': 116}), 44: (1, {'@': 116}), 61: (1, {'@': 116}), 45: (1, {'@': 116})}, 83: {11: (0, 157), 2: (1, {'@': 117}), 4: (1, {'@': 117}), 86: (1, {'@': 117}), 8: (1, {'@': 117}), 10: (1, {'@': 117}), 12: (1, {'@': 117}), 14: (1, {'@': 117}), 17: (1, {'@': 117}), 18: (1, {'@': 117}), 19: (1, {'@': 117}), 20: (1, {'@': 117}), 21: (1, {'@': 117}), 24: (1, {'@': 117}), 23: (1, {'@': 117}), 1: (1, {'@': 117}), 25: (1, {'@': 117}), 15: (1, {'@': 117}), 40: (1, {'@': 117}), 41: (1, {'@': 117}), 42: (1, {'@': 117}), 3: (1, {'@': 117}), 43: (1, {'@': 117}), 33: (1, {'@': 117}), 9: (1, {'@': 117}), 13: (1, {'@': 117}), 37: (1, {'@': 117}), 87: (1, {'@': 117})}, 84: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 84: (0, 129), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 85: {22: (0, 90), 18: (0, 230), 50: (0, 176)}, 86: {2: (1, {'@': 118}), 4: (1, {'@': 118}), 86: (1, {'@': 118}), 8: (1, {'@': 118}), 10: (1, {'@': 118}), 11: (1, {'@': 118}), 12: (1, {'@': 118}), 14: (1, {'@': 118}), 17: (1, {'@': 118}), 18: (1, {'@': 118}), 19: (1, {'@': 118}), 20: (1, {'@': 118}), 21: (1, {'@': 118}), 24: (1, {'@': 118}), 23: (1, {'@': 118}), 1: (1, {'@': 118}), 25: (1, {'@': 118}), 15: (1, {'@': 118}), 40: (1, {'@': 118}), 41: (1, {'@': 118}), 42: (1, {'@': 118}), 3: (1, {'@': 118}), 43: (1, {'@': 118}), 33: (1, {'@': 118}), 9: (1, {'@': 118}), 13: (1, {'@': 118}), 37: (1, {'@': 118}), 87: (1, {'@': 118})}, 87: {9: (0, 128), 3: (0, 97), 2: (1, {'@': 119}), 4: (1, {'@': 119}), 5: (1, {'@': 119}), 6: (1, {'@': 119}), 7: (1, {'@': 119}), 8: (1, {'@': 119}), 10: (1, {'@': 119}), 11: (1, {'@': 119}), 12: (1, {'@': 119}), 13: (1, {'@': 119}), 14: (1, {'@': 119}), 16: (1, {'@': 119}), 17: (1, {'@': 119}), 18: (1, {'@': 119}), 19: (1, {'@': 119}), 20: (1, {'@': 119}), 21: (1, {'@': 119}), 22: (1, {'@': 119}), 24: (1, {'@': 119}), 27: (1, {'@': 119}), 23: (1, {'@': 119}), 1: (1, {'@': 119}), 25: (1, {'@': 119}), 26: (1, {'@': 119}), 15: (1, {'@': 119}), 48: (1, {'@': 119}), 49: (1, {'@': 119}), 50: (1, {'@': 119}), 29: (1, {'@': 119}), 45: (1, {'@': 119}), 51: (1, {'@': 119}), 47: (1, {'@': 119}), 30: (1, {'@': 119}), 32: (1, {'@': 119}), 52: (1, {'@': 119}), 34: (1, {'@': 119}), 33: (1, {'@': 119}), 35: (1, {'@': 119}), 53: (1, {'@': 119}), 36: (1, {'@': 119}), 54: (1, {'@': 119}), 37: (1, {'@': 119}), 55: (1, {'@': 119}), 38: (1, {'@': 119}), 56: (1, {'@': 119}), 39: (1, {'@': 119}), 57: (1, {'@': 119}), 40: (1, {'@': 119}), 28: (1, {'@': 119}), 41: (1, {'@': 119}), 58: (1, {'@': 119}), 42: (1, {'@': 119}), 59: (1, {'@': 119}), 46: (1, {'@': 119}), 43: (1, {'@': 119}), 31: (1, {'@': 119}), 60: (1, {'@': 119}), 44: (1, {'@': 119}), 61: (1, {'@': 119})}, 88: {2: (1, {'@': 120}), 4: (1, {'@': 120}), 32: (1, {'@': 120}), 33: (1, {'@': 120}), 34: (1, {'@': 120}), 35: (1, {'@': 120}), 11: (1, {'@': 120}), 9: (1, {'@': 120}), 12: (1, {'@': 120}), 36: (1, {'@': 120}), 18: (1, {'@': 120}), 19: (1, {'@': 120}), 37: (1, {'@': 120}), 21: (1, {'@': 120}), 20: (1, {'@': 120}), 1: (1, {'@': 120}), 38: (1, {'@': 120}), 25: (1, {'@': 120}), 39: (1, {'@': 120}), 40: (1, {'@': 120}), 41: (1, {'@': 120}), 42: (1, {'@': 120}), 3: (1, {'@': 120}), 43: (1, {'@': 120}), 8: (1, {'@': 120}), 10: (1, {'@': 120}), 13: (1, {'@': 120}), 14: (1, {'@': 120}), 17: (1, {'@': 120}), 23: (1, {'@': 120}), 24: (1, {'@': 120}), 15: (1, {'@': 120})}, 89: {2: (1, {'@': 121}), 4: (1, {'@': 121}), 5: (1, {'@': 121}), 8: (1, {'@': 121}), 10: (1, {'@': 121}), 11: (1, {'@': 121}), 12: (1, {'@': 121}), 14: (1, {'@': 121}), 17: (1, {'@': 121}), 18: (1, {'@': 121}), 19: (1, {'@': 121}), 20: (1, {'@': 121}), 21: (1, {'@': 121}), 22: (1, {'@': 121}), 24: (1, {'@': 121}), 23: (1, {'@': 121}), 1: (1, {'@': 121}), 25: (1, {'@': 121}), 26: (1, {'@': 121}), 15: (1, {'@': 121}), 28: (1, {'@': 121}), 29: (1, {'@': 121}), 30: (1, {'@': 121}), 31: (1, {'@': 121}), 32: (1, {'@': 121}), 33: (1, {'@': 121}), 34: (1, {'@': 121}), 35: (1, {'@': 121}), 9: (1, {'@': 121}), 36: (1, {'@': 121}), 37: (1, {'@': 121}), 38: (1, {'@': 121}), 39: (1, {'@': 121}), 40: (1, {'@': 121}), 41: (1, {'@': 121}), 42: (1, {'@': 121}), 3: (1, {'@': 121}), 43: (1, {'@': 121}), 13: (1, {'@': 121}), 44: (1, {'@': 121}), 45: (1, {'@': 121}), 48: (1, {'@': 121}), 49: (1, {'@': 121}), 50: (1, {'@': 121}), 51: (1, {'@': 121}), 47: (1, {'@': 121}), 52: (1, {'@': 121}), 53: (1, {'@': 121}), 54: (1, {'@': 121}), 55: (1, {'@': 121}), 56: (1, {'@': 121}), 57: (1, {'@': 121}), 58: (1, {'@': 121}), 59: (1, {'@': 121}), 46: (1, {'@': 121}), 60: (1, {'@': 121}), 61: (1, {'@': 121})}, 90: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 84: (0, 210), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 91: {18: (0, 230), 22: (0, 90), 50: (1, {'@': 122}), 28: (1, {'@': 122}), 30: (1, {'@': 122}), 46: (1, {'@': 122})}, 92: {3: (0, 240), 80: (0, 239), 42: (0, 5), 40: (0, 68), 9: (0, 10), 65: (0, 43), 66: (0, 87), 62: (0, 173), 37: (0, 30), 63: (0, 184), 33: (0, 232), 43: (0, 94), 69: (0, 98), 77: (0, 123), 70: (0, 64), 41: (0, 125)}, 93: {2: (1, {'@': 123}), 4: (1, {'@': 123}), 86: (1, {'@': 123}), 8: (1, {'@': 123}), 10: (1, {'@': 123}), 11: (1, {'@': 123}), 12: (1, {'@': 123}), 14: (1, {'@': 123}), 17: (1, {'@': 123}), 18: (1, {'@': 123}), 19: (1, {'@': 123}), 20: (1, {'@': 123}), 21: (1, {'@': 123}), 24: (1, {'@': 123}), 23: (1, {'@': 123}), 1: (1, {'@': 123}), 25: (1, {'@': 123}), 15: (1, {'@': 123}), 40: (1, {'@': 123}), 41: (1, {'@': 123}), 42: (1, {'@': 123}), 3: (1, {'@': 123}), 43: (1, {'@': 123}), 33: (1, {'@': 123}), 9: (1, {'@': 123}), 13: (1, {'@': 123}), 37: (1, {'@': 123}), 87: (1, {'@': 123})}, 94: {1: (1, {'@': 124}), 2: (1, {'@': 124}), 3: (1, {'@': 124}), 4: (1, {'@': 124}), 5: (1, {'@': 124}), 6: (1, {'@': 124}), 7: (1, {'@': 124}), 8: (1, {'@': 124}), 9: (1, {'@': 124}), 10: (1, {'@': 124}), 11: (1, {'@': 124}), 12: (1, {'@': 124}), 13: (1, {'@': 124}), 14: (1, {'@': 124}), 15: (1, {'@': 124}), 16: (1, {'@': 124}), 17: (1, {'@': 124}), 18: (1, {'@': 124}), 19: (1, {'@': 124}), 20: (1, {'@': 124}), 21: (1, {'@': 124}), 22: (1, {'@': 124}), 23: (1, {'@': 124}), 24: (1, {'@': 124}), 25: (1, {'@': 124}), 26: (1, {'@': 124}), 27: (1, {'@': 124}), 48: (1, {'@': 124}), 49: (1, {'@': 124}), 50: (1, {'@': 124}), 29: (1, {'@': 124}), 51: (1, {'@': 124}), 47: (1, {'@': 124}), 30: (1, {'@': 124}), 32: (1, {'@': 124}), 52: (1, {'@': 124}), 34: (1, {'@': 124}), 33: (1, {'@': 124}), 35: (1, {'@': 124}), 53: (1, {'@': 124}), 36: (1, {'@': 124}), 54: (1, {'@': 124}), 37: (1, {'@': 124}), 55: (1, {'@': 124}), 38: (1, {'@': 124}), 56: (1, {'@': 124}), 39: (1, {'@': 124}), 57: (1, {'@': 124}), 40: (1, {'@': 124}), 28: (1, {'@': 124}), 41: (1, {'@': 124}), 58: (1, {'@': 124}), 42: (1, {'@': 124}), 59: (1, {'@': 124}), 46: (1, {'@': 124}), 43: (1, {'@': 124}), 31: (1, {'@': 124}), 60: (1, {'@': 124}), 44: (1, {'@': 124}), 61: (1, {'@': 124}), 45: (1, {'@': 124})}, 95: {50: (0, 168), 22: (0, 90), 28: (0, 215), 93: (0, 17), 18: (0, 230)}, 96: {40: (1, {'@': 125}), 9: (1, {'@': 125}), 41: (1, {'@': 125}), 3: (1, {'@': 125}), 42: (1, {'@': 125}), 37: (1, {'@': 125}), 43: (1, {'@': 125}), 33: (1, {'@': 125})}, 97: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 84: (0, 95), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 50: (0, 26), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 98: {94: (0, 69), 16: (0, 25), 2: (1, {'@': 126}), 4: (1, {'@': 126}), 5: (1, {'@': 126}), 6: (1, {'@': 126}), 8: (1, {'@': 126}), 10: (1, {'@': 126}), 11: (1, {'@': 126}), 12: (1, {'@': 126}), 13: (1, {'@': 126}), 14: (1, {'@': 126}), 17: (1, {'@': 126}), 18: (1, {'@': 126}), 19: (1, {'@': 126}), 20: (1, {'@': 126}), 21: (1, {'@': 126}), 22: (1, {'@': 126}), 24: (1, {'@': 126}), 27: (1, {'@': 126}), 23: (1, {'@': 126}), 1: (1, {'@': 126}), 25: (1, {'@': 126}), 26: (1, {'@': 126}), 15: (1, {'@': 126}), 48: (1, {'@': 126}), 49: (1, {'@': 126}), 50: (1, {'@': 126}), 29: (1, {'@': 126}), 51: (1, {'@': 126}), 47: (1, {'@': 126}), 30: (1, {'@': 126}), 32: (1, {'@': 126}), 52: (1, {'@': 126}), 34: (1, {'@': 126}), 33: (1, {'@': 126}), 35: (1, {'@': 126}), 53: (1, {'@': 126}), 9: (1, {'@': 126}), 36: (1, {'@': 126}), 54: (1, {'@': 126}), 37: (1, {'@': 126}), 55: (1, {'@': 126}), 38: (1, {'@': 126}), 56: (1, {'@': 126}), 39: (1, {'@': 126}), 57: (1, {'@': 126}), 40: (1, {'@': 126}), 28: (1, {'@': 126}), 41: (1, {'@': 126}), 58: (1, {'@': 126}), 42: (1, {'@': 126}), 3: (1, {'@': 126}), 59: (1, {'@': 126}), 46: (1, {'@': 126}), 43: (1, {'@': 126}), 31: (1, {'@': 126}), 60: (1, {'@': 126}), 44: (1, {'@': 126}), 61: (1, {'@': 126}), 45: (1, {'@': 126})}, 99: {28: (0, 126), 95: (0, 144), 50: (0, 134), 0: (0, 161), 1: (1, {'@': 66}), 2: (1, {'@': 66}), 3: (1, {'@': 66}), 4: (1, {'@': 66}), 5: (1, {'@': 66}), 6: (1, {'@': 66}), 7: (1, {'@': 66}), 8: (1, {'@': 66}), 9: (1, {'@': 66}), 10: (1, {'@': 66}), 11: (1, {'@': 66}), 12: (1, {'@': 66}), 13: (1, {'@': 66}), 14: (1, {'@': 66}), 15: (1, {'@': 66}), 16: (1, {'@': 66}), 17: (1, {'@': 66}), 18: (1, {'@': 66}), 19: (1, {'@': 66}), 20: (1, {'@': 66}), 21: (1, {'@': 66}), 22: (1, {'@': 66}), 23: (1, {'@': 66}), 24: (1, {'@': 66}), 25: (1, {'@': 66}), 26: (1, {'@': 66}), 27: (1, {'@': 66})}, 100: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 84: (0, 67), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 101: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 84: (0, 208), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 102: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 84: (0, 14), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 103: {42: (0, 5), 3: (0, 240), 70: (0, 64), 66: (0, 87), 80: (0, 239), 9: (0, 10), 40: (0, 68), 65: (0, 43), 62: (0, 173), 77: (0, 224), 37: (0, 30), 33: (0, 232), 43: (0, 94), 69: (0, 98), 41: (0, 125)}, 104: {18: (0, 230), 44: (0, 15), 60: (0, 65), 22: (0, 90)}, 105: {2: (1, {'@': 127}), 4: (1, {'@': 127}), 86: (1, {'@': 127}), 8: (1, {'@': 127}), 10: (1, {'@': 127}), 11: (1, {'@': 127}), 12: (1, {'@': 127}), 14: (1, {'@': 127}), 17: (1, {'@': 127}), 18: (1, {'@': 127}), 19: (1, {'@': 127}), 20: (1, {'@': 127}), 21: (1, {'@': 127}), 24: (1, {'@': 127}), 23: (1, {'@': 127}), 1: (1, {'@': 127}), 25: (1, {'@': 127}), 15: (1, {'@': 127}), 40: (1, {'@': 127}), 41: (1, {'@': 127}), 42: (1, {'@': 127}), 3: (1, {'@': 127}), 43: (1, {'@': 127}), 33: (1, {'@': 127}), 9: (1, {'@': 127}), 13: (1, {'@': 127}), 37: (1, {'@': 127}), 87: (1, {'@': 127})}, 106: {2: (1, {'@': 128}), 4: (1, {'@': 128}), 86: (1, {'@': 128}), 8: (1, {'@': 128}), 10: (1, {'@': 128}), 11: (1, {'@': 128}), 12: (1, {'@': 128}), 14: (1, {'@': 128}), 17: (1, {'@': 128}), 18: (1, {'@': 128}), 19: (1, {'@': 128}), 20: (1, {'@': 128}), 21: (1, {'@': 128}), 24: (1, {'@': 128}), 23: (1, {'@': 128}), 1: (1, {'@': 128}), 25: (1, {'@': 128}), 15: (1, {'@': 128}), 40: (1, {'@': 128}), 41: (1, {'@': 128}), 42: (1, {'@': 128}), 3: (1, {'@': 128}), 43: (1, {'@': 128}), 33: (1, {'@': 128}), 9: (1, {'@': 128}), 13: (1, {'@': 128}), 37: (1, {'@': 128}), 87: (1, {'@': 128})}, 107: {50: (1, {'@': 129}), 29: (1, {'@': 129}), 51: (1, {'@': 129}), 47: (1, {'@': 129}), 34: (1, {'@': 129}), 35: (1, {'@': 129}), 9: (1, {'@': 129}), 36: (1, {'@': 129}), 54: (1, {'@': 129}), 18: (1, {'@': 129}), 19: (1, {'@': 129}), 20: (1, {'@': 129}), 55: (1, {'@': 129}), 38: (1, {'@': 129}), 26: (1, {'@': 129}), 39: (1, {'@': 129}), 57: (1, {'@': 129}), 28: (1, {'@': 129}), 59: (1, {'@': 129}), 5: (1, {'@': 129}), 6: (1, {'@': 129}), 8: (1, {'@': 129}), 10: (1, {'@': 129}), 24: (1, {'@': 129}), 2: (1, {'@': 129}), 48: (1, {'@': 129}), 4: (1, {'@': 129}), 49: (1, {'@': 129}), 30: (1, {'@': 129}), 32: (1, {'@': 129}), 52: (1, {'@': 129}), 33: (1, {'@': 129}), 61: (1, {'@': 129}), 53: (1, {'@': 129}), 11: (1, {'@': 129}), 15: (1, {'@': 129}), 12: (1, {'@': 129}), 37: (1, {'@': 129}), 21: (1, {'@': 129}), 1: (1, {'@': 129}), 25: (1, {'@': 129}), 56: (1, {'@': 129}), 40: (1, {'@': 129}), 41: (1, {'@': 129}), 58: (1, {'@': 129}), 42: (1, {'@': 129}), 3: (1, {'@': 129}), 46: (1, {'@': 129}), 43: (1, {'@': 129}), 31: (1, {'@': 129}), 60: (1, {'@': 129}), 13: (1, {'@': 129}), 14: (1, {'@': 129}), 17: (1, {'@': 129}), 44: (1, {'@': 129}), 22: (1, {'@': 129}), 23: (1, {'@': 129}), 45: (1, {'@': 129}), 27: (1, {'@': 129})}, 108: {18: (0, 230), 22: (0, 90), 28: (1, {'@': 130}), 29: (1, {'@': 130}), 30: (1, {'@': 130}), 31: (1, {'@': 130}), 2: (1, {'@': 130}), 4: (1, {'@': 130}), 32: (1, {'@': 130}), 33: (1, {'@': 130}), 34: (1, {'@': 130}), 35: (1, {'@': 130}), 11: (1, {'@': 130}), 9: (1, {'@': 130}), 12: (1, {'@': 130}), 36: (1, {'@': 130}), 19: (1, {'@': 130}), 37: (1, {'@': 130}), 21: (1, {'@': 130}), 20: (1, {'@': 130}), 1: (1, {'@': 130}), 38: (1, {'@': 130}), 25: (1, {'@': 130}), 39: (1, {'@': 130}), 40: (1, {'@': 130}), 41: (1, {'@': 130}), 42: (1, {'@': 130}), 3: (1, {'@': 130}), 43: (1, {'@': 130}), 8: (1, {'@': 130}), 10: (1, {'@': 130}), 13: (1, {'@': 130}), 14: (1, {'@': 130}), 44: (1, {'@': 130}), 17: (1, {'@': 130}), 23: (1, {'@': 130}), 24: (1, {'@': 130}), 45: (1, {'@': 130}), 15: (1, {'@': 130}), 46: (1, {'@': 130}), 47: (1, {'@': 130}), 48: (1, {'@': 130}), 49: (1, {'@': 130}), 50: (1, {'@': 130}), 51: (1, {'@': 130}), 52: (1, {'@': 130}), 61: (1, {'@': 130}), 53: (1, {'@': 130}), 54: (1, {'@': 130}), 55: (1, {'@': 130}), 56: (1, {'@': 130}), 57: (1, {'@': 130}), 58: (1, {'@': 130}), 59: (1, {'@': 130}), 60: (1, {'@': 130})}, 109: {3: (0, 240), 80: (0, 239), 42: (0, 5), 40: (0, 68), 9: (0, 10), 65: (0, 43), 66: (0, 87), 62: (0, 173), 37: (0, 30), 33: (0, 232), 43: (0, 94), 69: (0, 98), 77: (0, 123), 70: (0, 64), 63: (0, 203), 41: (0, 125)}, 110: {2: (1, {'@': 131}), 4: (1, {'@': 131}), 86: (1, {'@': 131}), 8: (1, {'@': 131}), 10: (1, {'@': 131}), 11: (1, {'@': 131}), 12: (1, {'@': 131}), 14: (1, {'@': 131}), 17: (1, {'@': 131}), 18: (1, {'@': 131}), 19: (1, {'@': 131}), 20: (1, {'@': 131}), 21: (1, {'@': 131}), 24: (1, {'@': 131}), 23: (1, {'@': 131}), 1: (1, {'@': 131}), 25: (1, {'@': 131}), 15: (1, {'@': 131}), 40: (1, {'@': 131}), 41: (1, {'@': 131}), 42: (1, {'@': 131}), 3: (1, {'@': 131}), 43: (1, {'@': 131}), 33: (1, {'@': 131}), 9: (1, {'@': 131}), 13: (1, {'@': 131}), 37: (1, {'@': 131}), 87: (1, {'@': 131})}, 111: {17: (0, 145), 1: (1, {'@': 132}), 2: (1, {'@': 132}), 4: (1, {'@': 132}), 5: (1, {'@': 132}), 6: (1, {'@': 132}), 8: (1, {'@': 132}), 10: (1, {'@': 132}), 11: (1, {'@': 132}), 15: (1, {'@': 132}), 13: (1, {'@': 132}), 12: (1, {'@': 132}), 14: (1, {'@': 132}), 18: (1, {'@': 132}), 19: (1, {'@': 132}), 20: (1, {'@': 132}), 21: (1, {'@': 132}), 22: (1, {'@': 132}), 23: (1, {'@': 132}), 24: (1, {'@': 132}), 25: (1, {'@': 132}), 26: (1, {'@': 132}), 27: (1, {'@': 132}), 48: (1, {'@': 132}), 49: (1, {'@': 132}), 50: (1, {'@': 132}), 29: (1, {'@': 132}), 45: (1, {'@': 132}), 51: (1, {'@': 132}), 47: (1, {'@': 132}), 30: (1, {'@': 132}), 32: (1, {'@': 132}), 52: (1, {'@': 132}), 34: (1, {'@': 132}), 33: (1, {'@': 132}), 35: (1, {'@': 132}), 53: (1, {'@': 132}), 9: (1, {'@': 132}), 36: (1, {'@': 132}), 54: (1, {'@': 132}), 37: (1, {'@': 132}), 55: (1, {'@': 132}), 38: (1, {'@': 132}), 56: (1, {'@': 132}), 39: (1, {'@': 132}), 57: (1, {'@': 132}), 40: (1, {'@': 132}), 28: (1, {'@': 132}), 41: (1, {'@': 132}), 58: (1, {'@': 132}), 42: (1, {'@': 132}), 3: (1, {'@': 132}), 59: (1, {'@': 132}), 46: (1, {'@': 132}), 43: (1, {'@': 132}), 31: (1, {'@': 132}), 60: (1, {'@': 132}), 44: (1, {'@': 132}), 61: (1, {'@': 132})}, 112: {27: (0, 92), 96: (0, 244), 2: (1, {'@': 133}), 4: (1, {'@': 133}), 5: (1, {'@': 133}), 6: (1, {'@': 133}), 8: (1, {'@': 133}), 10: (1, {'@': 133}), 11: (1, {'@': 133}), 13: (1, {'@': 133}), 12: (1, {'@': 133}), 14: (1, {'@': 133}), 17: (1, {'@': 133}), 18: (1, {'@': 133}), 19: (1, {'@': 133}), 20: (1, {'@': 133}), 21: (1, {'@': 133}), 22: (1, {'@': 133}), 24: (1, {'@': 133}), 23: (1, {'@': 133}), 1: (1, {'@': 133}), 25: (1, {'@': 133}), 26: (1, {'@': 133}), 15: (1, {'@': 133}), 48: (1, {'@': 133}), 49: (1, {'@': 133}), 50: (1, {'@': 133}), 29: (1, {'@': 133}), 51: (1, {'@': 133}), 47: (1, {'@': 133}), 30: (1, {'@': 133}), 32: (1, {'@': 133}), 52: (1, {'@': 133}), 34: (1, {'@': 133}), 33: (1, {'@': 133}), 61: (1, {'@': 133}), 35: (1, {'@': 133}), 53: (1, {'@': 133}), 9: (1, {'@': 133}), 36: (1, {'@': 133}), 54: (1, {'@': 133}), 37: (1, {'@': 133}), 55: (1, {'@': 133}), 38: (1, {'@': 133}), 56: (1, {'@': 133}), 39: (1, {'@': 133}), 57: (1, {'@': 133}), 40: (1, {'@': 133}), 28: (1, {'@': 133}), 41: (1, {'@': 133}), 58: (1, {'@': 133}), 42: (1, {'@': 133}), 3: (1, {'@': 133}), 59: (1, {'@': 133}), 46: (1, {'@': 133}), 43: (1, {'@': 133}), 31: (1, {'@': 133}), 60: (1, {'@': 133}), 44: (1, {'@': 133}), 45: (1, {'@': 133})}, 113: {18: (0, 230), 22: (0, 90), 28: (1, {'@': 134}), 29: (1, {'@': 134}), 30: (1, {'@': 134}), 31: (1, {'@': 134}), 2: (1, {'@': 134}), 4: (1, {'@': 134}), 32: (1, {'@': 134}), 33: (1, {'@': 134}), 34: (1, {'@': 134}), 35: (1, {'@': 134}), 11: (1, {'@': 134}), 9: (1, {'@': 134}), 12: (1, {'@': 134}), 36: (1, {'@': 134}), 19: (1, {'@': 134}), 37: (1, {'@': 134}), 21: (1, {'@': 134}), 20: (1, {'@': 134}), 1: (1, {'@': 134}), 38: (1, {'@': 134}), 25: (1, {'@': 134}), 39: (1, {'@': 134}), 40: (1, {'@': 134}), 41: (1, {'@': 134}), 42: (1, {'@': 134}), 3: (1, {'@': 134}), 43: (1, {'@': 134}), 8: (1, {'@': 134}), 10: (1, {'@': 134}), 13: (1, {'@': 134}), 14: (1, {'@': 134}), 44: (1, {'@': 134}), 17: (1, {'@': 134}), 23: (1, {'@': 134}), 24: (1, {'@': 134}), 45: (1, {'@': 134}), 15: (1, {'@': 134}), 46: (1, {'@': 134}), 47: (1, {'@': 134}), 48: (1, {'@': 134}), 49: (1, {'@': 134}), 50: (1, {'@': 134}), 51: (1, {'@': 134}), 52: (1, {'@': 134}), 61: (1, {'@': 134}), 53: (1, {'@': 134}), 54: (1, {'@': 134}), 55: (1, {'@': 134}), 56: (1, {'@': 134}), 57: (1, {'@': 134}), 58: (1, {'@': 134}), 59: (1, {'@': 134}), 60: (1, {'@': 134})}, 114: {2: (1, {'@': 135}), 4: (1, {'@': 135}), 32: (1, {'@': 135}), 33: (1, {'@': 135}), 34: (1, {'@': 135}), 35: (1, {'@': 135}), 11: (1, {'@': 135}), 9: (1, {'@': 135}), 12: (1, {'@': 135}), 36: (1, {'@': 135}), 18: (1, {'@': 135}), 19: (1, {'@': 135}), 37: (1, {'@': 135}), 21: (1, {'@': 135}), 20: (1, {'@': 135}), 1: (1, {'@': 135}), 38: (1, {'@': 135}), 25: (1, {'@': 135}), 39: (1, {'@': 135}), 40: (1, {'@': 135}), 41: (1, {'@': 135}), 42: (1, {'@': 135}), 3: (1, {'@': 135}), 43: (1, {'@': 135}), 8: (1, {'@': 135}), 10: (1, {'@': 135}), 13: (1, {'@': 135}), 14: (1, {'@': 135}), 17: (1, {'@': 135}), 23: (1, {'@': 135}), 24: (1, {'@': 135}), 15: (1, {'@': 135})}, 115: {42: (0, 5), 3: (0, 240), 97: (0, 211), 70: (0, 64), 66: (0, 87), 80: (0, 239), 65: (0, 246), 9: (0, 10), 40: (0, 68), 98: (0, 172), 62: (0, 173), 37: (0, 30), 33: (0, 232), 43: (0, 94), 41: (0, 125)}, 116: {60: (0, 18), 18: (0, 230), 44: (0, 35), 22: (0, 90)}, 117: {77: (0, 107), 42: (0, 5), 3: (0, 240), 70: (0, 64), 66: (0, 87), 80: (0, 239), 9: (0, 10), 40: (0, 68), 65: (0, 43), 62: (0, 173), 37: (0, 30), 33: (0, 232), 43: (0, 94), 69: (0, 98), 41: (0, 125)}, 118: {48: (0, 41), 18: (0, 230), 22: (0, 90)}, 119: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 88: (0, 63), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 44: (0, 29), 32: (0, 88), 84: (0, 79), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 45: (0, 214), 39: (0, 236)}, 120: {11: (0, 146), 2: (1, {'@': 136}), 4: (1, {'@': 136}), 86: (1, {'@': 136}), 8: (1, {'@': 136}), 10: (1, {'@': 136}), 12: (1, {'@': 136}), 14: (1, {'@': 136}), 17: (1, {'@': 136}), 18: (1, {'@': 136}), 19: (1, {'@': 136}), 20: (1, {'@': 136}), 21: (1, {'@': 136}), 24: (1, {'@': 136}), 23: (1, {'@': 136}), 1: (1, {'@': 136}), 25: (1, {'@': 136}), 15: (1, {'@': 136}), 40: (1, {'@': 136}), 41: (1, {'@': 136}), 42: (1, {'@': 136}), 3: (1, {'@': 136}), 43: (1, {'@': 136}), 33: (1, {'@': 136}), 9: (1, {'@': 136}), 13: (1, {'@': 136}), 37: (1, {'@': 136}), 87: (1, {'@': 136})}, 121: {50: (1, {'@': 137}), 28: (1, {'@': 137})}, 122: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 99), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 84: (0, 85), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 123: {99: (0, 111), 12: (0, 117), 100: (0, 40), 17: (0, 103), 1: (1, {'@': 138}), 2: (1, {'@': 138}), 4: (1, {'@': 138}), 5: (1, {'@': 138}), 6: (1, {'@': 138}), 8: (1, {'@': 138}), 10: (1, {'@': 138}), 11: (1, {'@': 138}), 15: (1, {'@': 138}), 13: (1, {'@': 138}), 14: (1, {'@': 138}), 18: (1, {'@': 138}), 19: (1, {'@': 138}), 20: (1, {'@': 138}), 21: (1, {'@': 138}), 22: (1, {'@': 138}), 23: (1, {'@': 138}), 24: (1, {'@': 138}), 25: (1, {'@': 138}), 26: (1, {'@': 138}), 27: (1, {'@': 138}), 48: (1, {'@': 138}), 49: (1, {'@': 138}), 50: (1, {'@': 138}), 29: (1, {'@': 138}), 45: (1, {'@': 138}), 51: (1, {'@': 138}), 47: (1, {'@': 138}), 30: (1, {'@': 138}), 32: (1, {'@': 138}), 52: (1, {'@': 138}), 34: (1, {'@': 138}), 33: (1, {'@': 138}), 35: (1, {'@': 138}), 53: (1, {'@': 138}), 9: (1, {'@': 138}), 36: (1, {'@': 138}), 54: (1, {'@': 138}), 37: (1, {'@': 138}), 55: (1, {'@': 138}), 38: (1, {'@': 138}), 56: (1, {'@': 138}), 39: (1, {'@': 138}), 57: (1, {'@': 138}), 40: (1, {'@': 138}), 28: (1, {'@': 138}), 41: (1, {'@': 138}), 58: (1, {'@': 138}), 42: (1, {'@': 138}), 3: (1, {'@': 138}), 59: (1, {'@': 138}), 46: (1, {'@': 138}), 43: (1, {'@': 138}), 31: (1, {'@': 138}), 60: (1, {'@': 138}), 44: (1, {'@': 138}), 61: (1, {'@': 138})}, 124: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 101: (0, 213), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 84: (0, 48), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 55: (0, 101), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 102: (0, 132), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 56: (0, 39), 36: (0, 57), 15: (0, 106), 9: (0, 10), 59: (0, 51), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 103: (0, 207), 34: (0, 138), 13: (0, 156), 53: (0, 182), 85: (0, 233), 25: (0, 205), 14: (0, 229), 51: (0, 148), 58: (0, 225), 39: (0, 236), 104: (0, 197), 54: (1, {'@': 139})}, 125: {1: (1, {'@': 140}), 2: (1, {'@': 140}), 3: (1, {'@': 140}), 4: (1, {'@': 140}), 5: (1, {'@': 140}), 6: (1, {'@': 140}), 7: (1, {'@': 140}), 8: (1, {'@': 140}), 9: (1, {'@': 140}), 10: (1, {'@': 140}), 11: (1, {'@': 140}), 12: (1, {'@': 140}), 13: (1, {'@': 140}), 14: (1, {'@': 140}), 15: (1, {'@': 140}), 16: (1, {'@': 140}), 17: (1, {'@': 140}), 18: (1, {'@': 140}), 19: (1, {'@': 140}), 20: (1, {'@': 140}), 21: (1, {'@': 140}), 22: (1, {'@': 140}), 23: (1, {'@': 140}), 24: (1, {'@': 140}), 25: (1, {'@': 140}), 26: (1, {'@': 140}), 27: (1, {'@': 140}), 48: (1, {'@': 140}), 49: (1, {'@': 140}), 50: (1, {'@': 140}), 29: (1, {'@': 140}), 51: (1, {'@': 140}), 47: (1, {'@': 140}), 30: (1, {'@': 140}), 32: (1, {'@': 140}), 52: (1, {'@': 140}), 34: (1, {'@': 140}), 33: (1, {'@': 140}), 35: (1, {'@': 140}), 53: (1, {'@': 140}), 36: (1, {'@': 140}), 54: (1, {'@': 140}), 37: (1, {'@': 140}), 55: (1, {'@': 140}), 38: (1, {'@': 140}), 56: (1, {'@': 140}), 39: (1, {'@': 140}), 57: (1, {'@': 140}), 40: (1, {'@': 140}), 28: (1, {'@': 140}), 41: (1, {'@': 140}), 58: (1, {'@': 140}), 42: (1, {'@': 140}), 59: (1, {'@': 140}), 46: (1, {'@': 140}), 43: (1, {'@': 140}), 31: (1, {'@': 140}), 60: (1, {'@': 140}), 44: (1, {'@': 140}), 61: (1, {'@': 140}), 45: (1, {'@': 140})}, 126: {62: (0, 121), 40: (0, 68)}, 127: {2: (1, {'@': 141}), 4: (1, {'@': 141}), 51: (1, {'@': 141}), 32: (1, {'@': 141}), 33: (1, {'@': 141}), 34: (1, {'@': 141}), 35: (1, {'@': 141}), 53: (1, {'@': 141}), 11: (1, {'@': 141}), 9: (1, {'@': 141}), 12: (1, {'@': 141}), 36: (1, {'@': 141}), 54: (1, {'@': 141}), 18: (1, {'@': 141}), 19: (1, {'@': 141}), 37: (1, {'@': 141}), 21: (1, {'@': 141}), 55: (1, {'@': 141}), 20: (1, {'@': 141}), 1: (1, {'@': 141}), 38: (1, {'@': 141}), 25: (1, {'@': 141}), 56: (1, {'@': 141}), 39: (1, {'@': 141}), 40: (1, {'@': 141}), 41: (1, {'@': 141}), 58: (1, {'@': 141}), 42: (1, {'@': 141}), 3: (1, {'@': 141}), 59: (1, {'@': 141}), 43: (1, {'@': 141}), 8: (1, {'@': 141}), 10: (1, {'@': 141}), 13: (1, {'@': 141}), 14: (1, {'@': 141}), 17: (1, {'@': 141}), 23: (1, {'@': 141}), 24: (1, {'@': 141}), 15: (1, {'@': 141})}, 128: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 84: (0, 162), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 129: {18: (0, 230), 22: (0, 90), 28: (1, {'@': 142}), 29: (1, {'@': 142}), 30: (1, {'@': 142}), 31: (1, {'@': 142}), 2: (1, {'@': 142}), 4: (1, {'@': 142}), 32: (1, {'@': 142}), 33: (1, {'@': 142}), 34: (1, {'@': 142}), 35: (1, {'@': 142}), 11: (1, {'@': 142}), 9: (1, {'@': 142}), 12: (1, {'@': 142}), 36: (1, {'@': 142}), 19: (1, {'@': 142}), 37: (1, {'@': 142}), 21: (1, {'@': 142}), 20: (1, {'@': 142}), 1: (1, {'@': 142}), 38: (1, {'@': 142}), 25: (1, {'@': 142}), 39: (1, {'@': 142}), 40: (1, {'@': 142}), 41: (1, {'@': 142}), 42: (1, {'@': 142}), 3: (1, {'@': 142}), 43: (1, {'@': 142}), 8: (1, {'@': 142}), 10: (1, {'@': 142}), 13: (1, {'@': 142}), 14: (1, {'@': 142}), 44: (1, {'@': 142}), 17: (1, {'@': 142}), 23: (1, {'@': 142}), 24: (1, {'@': 142}), 45: (1, {'@': 142}), 15: (1, {'@': 142}), 46: (1, {'@': 142}), 47: (1, {'@': 142}), 48: (1, {'@': 142}), 49: (1, {'@': 142}), 50: (1, {'@': 142}), 51: (1, {'@': 142}), 52: (1, {'@': 142}), 61: (1, {'@': 142}), 53: (1, {'@': 142}), 54: (1, {'@': 142}), 55: (1, {'@': 142}), 56: (1, {'@': 142}), 57: (1, {'@': 142}), 58: (1, {'@': 142}), 59: (1, {'@': 142}), 60: (1, {'@': 142})}, 130: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 84: (0, 44), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 131: {22: (0, 187)}, 132: {}, 133: {1: (1, {'@': 143}), 2: (1, {'@': 143}), 3: (1, {'@': 143}), 4: (1, {'@': 143}), 5: (1, {'@': 143}), 6: (1, {'@': 143}), 7: (1, {'@': 143}), 8: (1, {'@': 143}), 9: (1, {'@': 143}), 10: (1, {'@': 143}), 11: (1, {'@': 143}), 12: (1, {'@': 143}), 13: (1, {'@': 143}), 14: (1, {'@': 143}), 15: (1, {'@': 143}), 16: (1, {'@': 143}), 17: (1, {'@': 143}), 18: (1, {'@': 143}), 19: (1, {'@': 143}), 20: (1, {'@': 143}), 21: (1, {'@': 143}), 22: (1, {'@': 143}), 23: (1, {'@': 143}), 24: (1, {'@': 143}), 25: (1, {'@': 143}), 26: (1, {'@': 143}), 27: (1, {'@': 143}), 48: (1, {'@': 143}), 49: (1, {'@': 143}), 50: (1, {'@': 143}), 29: (1, {'@': 143}), 51: (1, {'@': 143}), 47: (1, {'@': 143}), 30: (1, {'@': 143}), 32: (1, {'@': 143}), 52: (1, {'@': 143}), 34: (1, {'@': 143}), 33: (1, {'@': 143}), 35: (1, {'@': 143}), 53: (1, {'@': 143}), 36: (1, {'@': 143}), 54: (1, {'@': 143}), 37: (1, {'@': 143}), 55: (1, {'@': 143}), 38: (1, {'@': 143}), 56: (1, {'@': 143}), 39: (1, {'@': 143}), 57: (1, {'@': 143}), 40: (1, {'@': 143}), 28: (1, {'@': 143}), 41: (1, {'@': 143}), 58: (1, {'@': 143}), 42: (1, {'@': 143}), 59: (1, {'@': 143}), 46: (1, {'@': 143}), 43: (1, {'@': 143}), 31: (1, {'@': 143}), 60: (1, {'@': 143}), 44: (1, {'@': 143}), 61: (1, {'@': 143}), 45: (1, {'@': 143})}, 134: {0: (0, 164)}, 135: {19: (0, 141), 23: (0, 177), 12: (0, 200), 24: (0, 120), 71: (0, 31), 10: (0, 83), 68: (0, 219), 8: (0, 86), 17: (0, 110), 21: (0, 93), 20: (0, 75), 25: (0, 205), 15: (0, 106), 76: (0, 189), 2: (0, 105), 14: (0, 229), 4: (0, 7), 1: (0, 60), 78: (0, 247), 82: (0, 49), 75: (0, 12), 11: (0, 137), 50: (1, {'@': 144}), 29: (1, {'@': 144}), 51: (1, {'@': 144}), 47: (1, {'@': 144}), 34: (1, {'@': 144}), 35: (1, {'@': 144}), 9: (1, {'@': 144}), 36: (1, {'@': 144}), 54: (1, {'@': 144}), 18: (1, {'@': 144}), 55: (1, {'@': 144}), 38: (1, {'@': 144}), 26: (1, {'@': 144}), 39: (1, {'@': 144}), 57: (1, {'@': 144}), 28: (1, {'@': 144}), 59: (1, {'@': 144}), 48: (1, {'@': 144}), 49: (1, {'@': 144}), 30: (1, {'@': 144}), 32: (1, {'@': 144}), 52: (1, {'@': 144}), 33: (1, {'@': 144}), 61: (1, {'@': 144}), 53: (1, {'@': 144}), 37: (1, {'@': 144}), 56: (1, {'@': 144}), 40: (1, {'@': 144}), 41: (1, {'@': 144}), 58: (1, {'@': 144}), 42: (1, {'@': 144}), 3: (1, {'@': 144}), 46: (1, {'@': 144}), 43: (1, {'@': 144}), 31: (1, {'@': 144}), 60: (1, {'@': 144}), 13: (1, {'@': 144}), 44: (1, {'@': 144}), 22: (1, {'@': 144}), 45: (1, {'@': 144})}, 136: {18: (0, 193), 86: (0, 154)}, 137: {2: (1, {'@': 145}), 4: (1, {'@': 145}), 86: (1, {'@': 145}), 8: (1, {'@': 145}), 10: (1, {'@': 145}), 11: (1, {'@': 145}), 12: (1, {'@': 145}), 14: (1, {'@': 145}), 17: (1, {'@': 145}), 18: (1, {'@': 145}), 19: (1, {'@': 145}), 20: (1, {'@': 145}), 21: (1, {'@': 145}), 24: (1, {'@': 145}), 23: (1, {'@': 145}), 1: (1, {'@': 145}), 25: (1, {'@': 145}), 15: (1, {'@': 145}), 40: (1, {'@': 145}), 41: (1, {'@': 145}), 42: (1, {'@': 145}), 3: (1, {'@': 145}), 43: (1, {'@': 145}), 33: (1, {'@': 145}), 9: (1, {'@': 145}), 13: (1, {'@': 145}), 37: (1, {'@': 145}), 87: (1, {'@': 145})}, 138: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 84: (0, 222), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 139: {42: (0, 5), 3: (0, 240), 70: (0, 64), 66: (0, 87), 80: (0, 239), 9: (0, 10), 40: (0, 68), 65: (0, 43), 77: (0, 71), 62: (0, 173), 37: (0, 30), 33: (0, 232), 43: (0, 94), 69: (0, 98), 41: (0, 125)}, 140: {18: (0, 230), 22: (0, 90), 28: (1, {'@': 146}), 29: (1, {'@': 146}), 30: (1, {'@': 146}), 31: (1, {'@': 146}), 2: (1, {'@': 146}), 4: (1, {'@': 146}), 32: (1, {'@': 146}), 33: (1, {'@': 146}), 34: (1, {'@': 146}), 35: (1, {'@': 146}), 11: (1, {'@': 146}), 9: (1, {'@': 146}), 12: (1, {'@': 146}), 36: (1, {'@': 146}), 19: (1, {'@': 146}), 37: (1, {'@': 146}), 21: (1, {'@': 146}), 20: (1, {'@': 146}), 1: (1, {'@': 146}), 38: (1, {'@': 146}), 25: (1, {'@': 146}), 39: (1, {'@': 146}), 40: (1, {'@': 146}), 41: (1, {'@': 146}), 42: (1, {'@': 146}), 3: (1, {'@': 146}), 43: (1, {'@': 146}), 8: (1, {'@': 146}), 10: (1, {'@': 146}), 13: (1, {'@': 146}), 14: (1, {'@': 146}), 44: (1, {'@': 146}), 17: (1, {'@': 146}), 23: (1, {'@': 146}), 24: (1, {'@': 146}), 45: (1, {'@': 146}), 15: (1, {'@': 146}), 46: (1, {'@': 146}), 47: (1, {'@': 146}), 48: (1, {'@': 146}), 49: (1, {'@': 146}), 50: (1, {'@': 146}), 51: (1, {'@': 146}), 52: (1, {'@': 146}), 61: (1, {'@': 146}), 53: (1, {'@': 146}), 54: (1, {'@': 146}), 55: (1, {'@': 146}), 56: (1, {'@': 146}), 57: (1, {'@': 146}), 58: (1, {'@': 146}), 59: (1, {'@': 146}), 60: (1, {'@': 146})}, 141: {11: (0, 241), 2: (1, {'@': 147}), 40: (1, {'@': 147}), 41: (1, {'@': 147}), 4: (1, {'@': 147}), 42: (1, {'@': 147}), 3: (1, {'@': 147}), 43: (1, {'@': 147}), 33: (1, {'@': 147}), 8: (1, {'@': 147}), 10: (1, {'@': 147}), 9: (1, {'@': 147}), 12: (1, {'@': 147}), 13: (1, {'@': 147}), 14: (1, {'@': 147}), 17: (1, {'@': 147}), 19: (1, {'@': 147}), 20: (1, {'@': 147}), 21: (1, {'@': 147}), 37: (1, {'@': 147}), 24: (1, {'@': 147}), 23: (1, {'@': 147}), 1: (1, {'@': 147}), 25: (1, {'@': 147}), 15: (1, {'@': 147}), 87: (1, {'@': 147}), 18: (1, {'@': 147}), 86: (1, {'@': 147})}, 142: {18: (0, 230), 22: (0, 90), 28: (1, {'@': 148}), 29: (1, {'@': 148}), 30: (1, {'@': 148}), 31: (1, {'@': 148}), 2: (1, {'@': 148}), 4: (1, {'@': 148}), 32: (1, {'@': 148}), 33: (1, {'@': 148}), 34: (1, {'@': 148}), 35: (1, {'@': 148}), 11: (1, {'@': 148}), 9: (1, {'@': 148}), 12: (1, {'@': 148}), 36: (1, {'@': 148}), 19: (1, {'@': 148}), 37: (1, {'@': 148}), 21: (1, {'@': 148}), 20: (1, {'@': 148}), 1: (1, {'@': 148}), 38: (1, {'@': 148}), 25: (1, {'@': 148}), 39: (1, {'@': 148}), 40: (1, {'@': 148}), 41: (1, {'@': 148}), 42: (1, {'@': 148}), 3: (1, {'@': 148}), 43: (1, {'@': 148}), 8: (1, {'@': 148}), 10: (1, {'@': 148}), 13: (1, {'@': 148}), 14: (1, {'@': 148}), 44: (1, {'@': 148}), 17: (1, {'@': 148}), 23: (1, {'@': 148}), 24: (1, {'@': 148}), 45: (1, {'@': 148}), 15: (1, {'@': 148}), 46: (1, {'@': 148}), 47: (1, {'@': 148}), 48: (1, {'@': 148}), 49: (1, {'@': 148}), 50: (1, {'@': 148}), 51: (1, {'@': 148}), 52: (1, {'@': 148}), 61: (1, {'@': 148}), 53: (1, {'@': 148}), 54: (1, {'@': 148}), 55: (1, {'@': 148}), 56: (1, {'@': 148}), 57: (1, {'@': 148}), 58: (1, {'@': 148}), 59: (1, {'@': 148}), 60: (1, {'@': 148})}, 143: {42: (0, 5), 3: (0, 240), 70: (0, 64), 66: (0, 87), 80: (0, 239), 9: (0, 10), 40: (0, 68), 69: (0, 158), 65: (0, 43), 62: (0, 173), 37: (0, 30), 33: (0, 232), 43: (0, 94), 41: (0, 125)}, 144: {50: (0, 61), 28: (0, 53)}, 145: {42: (0, 5), 3: (0, 240), 70: (0, 64), 66: (0, 87), 80: (0, 239), 9: (0, 10), 40: (0, 68), 65: (0, 43), 62: (0, 173), 37: (0, 30), 77: (0, 38), 33: (0, 232), 43: (0, 94), 69: (0, 98), 41: (0, 125)}, 146: {2: (1, {'@': 149}), 4: (1, {'@': 149}), 86: (1, {'@': 149}), 8: (1, {'@': 149}), 10: (1, {'@': 149}), 11: (1, {'@': 149}), 12: (1, {'@': 149}), 14: (1, {'@': 149}), 17: (1, {'@': 149}), 18: (1, {'@': 149}), 19: (1, {'@': 149}), 20: (1, {'@': 149}), 21: (1, {'@': 149}), 24: (1, {'@': 149}), 23: (1, {'@': 149}), 1: (1, {'@': 149}), 25: (1, {'@': 149}), 15: (1, {'@': 149}), 40: (1, {'@': 149}), 41: (1, {'@': 149}), 42: (1, {'@': 149}), 3: (1, {'@': 149}), 43: (1, {'@': 149}), 33: (1, {'@': 149}), 9: (1, {'@': 149}), 13: (1, {'@': 149}), 37: (1, {'@': 149}), 87: (1, {'@': 149})}, 147: {30: (0, 58), 93: (0, 70), 22: (0, 90), 28: (0, 215), 18: (0, 230)}, 148: {31: (0, 115)}, 149: {19: (0, 141), 23: (0, 177), 12: (0, 200), 24: (0, 120), 71: (0, 31), 10: (0, 83), 68: (0, 219), 8: (0, 86), 17: (0, 110), 21: (0, 93), 20: (0, 75), 25: (0, 205), 15: (0, 106), 76: (0, 189), 2: (0, 105), 14: (0, 229), 4: (0, 7), 1: (0, 60), 78: (0, 247), 82: (0, 49), 75: (0, 12), 11: (0, 137), 5: (1, {'@': 150}), 18: (1, {'@': 150}), 22: (1, {'@': 150}), 26: (1, {'@': 150}), 28: (1, {'@': 150}), 29: (1, {'@': 150}), 30: (1, {'@': 150}), 31: (1, {'@': 150}), 32: (1, {'@': 150}), 33: (1, {'@': 150}), 34: (1, {'@': 150}), 35: (1, {'@': 150}), 9: (1, {'@': 150}), 36: (1, {'@': 150}), 37: (1, {'@': 150}), 38: (1, {'@': 150}), 39: (1, {'@': 150}), 40: (1, {'@': 150}), 41: (1, {'@': 150}), 42: (1, {'@': 150}), 3: (1, {'@': 150}), 43: (1, {'@': 150}), 13: (1, {'@': 150}), 44: (1, {'@': 150}), 45: (1, {'@': 150}), 50: (1, {'@': 150}), 51: (1, {'@': 150}), 47: (1, {'@': 150}), 54: (1, {'@': 150}), 55: (1, {'@': 150}), 57: (1, {'@': 150}), 59: (1, {'@': 150}), 48: (1, {'@': 150}), 49: (1, {'@': 150}), 52: (1, {'@': 150}), 61: (1, {'@': 150}), 53: (1, {'@': 150}), 56: (1, {'@': 150}), 58: (1, {'@': 150}), 46: (1, {'@': 150}), 60: (1, {'@': 150})}, 150: {22: (0, 90), 18: (0, 230), 28: (1, {'@': 151}), 29: (1, {'@': 151}), 30: (1, {'@': 151}), 31: (1, {'@': 151}), 2: (1, {'@': 151}), 4: (1, {'@': 151}), 32: (1, {'@': 151}), 33: (1, {'@': 151}), 34: (1, {'@': 151}), 35: (1, {'@': 151}), 11: (1, {'@': 151}), 9: (1, {'@': 151}), 12: (1, {'@': 151}), 36: (1, {'@': 151}), 19: (1, {'@': 151}), 37: (1, {'@': 151}), 21: (1, {'@': 151}), 20: (1, {'@': 151}), 1: (1, {'@': 151}), 38: (1, {'@': 151}), 25: (1, {'@': 151}), 39: (1, {'@': 151}), 40: (1, {'@': 151}), 41: (1, {'@': 151}), 42: (1, {'@': 151}), 3: (1, {'@': 151}), 43: (1, {'@': 151}), 8: (1, {'@': 151}), 10: (1, {'@': 151}), 13: (1, {'@': 151}), 14: (1, {'@': 151}), 44: (1, {'@': 151}), 17: (1, {'@': 151}), 23: (1, {'@': 151}), 24: (1, {'@': 151}), 45: (1, {'@': 151}), 15: (1, {'@': 151}), 46: (1, {'@': 151}), 47: (1, {'@': 151}), 48: (1, {'@': 151}), 49: (1, {'@': 151}), 50: (1, {'@': 151}), 51: (1, {'@': 151}), 52: (1, {'@': 151}), 61: (1, {'@': 151}), 53: (1, {'@': 151}), 54: (1, {'@': 151}), 55: (1, {'@': 151}), 56: (1, {'@': 151}), 57: (1, {'@': 151}), 58: (1, {'@': 151}), 59: (1, {'@': 151}), 60: (1, {'@': 151})}, 151: {2: (1, {'@': 152}), 4: (1, {'@': 152}), 5: (1, {'@': 152}), 6: (1, {'@': 152}), 7: (1, {'@': 152}), 8: (1, {'@': 152}), 10: (1, {'@': 152}), 11: (1, {'@': 152}), 12: (1, {'@': 152}), 13: (1, {'@': 152}), 14: (1, {'@': 152}), 16: (1, {'@': 152}), 17: (1, {'@': 152}), 18: (1, {'@': 152}), 19: (1, {'@': 152}), 20: (1, {'@': 152}), 21: (1, {'@': 152}), 22: (1, {'@': 152}), 24: (1, {'@': 152}), 27: (1, {'@': 152}), 23: (1, {'@': 152}), 1: (1, {'@': 152}), 25: (1, {'@': 152}), 26: (1, {'@': 152}), 15: (1, {'@': 152}), 48: (1, {'@': 152}), 49: (1, {'@': 152}), 50: (1, {'@': 152}), 29: (1, {'@': 152}), 45: (1, {'@': 152}), 51: (1, {'@': 152}), 47: (1, {'@': 152}), 30: (1, {'@': 152}), 32: (1, {'@': 152}), 52: (1, {'@': 152}), 34: (1, {'@': 152}), 33: (1, {'@': 152}), 35: (1, {'@': 152}), 53: (1, {'@': 152}), 9: (1, {'@': 152}), 36: (1, {'@': 152}), 54: (1, {'@': 152}), 37: (1, {'@': 152}), 55: (1, {'@': 152}), 38: (1, {'@': 152}), 56: (1, {'@': 152}), 39: (1, {'@': 152}), 57: (1, {'@': 152}), 40: (1, {'@': 152}), 28: (1, {'@': 152}), 41: (1, {'@': 152}), 58: (1, {'@': 152}), 42: (1, {'@': 152}), 3: (1, {'@': 152}), 59: (1, {'@': 152}), 46: (1, {'@': 152}), 43: (1, {'@': 152}), 31: (1, {'@': 152}), 60: (1, {'@': 152}), 44: (1, {'@': 152}), 61: (1, {'@': 152})}, 152: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 84: (0, 147), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 153: {3: (0, 240), 80: (0, 239), 42: (0, 5), 40: (0, 68), 63: (0, 112), 9: (0, 10), 79: (0, 32), 65: (0, 43), 66: (0, 87), 62: (0, 173), 37: (0, 30), 33: (0, 232), 43: (0, 94), 69: (0, 98), 77: (0, 123), 70: (0, 64), 41: (0, 125)}, 154: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 84: (0, 140), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 155: {2: (1, {'@': 153}), 4: (1, {'@': 153}), 51: (1, {'@': 153}), 32: (1, {'@': 153}), 33: (1, {'@': 153}), 34: (1, {'@': 153}), 35: (1, {'@': 153}), 53: (1, {'@': 153}), 11: (1, {'@': 153}), 9: (1, {'@': 153}), 12: (1, {'@': 153}), 36: (1, {'@': 153}), 54: (1, {'@': 153}), 18: (1, {'@': 153}), 19: (1, {'@': 153}), 37: (1, {'@': 153}), 21: (1, {'@': 153}), 55: (1, {'@': 153}), 20: (1, {'@': 153}), 1: (1, {'@': 153}), 38: (1, {'@': 153}), 25: (1, {'@': 153}), 56: (1, {'@': 153}), 39: (1, {'@': 153}), 40: (1, {'@': 153}), 41: (1, {'@': 153}), 58: (1, {'@': 153}), 42: (1, {'@': 153}), 3: (1, {'@': 153}), 59: (1, {'@': 153}), 43: (1, {'@': 153}), 8: (1, {'@': 153}), 10: (1, {'@': 153}), 13: (1, {'@': 153}), 14: (1, {'@': 153}), 17: (1, {'@': 153}), 23: (1, {'@': 153}), 24: (1, {'@': 153}), 15: (1, {'@': 153})}, 156: {3: (0, 240), 79: (0, 217), 80: (0, 239), 42: (0, 5), 40: (0, 68), 72: (0, 56), 63: (0, 112), 9: (0, 10), 65: (0, 43), 66: (0, 87), 62: (0, 173), 81: (0, 175), 37: (0, 30), 33: (0, 232), 43: (0, 94), 69: (0, 98), 77: (0, 123), 70: (0, 64), 41: (0, 125)}, 157: {2: (1, {'@': 154}), 4: (1, {'@': 154}), 86: (1, {'@': 154}), 8: (1, {'@': 154}), 10: (1, {'@': 154}), 11: (1, {'@': 154}), 12: (1, {'@': 154}), 14: (1, {'@': 154}), 17: (1, {'@': 154}), 18: (1, {'@': 154}), 19: (1, {'@': 154}), 20: (1, {'@': 154}), 21: (1, {'@': 154}), 24: (1, {'@': 154}), 23: (1, {'@': 154}), 1: (1, {'@': 154}), 25: (1, {'@': 154}), 15: (1, {'@': 154}), 40: (1, {'@': 154}), 41: (1, {'@': 154}), 42: (1, {'@': 154}), 3: (1, {'@': 154}), 43: (1, {'@': 154}), 33: (1, {'@': 154}), 9: (1, {'@': 154}), 13: (1, {'@': 154}), 37: (1, {'@': 154}), 87: (1, {'@': 154})}, 158: {29: (1, {'@': 155}), 50: (1, {'@': 155}), 51: (1, {'@': 155}), 47: (1, {'@': 155}), 34: (1, {'@': 155}), 35: (1, {'@': 155}), 9: (1, {'@': 155}), 36: (1, {'@': 155}), 54: (1, {'@': 155}), 18: (1, {'@': 155}), 19: (1, {'@': 155}), 20: (1, {'@': 155}), 27: (1, {'@': 155}), 55: (1, {'@': 155}), 38: (1, {'@': 155}), 26: (1, {'@': 155}), 39: (1, {'@': 155}), 57: (1, {'@': 155}), 28: (1, {'@': 155}), 59: (1, {'@': 155}), 5: (1, {'@': 155}), 6: (1, {'@': 155}), 8: (1, {'@': 155}), 10: (1, {'@': 155}), 24: (1, {'@': 155}), 2: (1, {'@': 155}), 48: (1, {'@': 155}), 4: (1, {'@': 155}), 49: (1, {'@': 155}), 30: (1, {'@': 155}), 32: (1, {'@': 155}), 52: (1, {'@': 155}), 33: (1, {'@': 155}), 61: (1, {'@': 155}), 53: (1, {'@': 155}), 11: (1, {'@': 155}), 12: (1, {'@': 155}), 37: (1, {'@': 155}), 21: (1, {'@': 155}), 1: (1, {'@': 155}), 25: (1, {'@': 155}), 56: (1, {'@': 155}), 40: (1, {'@': 155}), 41: (1, {'@': 155}), 58: (1, {'@': 155}), 42: (1, {'@': 155}), 3: (1, {'@': 155}), 46: (1, {'@': 155}), 43: (1, {'@': 155}), 31: (1, {'@': 155}), 60: (1, {'@': 155}), 13: (1, {'@': 155}), 14: (1, {'@': 155}), 16: (1, {'@': 155}), 17: (1, {'@': 155}), 44: (1, {'@': 155}), 22: (1, {'@': 155}), 23: (1, {'@': 155}), 45: (1, {'@': 155}), 15: (1, {'@': 155})}, 159: {61: (0, 201), 18: (0, 230), 22: (0, 90)}, 160: {1: (1, {'@': 156}), 2: (1, {'@': 156}), 3: (1, {'@': 156}), 4: (1, {'@': 156}), 5: (1, {'@': 156}), 6: (1, {'@': 156}), 7: (1, {'@': 156}), 8: (1, {'@': 156}), 9: (1, {'@': 156}), 10: (1, {'@': 156}), 11: (1, {'@': 156}), 12: (1, {'@': 156}), 13: (1, {'@': 156}), 14: (1, {'@': 156}), 15: (1, {'@': 156}), 16: (1, {'@': 156}), 17: (1, {'@': 156}), 18: (1, {'@': 156}), 19: (1, {'@': 156}), 20: (1, {'@': 156}), 21: (1, {'@': 156}), 22: (1, {'@': 156}), 23: (1, {'@': 156}), 24: (1, {'@': 156}), 25: (1, {'@': 156}), 26: (1, {'@': 156}), 27: (1, {'@': 156}), 48: (1, {'@': 156}), 49: (1, {'@': 156}), 50: (1, {'@': 156}), 29: (1, {'@': 156}), 51: (1, {'@': 156}), 47: (1, {'@': 156}), 30: (1, {'@': 156}), 32: (1, {'@': 156}), 52: (1, {'@': 156}), 34: (1, {'@': 156}), 33: (1, {'@': 156}), 35: (1, {'@': 156}), 53: (1, {'@': 156}), 36: (1, {'@': 156}), 54: (1, {'@': 156}), 37: (1, {'@': 156}), 55: (1, {'@': 156}), 38: (1, {'@': 156}), 56: (1, {'@': 156}), 39: (1, {'@': 156}), 57: (1, {'@': 156}), 40: (1, {'@': 156}), 28: (1, {'@': 156}), 41: (1, {'@': 156}), 58: (1, {'@': 156}), 42: (1, {'@': 156}), 59: (1, {'@': 156}), 46: (1, {'@': 156}), 43: (1, {'@': 156}), 31: (1, {'@': 156}), 60: (1, {'@': 156}), 44: (1, {'@': 156}), 61: (1, {'@': 156}), 45: (1, {'@': 156})}, 161: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 84: (0, 242), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 162: {46: (0, 151), 18: (0, 230), 22: (0, 90)}, 163: {3: (0, 240), 79: (0, 217), 80: (0, 239), 42: (0, 5), 40: (0, 68), 63: (0, 112), 9: (0, 10), 65: (0, 43), 66: (0, 87), 62: (0, 173), 37: (0, 30), 33: (0, 232), 43: (0, 94), 69: (0, 98), 77: (0, 123), 70: (0, 64), 72: (0, 23), 41: (0, 125)}, 164: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 84: (0, 19), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 165: {22: (0, 90), 28: (0, 215), 93: (0, 238), 18: (0, 230), 46: (0, 194)}, 166: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 84: (0, 113), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 167: {5: (0, 8), 18: (1, {'@': 157}), 22: (1, {'@': 157}), 29: (1, {'@': 157}), 28: (1, {'@': 157}), 30: (1, {'@': 157}), 31: (1, {'@': 157}), 2: (1, {'@': 157}), 4: (1, {'@': 157}), 32: (1, {'@': 157}), 33: (1, {'@': 157}), 34: (1, {'@': 157}), 35: (1, {'@': 157}), 11: (1, {'@': 157}), 9: (1, {'@': 157}), 12: (1, {'@': 157}), 36: (1, {'@': 157}), 19: (1, {'@': 157}), 37: (1, {'@': 157}), 21: (1, {'@': 157}), 20: (1, {'@': 157}), 1: (1, {'@': 157}), 38: (1, {'@': 157}), 25: (1, {'@': 157}), 39: (1, {'@': 157}), 40: (1, {'@': 157}), 41: (1, {'@': 157}), 42: (1, {'@': 157}), 3: (1, {'@': 157}), 43: (1, {'@': 157}), 8: (1, {'@': 157}), 10: (1, {'@': 157}), 13: (1, {'@': 157}), 14: (1, {'@': 157}), 44: (1, {'@': 157}), 17: (1, {'@': 157}), 23: (1, {'@': 157}), 24: (1, {'@': 157}), 45: (1, {'@': 157}), 15: (1, {'@': 157}), 46: (1, {'@': 157}), 47: (1, {'@': 157}), 48: (1, {'@': 157}), 49: (1, {'@': 157}), 50: (1, {'@': 157}), 51: (1, {'@': 157}), 52: (1, {'@': 157}), 61: (1, {'@': 157}), 53: (1, {'@': 157}), 54: (1, {'@': 157}), 55: (1, {'@': 157}), 56: (1, {'@': 157}), 57: (1, {'@': 157}), 58: (1, {'@': 157}), 59: (1, {'@': 157}), 60: (1, {'@': 157})}, 168: {2: (1, {'@': 158}), 4: (1, {'@': 158}), 5: (1, {'@': 158}), 6: (1, {'@': 158}), 7: (1, {'@': 158}), 8: (1, {'@': 158}), 10: (1, {'@': 158}), 11: (1, {'@': 158}), 12: (1, {'@': 158}), 13: (1, {'@': 158}), 14: (1, {'@': 158}), 16: (1, {'@': 158}), 17: (1, {'@': 158}), 18: (1, {'@': 158}), 19: (1, {'@': 158}), 20: (1, {'@': 158}), 21: (1, {'@': 158}), 22: (1, {'@': 158}), 24: (1, {'@': 158}), 27: (1, {'@': 158}), 23: (1, {'@': 158}), 1: (1, {'@': 158}), 25: (1, {'@': 158}), 26: (1, {'@': 158}), 15: (1, {'@': 158}), 48: (1, {'@': 158}), 49: (1, {'@': 158}), 50: (1, {'@': 158}), 29: (1, {'@': 158}), 45: (1, {'@': 158}), 51: (1, {'@': 158}), 47: (1, {'@': 158}), 30: (1, {'@': 158}), 32: (1, {'@': 158}), 52: (1, {'@': 158}), 34: (1, {'@': 158}), 33: (1, {'@': 158}), 35: (1, {'@': 158}), 53: (1, {'@': 158}), 9: (1, {'@': 158}), 36: (1, {'@': 158}), 54: (1, {'@': 158}), 37: (1, {'@': 158}), 55: (1, {'@': 158}), 38: (1, {'@': 158}), 56: (1, {'@': 158}), 39: (1, {'@': 158}), 57: (1, {'@': 158}), 40: (1, {'@': 158}), 28: (1, {'@': 158}), 41: (1, {'@': 158}), 58: (1, {'@': 158}), 42: (1, {'@': 158}), 3: (1, {'@': 158}), 59: (1, {'@': 158}), 46: (1, {'@': 158}), 43: (1, {'@': 158}), 31: (1, {'@': 158}), 60: (1, {'@': 158}), 44: (1, {'@': 158}), 61: (1, {'@': 158})}, 169: {19: (0, 141), 23: (0, 177), 12: (0, 200), 24: (0, 120), 71: (0, 31), 10: (0, 83), 68: (0, 219), 8: (0, 86), 17: (0, 110), 21: (0, 93), 20: (0, 75), 25: (0, 205), 15: (0, 106), 76: (0, 189), 2: (0, 105), 14: (0, 229), 4: (0, 7), 1: (0, 60), 78: (0, 247), 82: (0, 49), 75: (0, 12), 11: (0, 137), 18: (1, {'@': 159}), 22: (1, {'@': 159}), 29: (1, {'@': 159}), 28: (1, {'@': 159}), 30: (1, {'@': 159}), 31: (1, {'@': 159}), 32: (1, {'@': 159}), 33: (1, {'@': 159}), 34: (1, {'@': 159}), 35: (1, {'@': 159}), 9: (1, {'@': 159}), 36: (1, {'@': 159}), 37: (1, {'@': 159}), 38: (1, {'@': 159}), 39: (1, {'@': 159}), 40: (1, {'@': 159}), 41: (1, {'@': 159}), 42: (1, {'@': 159}), 3: (1, {'@': 159}), 43: (1, {'@': 159}), 13: (1, {'@': 159}), 44: (1, {'@': 159}), 45: (1, {'@': 159}), 46: (1, {'@': 159}), 47: (1, {'@': 159}), 48: (1, {'@': 159}), 49: (1, {'@': 159}), 50: (1, {'@': 159}), 51: (1, {'@': 159}), 52: (1, {'@': 159}), 61: (1, {'@': 159}), 53: (1, {'@': 159}), 54: (1, {'@': 159}), 55: (1, {'@': 159}), 56: (1, {'@': 159}), 57: (1, {'@': 159}), 58: (1, {'@': 159}), 59: (1, {'@': 159}), 60: (1, {'@': 159})}, 170: {3: (0, 240), 79: (0, 217), 80: (0, 239), 81: (0, 89), 42: (0, 5), 40: (0, 68), 72: (0, 56), 63: (0, 112), 64: (0, 223), 9: (0, 10), 65: (0, 43), 66: (0, 87), 62: (0, 173), 37: (0, 30), 33: (0, 232), 67: (0, 228), 43: (0, 94), 69: (0, 98), 77: (0, 123), 70: (0, 64), 13: (0, 156), 41: (0, 125)}, 171: {44: (0, 127)}, 172: {57: (0, 199), 44: (0, 42)}, 173: {2: (1, {'@': 66}), 48: (1, {'@': 66}), 4: (1, {'@': 66}), 49: (1, {'@': 66}), 50: (1, {'@': 66}), 29: (1, {'@': 66}), 51: (1, {'@': 66}), 47: (1, {'@': 66}), 30: (1, {'@': 66}), 32: (1, {'@': 66}), 7: (1, {'@': 66}), 52: (1, {'@': 66}), 34: (1, {'@': 66}), 33: (1, {'@': 66}), 35: (1, {'@': 66}), 53: (1, {'@': 66}), 11: (1, {'@': 66}), 9: (1, {'@': 66}), 15: (1, {'@': 66}), 12: (1, {'@': 66}), 36: (1, {'@': 66}), 54: (1, {'@': 66}), 18: (1, {'@': 66}), 19: (1, {'@': 66}), 20: (1, {'@': 66}), 37: (1, {'@': 66}), 55: (1, {'@': 66}), 21: (1, {'@': 66}), 1: (1, {'@': 66}), 38: (1, {'@': 66}), 26: (1, {'@': 66}), 25: (1, {'@': 66}), 56: (1, {'@': 66}), 39: (1, {'@': 66}), 57: (1, {'@': 66}), 40: (1, {'@': 66}), 28: (1, {'@': 66}), 41: (1, {'@': 66}), 58: (1, {'@': 66}), 3: (1, {'@': 66}), 42: (1, {'@': 66}), 59: (1, {'@': 66}), 5: (1, {'@': 66}), 46: (1, {'@': 66}), 43: (1, {'@': 66}), 6: (1, {'@': 66}), 31: (1, {'@': 66}), 23: (1, {'@': 66}), 8: (1, {'@': 66}), 10: (1, {'@': 66}), 60: (1, {'@': 66}), 13: (1, {'@': 66}), 14: (1, {'@': 66}), 16: (1, {'@': 66}), 17: (1, {'@': 66}), 44: (1, {'@': 66}), 22: (1, {'@': 66}), 61: (1, {'@': 66}), 24: (1, {'@': 66}), 45: (1, {'@': 66}), 27: (1, {'@': 66})}, 174: {1: (1, {'@': 160}), 2: (1, {'@': 160}), 3: (1, {'@': 160}), 4: (1, {'@': 160}), 5: (1, {'@': 160}), 6: (1, {'@': 160}), 7: (1, {'@': 160}), 8: (1, {'@': 160}), 9: (1, {'@': 160}), 10: (1, {'@': 160}), 11: (1, {'@': 160}), 12: (1, {'@': 160}), 13: (1, {'@': 160}), 14: (1, {'@': 160}), 15: (1, {'@': 160}), 16: (1, {'@': 160}), 17: (1, {'@': 160}), 18: (1, {'@': 160}), 19: (1, {'@': 160}), 20: (1, {'@': 160}), 21: (1, {'@': 160}), 22: (1, {'@': 160}), 23: (1, {'@': 160}), 24: (1, {'@': 160}), 25: (1, {'@': 160}), 26: (1, {'@': 160}), 27: (1, {'@': 160}), 48: (1, {'@': 160}), 49: (1, {'@': 160}), 50: (1, {'@': 160}), 29: (1, {'@': 160}), 51: (1, {'@': 160}), 47: (1, {'@': 160}), 30: (1, {'@': 160}), 32: (1, {'@': 160}), 52: (1, {'@': 160}), 34: (1, {'@': 160}), 33: (1, {'@': 160}), 35: (1, {'@': 160}), 53: (1, {'@': 160}), 36: (1, {'@': 160}), 54: (1, {'@': 160}), 37: (1, {'@': 160}), 55: (1, {'@': 160}), 38: (1, {'@': 160}), 56: (1, {'@': 160}), 39: (1, {'@': 160}), 57: (1, {'@': 160}), 40: (1, {'@': 160}), 28: (1, {'@': 160}), 41: (1, {'@': 160}), 58: (1, {'@': 160}), 42: (1, {'@': 160}), 59: (1, {'@': 160}), 46: (1, {'@': 160}), 43: (1, {'@': 160}), 31: (1, {'@': 160}), 60: (1, {'@': 160}), 44: (1, {'@': 160}), 61: (1, {'@': 160}), 45: (1, {'@': 160})}, 175: {2: (1, {'@': 161}), 4: (1, {'@': 161}), 5: (1, {'@': 161}), 8: (1, {'@': 161}), 10: (1, {'@': 161}), 11: (1, {'@': 161}), 12: (1, {'@': 161}), 14: (1, {'@': 161}), 17: (1, {'@': 161}), 18: (1, {'@': 161}), 19: (1, {'@': 161}), 20: (1, {'@': 161}), 21: (1, {'@': 161}), 22: (1, {'@': 161}), 24: (1, {'@': 161}), 23: (1, {'@': 161}), 1: (1, {'@': 161}), 25: (1, {'@': 161}), 26: (1, {'@': 161}), 15: (1, {'@': 161}), 28: (1, {'@': 161}), 29: (1, {'@': 161}), 30: (1, {'@': 161}), 31: (1, {'@': 161}), 32: (1, {'@': 161}), 33: (1, {'@': 161}), 34: (1, {'@': 161}), 35: (1, {'@': 161}), 9: (1, {'@': 161}), 36: (1, {'@': 161}), 37: (1, {'@': 161}), 38: (1, {'@': 161}), 39: (1, {'@': 161}), 40: (1, {'@': 161}), 41: (1, {'@': 161}), 42: (1, {'@': 161}), 3: (1, {'@': 161}), 43: (1, {'@': 161}), 13: (1, {'@': 161}), 44: (1, {'@': 161}), 45: (1, {'@': 161}), 48: (1, {'@': 161}), 49: (1, {'@': 161}), 50: (1, {'@': 161}), 51: (1, {'@': 161}), 47: (1, {'@': 161}), 52: (1, {'@': 161}), 53: (1, {'@': 161}), 54: (1, {'@': 161}), 55: (1, {'@': 161}), 56: (1, {'@': 161}), 57: (1, {'@': 161}), 58: (1, {'@': 161}), 59: (1, {'@': 161}), 46: (1, {'@': 161}), 60: (1, {'@': 161}), 61: (1, {'@': 161})}, 176: {1: (1, {'@': 162}), 2: (1, {'@': 162}), 3: (1, {'@': 162}), 4: (1, {'@': 162}), 5: (1, {'@': 162}), 6: (1, {'@': 162}), 7: (1, {'@': 162}), 8: (1, {'@': 162}), 9: (1, {'@': 162}), 10: (1, {'@': 162}), 11: (1, {'@': 162}), 12: (1, {'@': 162}), 13: (1, {'@': 162}), 14: (1, {'@': 162}), 15: (1, {'@': 162}), 16: (1, {'@': 162}), 17: (1, {'@': 162}), 18: (1, {'@': 162}), 19: (1, {'@': 162}), 20: (1, {'@': 162}), 21: (1, {'@': 162}), 22: (1, {'@': 162}), 23: (1, {'@': 162}), 24: (1, {'@': 162}), 25: (1, {'@': 162}), 26: (1, {'@': 162}), 27: (1, {'@': 162}), 48: (1, {'@': 162}), 49: (1, {'@': 162}), 50: (1, {'@': 162}), 29: (1, {'@': 162}), 51: (1, {'@': 162}), 47: (1, {'@': 162}), 30: (1, {'@': 162}), 32: (1, {'@': 162}), 52: (1, {'@': 162}), 34: (1, {'@': 162}), 33: (1, {'@': 162}), 35: (1, {'@': 162}), 53: (1, {'@': 162}), 36: (1, {'@': 162}), 54: (1, {'@': 162}), 37: (1, {'@': 162}), 55: (1, {'@': 162}), 38: (1, {'@': 162}), 56: (1, {'@': 162}), 39: (1, {'@': 162}), 57: (1, {'@': 162}), 40: (1, {'@': 162}), 28: (1, {'@': 162}), 41: (1, {'@': 162}), 58: (1, {'@': 162}), 42: (1, {'@': 162}), 59: (1, {'@': 162}), 46: (1, {'@': 162}), 43: (1, {'@': 162}), 31: (1, {'@': 162}), 60: (1, {'@': 162}), 44: (1, {'@': 162}), 61: (1, {'@': 162}), 45: (1, {'@': 162})}, 177: {2: (1, {'@': 163}), 4: (1, {'@': 163}), 86: (1, {'@': 163}), 8: (1, {'@': 163}), 10: (1, {'@': 163}), 11: (1, {'@': 163}), 12: (1, {'@': 163}), 14: (1, {'@': 163}), 17: (1, {'@': 163}), 18: (1, {'@': 163}), 19: (1, {'@': 163}), 20: (1, {'@': 163}), 21: (1, {'@': 163}), 24: (1, {'@': 163}), 23: (1, {'@': 163}), 1: (1, {'@': 163}), 25: (1, {'@': 163}), 15: (1, {'@': 163}), 40: (1, {'@': 163}), 41: (1, {'@': 163}), 42: (1, {'@': 163}), 3: (1, {'@': 163}), 43: (1, {'@': 163}), 33: (1, {'@': 163}), 9: (1, {'@': 163}), 13: (1, {'@': 163}), 37: (1, {'@': 163}), 87: (1, {'@': 163})}, 178: {26: (0, 185), 18: (1, {'@': 164}), 22: (1, {'@': 164}), 29: (1, {'@': 164}), 28: (1, {'@': 164}), 30: (1, {'@': 164}), 31: (1, {'@': 164}), 2: (1, {'@': 164}), 4: (1, {'@': 164}), 32: (1, {'@': 164}), 33: (1, {'@': 164}), 34: (1, {'@': 164}), 35: (1, {'@': 164}), 11: (1, {'@': 164}), 9: (1, {'@': 164}), 12: (1, {'@': 164}), 36: (1, {'@': 164}), 19: (1, {'@': 164}), 37: (1, {'@': 164}), 21: (1, {'@': 164}), 20: (1, {'@': 164}), 1: (1, {'@': 164}), 38: (1, {'@': 164}), 25: (1, {'@': 164}), 39: (1, {'@': 164}), 40: (1, {'@': 164}), 41: (1, {'@': 164}), 42: (1, {'@': 164}), 3: (1, {'@': 164}), 43: (1, {'@': 164}), 8: (1, {'@': 164}), 10: (1, {'@': 164}), 13: (1, {'@': 164}), 14: (1, {'@': 164}), 44: (1, {'@': 164}), 17: (1, {'@': 164}), 23: (1, {'@': 164}), 24: (1, {'@': 164}), 45: (1, {'@': 164}), 15: (1, {'@': 164}), 46: (1, {'@': 164}), 47: (1, {'@': 164}), 48: (1, {'@': 164}), 49: (1, {'@': 164}), 50: (1, {'@': 164}), 51: (1, {'@': 164}), 52: (1, {'@': 164}), 61: (1, {'@': 164}), 53: (1, {'@': 164}), 54: (1, {'@': 164}), 55: (1, {'@': 164}), 56: (1, {'@': 164}), 57: (1, {'@': 164}), 58: (1, {'@': 164}), 59: (1, {'@': 164}), 60: (1, {'@': 164})}, 179: {2: (1, {'@': 165}), 4: (1, {'@': 165}), 51: (1, {'@': 165}), 32: (1, {'@': 165}), 33: (1, {'@': 165}), 34: (1, {'@': 165}), 35: (1, {'@': 165}), 53: (1, {'@': 165}), 11: (1, {'@': 165}), 9: (1, {'@': 165}), 12: (1, {'@': 165}), 36: (1, {'@': 165}), 54: (1, {'@': 165}), 18: (1, {'@': 165}), 19: (1, {'@': 165}), 37: (1, {'@': 165}), 21: (1, {'@': 165}), 55: (1, {'@': 165}), 20: (1, {'@': 165}), 1: (1, {'@': 165}), 38: (1, {'@': 165}), 25: (1, {'@': 165}), 56: (1, {'@': 165}), 39: (1, {'@': 165}), 40: (1, {'@': 165}), 41: (1, {'@': 165}), 58: (1, {'@': 165}), 42: (1, {'@': 165}), 3: (1, {'@': 165}), 59: (1, {'@': 165}), 43: (1, {'@': 165}), 8: (1, {'@': 165}), 10: (1, {'@': 165}), 13: (1, {'@': 165}), 14: (1, {'@': 165}), 17: (1, {'@': 165}), 23: (1, {'@': 165}), 24: (1, {'@': 165}), 15: (1, {'@': 165})}, 180: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 84: (0, 108), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 181: {2: (1, {'@': 166}), 4: (1, {'@': 166}), 51: (1, {'@': 166}), 32: (1, {'@': 166}), 33: (1, {'@': 166}), 34: (1, {'@': 166}), 35: (1, {'@': 166}), 53: (1, {'@': 166}), 11: (1, {'@': 166}), 9: (1, {'@': 166}), 12: (1, {'@': 166}), 36: (1, {'@': 166}), 54: (1, {'@': 166}), 18: (1, {'@': 166}), 19: (1, {'@': 166}), 37: (1, {'@': 166}), 21: (1, {'@': 166}), 55: (1, {'@': 166}), 20: (1, {'@': 166}), 1: (1, {'@': 166}), 38: (1, {'@': 166}), 25: (1, {'@': 166}), 56: (1, {'@': 166}), 39: (1, {'@': 166}), 40: (1, {'@': 166}), 41: (1, {'@': 166}), 58: (1, {'@': 166}), 42: (1, {'@': 166}), 3: (1, {'@': 166}), 59: (1, {'@': 166}), 43: (1, {'@': 166}), 8: (1, {'@': 166}), 10: (1, {'@': 166}), 13: (1, {'@': 166}), 14: (1, {'@': 166}), 17: (1, {'@': 166}), 23: (1, {'@': 166}), 24: (1, {'@': 166}), 15: (1, {'@': 166})}, 182: {40: (0, 68), 87: (0, 212), 62: (0, 131)}, 183: {19: (0, 141), 23: (0, 177), 12: (0, 200), 24: (0, 120), 71: (0, 31), 10: (0, 83), 68: (0, 219), 8: (0, 86), 17: (0, 110), 21: (0, 93), 20: (0, 75), 25: (0, 205), 15: (0, 106), 76: (0, 189), 2: (0, 105), 14: (0, 229), 4: (0, 7), 1: (0, 60), 78: (0, 247), 82: (0, 49), 75: (0, 12), 11: (0, 137), 50: (1, {'@': 167}), 29: (1, {'@': 167}), 51: (1, {'@': 167}), 47: (1, {'@': 167}), 34: (1, {'@': 167}), 35: (1, {'@': 167}), 9: (1, {'@': 167}), 36: (1, {'@': 167}), 54: (1, {'@': 167}), 18: (1, {'@': 167}), 55: (1, {'@': 167}), 38: (1, {'@': 167}), 26: (1, {'@': 167}), 39: (1, {'@': 167}), 57: (1, {'@': 167}), 28: (1, {'@': 167}), 59: (1, {'@': 167}), 48: (1, {'@': 167}), 49: (1, {'@': 167}), 30: (1, {'@': 167}), 32: (1, {'@': 167}), 52: (1, {'@': 167}), 33: (1, {'@': 167}), 61: (1, {'@': 167}), 53: (1, {'@': 167}), 37: (1, {'@': 167}), 56: (1, {'@': 167}), 40: (1, {'@': 167}), 41: (1, {'@': 167}), 58: (1, {'@': 167}), 42: (1, {'@': 167}), 3: (1, {'@': 167}), 46: (1, {'@': 167}), 43: (1, {'@': 167}), 31: (1, {'@': 167}), 60: (1, {'@': 167}), 13: (1, {'@': 167}), 44: (1, {'@': 167}), 22: (1, {'@': 167}), 45: (1, {'@': 167})}, 184: {50: (1, {'@': 168}), 29: (1, {'@': 168}), 51: (1, {'@': 168}), 47: (1, {'@': 168}), 34: (1, {'@': 168}), 35: (1, {'@': 168}), 9: (1, {'@': 168}), 36: (1, {'@': 168}), 54: (1, {'@': 168}), 18: (1, {'@': 168}), 19: (1, {'@': 168}), 20: (1, {'@': 168}), 55: (1, {'@': 168}), 38: (1, {'@': 168}), 26: (1, {'@': 168}), 39: (1, {'@': 168}), 57: (1, {'@': 168}), 28: (1, {'@': 168}), 59: (1, {'@': 168}), 5: (1, {'@': 168}), 6: (1, {'@': 168}), 8: (1, {'@': 168}), 10: (1, {'@': 168}), 24: (1, {'@': 168}), 2: (1, {'@': 168}), 48: (1, {'@': 168}), 4: (1, {'@': 168}), 49: (1, {'@': 168}), 30: (1, {'@': 168}), 32: (1, {'@': 168}), 52: (1, {'@': 168}), 33: (1, {'@': 168}), 61: (1, {'@': 168}), 53: (1, {'@': 168}), 11: (1, {'@': 168}), 15: (1, {'@': 168}), 12: (1, {'@': 168}), 37: (1, {'@': 168}), 21: (1, {'@': 168}), 1: (1, {'@': 168}), 25: (1, {'@': 168}), 56: (1, {'@': 168}), 40: (1, {'@': 168}), 41: (1, {'@': 168}), 58: (1, {'@': 168}), 42: (1, {'@': 168}), 3: (1, {'@': 168}), 46: (1, {'@': 168}), 43: (1, {'@': 168}), 31: (1, {'@': 168}), 60: (1, {'@': 168}), 13: (1, {'@': 168}), 14: (1, {'@': 168}), 17: (1, {'@': 168}), 44: (1, {'@': 168}), 22: (1, {'@': 168}), 23: (1, {'@': 168}), 45: (1, {'@': 168}), 27: (1, {'@': 168})}, 185: {3: (0, 240), 79: (0, 217), 80: (0, 239), 81: (0, 89), 42: (0, 5), 40: (0, 68), 72: (0, 56), 63: (0, 112), 64: (0, 135), 9: (0, 10), 65: (0, 43), 66: (0, 87), 62: (0, 173), 37: (0, 30), 33: (0, 232), 67: (0, 228), 43: (0, 94), 69: (0, 98), 77: (0, 123), 70: (0, 64), 13: (0, 156), 41: (0, 125)}, 186: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 84: (0, 104), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 187: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 84: (0, 11), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 188: {3: (0, 240), 80: (0, 239), 42: (0, 5), 40: (0, 68), 63: (0, 112), 9: (0, 10), 65: (0, 43), 66: (0, 87), 62: (0, 173), 37: (0, 30), 79: (0, 73), 33: (0, 232), 43: (0, 94), 69: (0, 98), 77: (0, 123), 70: (0, 64), 41: (0, 125)}, 189: {1: (1, {'@': 169}), 2: (1, {'@': 169}), 8: (1, {'@': 169}), 10: (1, {'@': 169}), 11: (1, {'@': 169}), 12: (1, {'@': 169}), 14: (1, {'@': 169}), 4: (1, {'@': 169}), 17: (1, {'@': 169}), 18: (1, {'@': 169}), 19: (1, {'@': 169}), 20: (1, {'@': 169}), 21: (1, {'@': 169}), 86: (1, {'@': 169}), 23: (1, {'@': 169}), 24: (1, {'@': 169}), 25: (1, {'@': 169}), 15: (1, {'@': 169}), 40: (1, {'@': 169}), 41: (1, {'@': 169}), 42: (1, {'@': 169}), 3: (1, {'@': 169}), 43: (1, {'@': 169}), 33: (1, {'@': 169}), 9: (1, {'@': 169}), 13: (1, {'@': 169}), 37: (1, {'@': 169}), 87: (1, {'@': 169})}, 190: {105: (0, 6)}, 191: {18: (0, 230), 22: (0, 90), 2: (1, {'@': 170}), 4: (1, {'@': 170}), 32: (1, {'@': 170}), 33: (1, {'@': 170}), 34: (1, {'@': 170}), 35: (1, {'@': 170}), 11: (1, {'@': 170}), 9: (1, {'@': 170}), 12: (1, {'@': 170}), 36: (1, {'@': 170}), 19: (1, {'@': 170}), 37: (1, {'@': 170}), 21: (1, {'@': 170}), 20: (1, {'@': 170}), 1: (1, {'@': 170}), 38: (1, {'@': 170}), 25: (1, {'@': 170}), 39: (1, {'@': 170}), 40: (1, {'@': 170}), 28: (1, {'@': 170}), 41: (1, {'@': 170}), 42: (1, {'@': 170}), 3: (1, {'@': 170}), 43: (1, {'@': 170}), 8: (1, {'@': 170}), 10: (1, {'@': 170}), 13: (1, {'@': 170}), 14: (1, {'@': 170}), 17: (1, {'@': 170}), 44: (1, {'@': 170}), 23: (1, {'@': 170}), 24: (1, {'@': 170}), 45: (1, {'@': 170}), 15: (1, {'@': 170})}, 192: {30: (0, 133), 22: (0, 90), 29: (0, 130), 28: (0, 209), 18: (0, 230), 31: (0, 152), 93: (0, 204)}, 193: {23: (0, 177), 19: (0, 195), 24: (0, 120), 84: (0, 150), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 194: {1: (1, {'@': 171}), 2: (1, {'@': 171}), 3: (1, {'@': 171}), 4: (1, {'@': 171}), 5: (1, {'@': 171}), 6: (1, {'@': 171}), 7: (1, {'@': 171}), 8: (1, {'@': 171}), 9: (1, {'@': 171}), 10: (1, {'@': 171}), 11: (1, {'@': 171}), 12: (1, {'@': 171}), 13: (1, {'@': 171}), 14: (1, {'@': 171}), 15: (1, {'@': 171}), 16: (1, {'@': 171}), 17: (1, {'@': 171}), 18: (1, {'@': 171}), 19: (1, {'@': 171}), 20: (1, {'@': 171}), 21: (1, {'@': 171}), 22: (1, {'@': 171}), 23: (1, {'@': 171}), 24: (1, {'@': 171}), 25: (1, {'@': 171}), 26: (1, {'@': 171}), 27: (1, {'@': 171}), 48: (1, {'@': 171}), 49: (1, {'@': 171}), 50: (1, {'@': 171}), 29: (1, {'@': 171}), 51: (1, {'@': 171}), 47: (1, {'@': 171}), 30: (1, {'@': 171}), 32: (1, {'@': 171}), 52: (1, {'@': 171}), 34: (1, {'@': 171}), 33: (1, {'@': 171}), 35: (1, {'@': 171}), 53: (1, {'@': 171}), 36: (1, {'@': 171}), 54: (1, {'@': 171}), 37: (1, {'@': 171}), 55: (1, {'@': 171}), 38: (1, {'@': 171}), 56: (1, {'@': 171}), 39: (1, {'@': 171}), 57: (1, {'@': 171}), 40: (1, {'@': 171}), 28: (1, {'@': 171}), 41: (1, {'@': 171}), 58: (1, {'@': 171}), 42: (1, {'@': 171}), 59: (1, {'@': 171}), 46: (1, {'@': 171}), 43: (1, {'@': 171}), 31: (1, {'@': 171}), 60: (1, {'@': 171}), 44: (1, {'@': 171}), 61: (1, {'@': 171}), 45: (1, {'@': 171})}, 195: {3: (0, 240), 11: (0, 241), 79: (0, 217), 80: (0, 239), 81: (0, 89), 42: (0, 5), 40: (0, 68), 72: (0, 56), 63: (0, 112), 64: (0, 169), 9: (0, 10), 65: (0, 43), 66: (0, 87), 62: (0, 173), 37: (0, 30), 33: (0, 232), 67: (0, 228), 43: (0, 94), 69: (0, 98), 77: (0, 123), 70: (0, 64), 13: (0, 156), 41: (0, 125), 2: (1, {'@': 147}), 4: (1, {'@': 147}), 86: (1, {'@': 147}), 8: (1, {'@': 147}), 10: (1, {'@': 147}), 12: (1, {'@': 147}), 14: (1, {'@': 147}), 17: (1, {'@': 147}), 18: (1, {'@': 147}), 19: (1, {'@': 147}), 20: (1, {'@': 147}), 21: (1, {'@': 147}), 24: (1, {'@': 147}), 23: (1, {'@': 147}), 1: (1, {'@': 147}), 25: (1, {'@': 147}), 15: (1, {'@': 147})}, 196: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 84: (0, 159), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 197: {2: (1, {'@': 172}), 4: (1, {'@': 172}), 51: (1, {'@': 172}), 32: (1, {'@': 172}), 33: (1, {'@': 172}), 34: (1, {'@': 172}), 35: (1, {'@': 172}), 53: (1, {'@': 172}), 11: (1, {'@': 172}), 9: (1, {'@': 172}), 12: (1, {'@': 172}), 36: (1, {'@': 172}), 54: (1, {'@': 172}), 18: (1, {'@': 172}), 19: (1, {'@': 172}), 37: (1, {'@': 172}), 21: (1, {'@': 172}), 55: (1, {'@': 172}), 20: (1, {'@': 172}), 1: (1, {'@': 172}), 38: (1, {'@': 172}), 25: (1, {'@': 172}), 56: (1, {'@': 172}), 39: (1, {'@': 172}), 40: (1, {'@': 172}), 41: (1, {'@': 172}), 58: (1, {'@': 172}), 42: (1, {'@': 172}), 3: (1, {'@': 172}), 59: (1, {'@': 172}), 43: (1, {'@': 172}), 8: (1, {'@': 172}), 10: (1, {'@': 172}), 13: (1, {'@': 172}), 14: (1, {'@': 172}), 17: (1, {'@': 172}), 23: (1, {'@': 172}), 24: (1, {'@': 172}), 15: (1, {'@': 172})}, 198: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 84: (0, 227), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 199: {40: (1, {'@': 173}), 9: (1, {'@': 173}), 41: (1, {'@': 173}), 3: (1, {'@': 173}), 42: (1, {'@': 173}), 37: (1, {'@': 173}), 43: (1, {'@': 173}), 33: (1, {'@': 173})}, 200: {11: (0, 234)}, 201: {23: (0, 177), 19: (0, 195), 24: (0, 120), 84: (0, 3), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 202: {87: (0, 81)}, 203: {50: (1, {'@': 174}), 29: (1, {'@': 174}), 51: (1, {'@': 174}), 47: (1, {'@': 174}), 34: (1, {'@': 174}), 35: (1, {'@': 174}), 9: (1, {'@': 174}), 36: (1, {'@': 174}), 54: (1, {'@': 174}), 18: (1, {'@': 174}), 19: (1, {'@': 174}), 20: (1, {'@': 174}), 55: (1, {'@': 174}), 38: (1, {'@': 174}), 26: (1, {'@': 174}), 39: (1, {'@': 174}), 57: (1, {'@': 174}), 28: (1, {'@': 174}), 59: (1, {'@': 174}), 5: (1, {'@': 174}), 6: (1, {'@': 174}), 8: (1, {'@': 174}), 10: (1, {'@': 174}), 24: (1, {'@': 174}), 2: (1, {'@': 174}), 48: (1, {'@': 174}), 4: (1, {'@': 174}), 49: (1, {'@': 174}), 30: (1, {'@': 174}), 32: (1, {'@': 174}), 52: (1, {'@': 174}), 33: (1, {'@': 174}), 61: (1, {'@': 174}), 53: (1, {'@': 174}), 11: (1, {'@': 174}), 15: (1, {'@': 174}), 12: (1, {'@': 174}), 37: (1, {'@': 174}), 21: (1, {'@': 174}), 1: (1, {'@': 174}), 25: (1, {'@': 174}), 56: (1, {'@': 174}), 40: (1, {'@': 174}), 41: (1, {'@': 174}), 58: (1, {'@': 174}), 42: (1, {'@': 174}), 3: (1, {'@': 174}), 46: (1, {'@': 174}), 43: (1, {'@': 174}), 31: (1, {'@': 174}), 60: (1, {'@': 174}), 13: (1, {'@': 174}), 14: (1, {'@': 174}), 17: (1, {'@': 174}), 44: (1, {'@': 174}), 22: (1, {'@': 174}), 23: (1, {'@': 174}), 45: (1, {'@': 174}), 27: (1, {'@': 174})}, 204: {28: (0, 77), 30: (0, 220)}, 205: {2: (1, {'@': 175}), 4: (1, {'@': 175}), 86: (1, {'@': 175}), 8: (1, {'@': 175}), 10: (1, {'@': 175}), 11: (1, {'@': 175}), 12: (1, {'@': 175}), 14: (1, {'@': 175}), 17: (1, {'@': 175}), 18: (1, {'@': 175}), 19: (1, {'@': 175}), 20: (1, {'@': 175}), 21: (1, {'@': 175}), 24: (1, {'@': 175}), 23: (1, {'@': 175}), 1: (1, {'@': 175}), 25: (1, {'@': 175}), 15: (1, {'@': 175}), 40: (1, {'@': 175}), 41: (1, {'@': 175}), 42: (1, {'@': 175}), 3: (1, {'@': 175}), 43: (1, {'@': 175}), 33: (1, {'@': 175}), 9: (1, {'@': 175}), 13: (1, {'@': 175}), 37: (1, {'@': 175}), 87: (1, {'@': 175})}, 206: {19: (0, 141), 23: (0, 177), 12: (0, 200), 24: (0, 120), 71: (0, 31), 10: (0, 83), 68: (0, 219), 8: (0, 86), 17: (0, 110), 21: (0, 93), 20: (0, 75), 25: (0, 205), 15: (0, 106), 76: (0, 189), 2: (0, 105), 14: (0, 229), 4: (0, 7), 1: (0, 60), 78: (0, 247), 82: (0, 49), 75: (0, 12), 11: (0, 137), 50: (1, {'@': 176}), 29: (1, {'@': 176}), 51: (1, {'@': 176}), 47: (1, {'@': 176}), 34: (1, {'@': 176}), 35: (1, {'@': 176}), 9: (1, {'@': 176}), 36: (1, {'@': 176}), 54: (1, {'@': 176}), 18: (1, {'@': 176}), 55: (1, {'@': 176}), 38: (1, {'@': 176}), 39: (1, {'@': 176}), 57: (1, {'@': 176}), 28: (1, {'@': 176}), 59: (1, {'@': 176}), 5: (1, {'@': 176}), 48: (1, {'@': 176}), 49: (1, {'@': 176}), 30: (1, {'@': 176}), 32: (1, {'@': 176}), 52: (1, {'@': 176}), 33: (1, {'@': 176}), 61: (1, {'@': 176}), 53: (1, {'@': 176}), 37: (1, {'@': 176}), 56: (1, {'@': 176}), 40: (1, {'@': 176}), 41: (1, {'@': 176}), 58: (1, {'@': 176}), 42: (1, {'@': 176}), 3: (1, {'@': 176}), 46: (1, {'@': 176}), 43: (1, {'@': 176}), 31: (1, {'@': 176}), 60: (1, {'@': 176}), 13: (1, {'@': 176}), 44: (1, {'@': 176}), 22: (1, {'@': 176}), 45: (1, {'@': 176})}, 207: {2: (1, {'@': 177}), 4: (1, {'@': 177}), 51: (1, {'@': 177}), 32: (1, {'@': 177}), 33: (1, {'@': 177}), 34: (1, {'@': 177}), 35: (1, {'@': 177}), 53: (1, {'@': 177}), 11: (1, {'@': 177}), 9: (1, {'@': 177}), 12: (1, {'@': 177}), 36: (1, {'@': 177}), 54: (1, {'@': 177}), 18: (1, {'@': 177}), 19: (1, {'@': 177}), 37: (1, {'@': 177}), 21: (1, {'@': 177}), 55: (1, {'@': 177}), 20: (1, {'@': 177}), 1: (1, {'@': 177}), 38: (1, {'@': 177}), 25: (1, {'@': 177}), 56: (1, {'@': 177}), 39: (1, {'@': 177}), 40: (1, {'@': 177}), 41: (1, {'@': 177}), 58: (1, {'@': 177}), 42: (1, {'@': 177}), 3: (1, {'@': 177}), 59: (1, {'@': 177}), 43: (1, {'@': 177}), 8: (1, {'@': 177}), 10: (1, {'@': 177}), 13: (1, {'@': 177}), 14: (1, {'@': 177}), 17: (1, {'@': 177}), 23: (1, {'@': 177}), 24: (1, {'@': 177}), 15: (1, {'@': 177})}, 208: {48: (0, 186), 18: (0, 230), 22: (0, 90)}, 209: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 84: (0, 218), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 210: {18: (0, 230), 22: (0, 90), 44: (1, {'@': 178}), 29: (1, {'@': 178}), 28: (1, {'@': 178}), 30: (1, {'@': 178}), 31: (1, {'@': 178}), 2: (1, {'@': 178}), 4: (1, {'@': 178}), 32: (1, {'@': 178}), 33: (1, {'@': 178}), 34: (1, {'@': 178}), 35: (1, {'@': 178}), 11: (1, {'@': 178}), 9: (1, {'@': 178}), 12: (1, {'@': 178}), 36: (1, {'@': 178}), 19: (1, {'@': 178}), 37: (1, {'@': 178}), 21: (1, {'@': 178}), 20: (1, {'@': 178}), 1: (1, {'@': 178}), 38: (1, {'@': 178}), 25: (1, {'@': 178}), 39: (1, {'@': 178}), 40: (1, {'@': 178}), 41: (1, {'@': 178}), 42: (1, {'@': 178}), 3: (1, {'@': 178}), 43: (1, {'@': 178}), 8: (1, {'@': 178}), 10: (1, {'@': 178}), 13: (1, {'@': 178}), 14: (1, {'@': 178}), 17: (1, {'@': 178}), 23: (1, {'@': 178}), 24: (1, {'@': 178}), 45: (1, {'@': 178}), 15: (1, {'@': 178}), 46: (1, {'@': 178}), 47: (1, {'@': 178}), 48: (1, {'@': 178}), 49: (1, {'@': 178}), 50: (1, {'@': 178}), 51: (1, {'@': 178}), 52: (1, {'@': 178}), 61: (1, {'@': 178}), 53: (1, {'@': 178}), 54: (1, {'@': 178}), 55: (1, {'@': 178}), 56: (1, {'@': 178}), 57: (1, {'@': 178}), 58: (1, {'@': 178}), 59: (1, {'@': 178}), 60: (1, {'@': 178})}, 211: {42: (0, 5), 3: (0, 240), 70: (0, 64), 66: (0, 87), 80: (0, 239), 65: (0, 246), 9: (0, 10), 40: (0, 68), 98: (0, 33), 62: (0, 173), 37: (0, 30), 33: (0, 232), 43: (0, 94), 41: (0, 125)}, 212: {19: (0, 141), 23: (0, 177), 12: (0, 200), 24: (0, 120), 71: (0, 31), 10: (0, 83), 78: (0, 202), 8: (0, 86), 17: (0, 110), 68: (0, 219), 21: (0, 93), 20: (0, 75), 25: (0, 205), 15: (0, 106), 76: (0, 189), 2: (0, 105), 14: (0, 229), 4: (0, 7), 1: (0, 60), 82: (0, 49), 75: (0, 12), 11: (0, 137)}, 213: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 55: (0, 101), 20: (0, 75), 104: (0, 179), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 103: (0, 181), 40: (0, 68), 56: (0, 39), 84: (0, 34), 36: (0, 57), 15: (0, 106), 9: (0, 10), 59: (0, 51), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 53: (0, 182), 85: (0, 233), 25: (0, 205), 14: (0, 229), 51: (0, 148), 39: (0, 236), 58: (0, 225), 54: (1, {'@': 179})}, 214: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 84: (0, 235), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 215: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 84: (0, 243), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 216: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 84: (0, 20), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 217: {106: (0, 231), 6: (0, 153), 1: (1, {'@': 180}), 2: (1, {'@': 180}), 4: (1, {'@': 180}), 5: (1, {'@': 180}), 8: (1, {'@': 180}), 10: (1, {'@': 180}), 11: (1, {'@': 180}), 13: (1, {'@': 180}), 12: (1, {'@': 180}), 14: (1, {'@': 180}), 17: (1, {'@': 180}), 18: (1, {'@': 180}), 19: (1, {'@': 180}), 20: (1, {'@': 180}), 21: (1, {'@': 180}), 22: (1, {'@': 180}), 23: (1, {'@': 180}), 24: (1, {'@': 180}), 25: (1, {'@': 180}), 26: (1, {'@': 180}), 15: (1, {'@': 180}), 48: (1, {'@': 180}), 49: (1, {'@': 180}), 50: (1, {'@': 180}), 29: (1, {'@': 180}), 51: (1, {'@': 180}), 47: (1, {'@': 180}), 30: (1, {'@': 180}), 32: (1, {'@': 180}), 52: (1, {'@': 180}), 34: (1, {'@': 180}), 33: (1, {'@': 180}), 35: (1, {'@': 180}), 53: (1, {'@': 180}), 9: (1, {'@': 180}), 36: (1, {'@': 180}), 54: (1, {'@': 180}), 37: (1, {'@': 180}), 55: (1, {'@': 180}), 38: (1, {'@': 180}), 56: (1, {'@': 180}), 39: (1, {'@': 180}), 57: (1, {'@': 180}), 40: (1, {'@': 180}), 28: (1, {'@': 180}), 41: (1, {'@': 180}), 58: (1, {'@': 180}), 42: (1, {'@': 180}), 3: (1, {'@': 180}), 59: (1, {'@': 180}), 46: (1, {'@': 180}), 43: (1, {'@': 180}), 31: (1, {'@': 180}), 60: (1, {'@': 180}), 44: (1, {'@': 180}), 61: (1, {'@': 180}), 45: (1, {'@': 180})}, 218: {18: (0, 230), 22: (0, 90), 29: (0, 100), 28: (1, {'@': 181}), 30: (1, {'@': 181})}, 219: {19: (0, 141), 23: (0, 177), 12: (0, 200), 24: (0, 120), 71: (0, 31), 10: (0, 83), 76: (0, 2), 8: (0, 86), 17: (0, 110), 21: (0, 93), 20: (0, 75), 25: (0, 205), 15: (0, 106), 2: (0, 105), 14: (0, 229), 4: (0, 7), 1: (0, 60), 82: (0, 49), 75: (0, 12), 11: (0, 137), 18: (1, {'@': 182}), 86: (1, {'@': 182}), 40: (1, {'@': 182}), 9: (1, {'@': 182}), 41: (1, {'@': 182}), 13: (1, {'@': 182}), 42: (1, {'@': 182}), 3: (1, {'@': 182}), 37: (1, {'@': 182}), 43: (1, {'@': 182}), 33: (1, {'@': 182}), 87: (1, {'@': 182})}, 220: {1: (1, {'@': 183}), 2: (1, {'@': 183}), 3: (1, {'@': 183}), 4: (1, {'@': 183}), 5: (1, {'@': 183}), 6: (1, {'@': 183}), 7: (1, {'@': 183}), 8: (1, {'@': 183}), 9: (1, {'@': 183}), 10: (1, {'@': 183}), 11: (1, {'@': 183}), 12: (1, {'@': 183}), 13: (1, {'@': 183}), 14: (1, {'@': 183}), 15: (1, {'@': 183}), 16: (1, {'@': 183}), 17: (1, {'@': 183}), 18: (1, {'@': 183}), 19: (1, {'@': 183}), 20: (1, {'@': 183}), 21: (1, {'@': 183}), 22: (1, {'@': 183}), 23: (1, {'@': 183}), 24: (1, {'@': 183}), 25: (1, {'@': 183}), 26: (1, {'@': 183}), 27: (1, {'@': 183}), 48: (1, {'@': 183}), 49: (1, {'@': 183}), 50: (1, {'@': 183}), 29: (1, {'@': 183}), 51: (1, {'@': 183}), 47: (1, {'@': 183}), 30: (1, {'@': 183}), 32: (1, {'@': 183}), 52: (1, {'@': 183}), 34: (1, {'@': 183}), 33: (1, {'@': 183}), 35: (1, {'@': 183}), 53: (1, {'@': 183}), 36: (1, {'@': 183}), 54: (1, {'@': 183}), 37: (1, {'@': 183}), 55: (1, {'@': 183}), 38: (1, {'@': 183}), 56: (1, {'@': 183}), 39: (1, {'@': 183}), 57: (1, {'@': 183}), 40: (1, {'@': 183}), 28: (1, {'@': 183}), 41: (1, {'@': 183}), 58: (1, {'@': 183}), 42: (1, {'@': 183}), 59: (1, {'@': 183}), 46: (1, {'@': 183}), 43: (1, {'@': 183}), 31: (1, {'@': 183}), 60: (1, {'@': 183}), 44: (1, {'@': 183}), 61: (1, {'@': 183}), 45: (1, {'@': 183})}, 221: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 84: (0, 142), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 222: {18: (0, 230), 22: (0, 198)}, 223: {19: (0, 141), 23: (0, 177), 12: (0, 200), 24: (0, 120), 71: (0, 31), 10: (0, 83), 68: (0, 219), 8: (0, 86), 17: (0, 110), 21: (0, 93), 20: (0, 75), 25: (0, 205), 15: (0, 106), 76: (0, 189), 2: (0, 105), 14: (0, 229), 4: (0, 7), 1: (0, 60), 78: (0, 247), 82: (0, 49), 75: (0, 12), 11: (0, 137), 50: (1, {'@': 184}), 29: (1, {'@': 184}), 51: (1, {'@': 184}), 47: (1, {'@': 184}), 34: (1, {'@': 184}), 35: (1, {'@': 184}), 9: (1, {'@': 184}), 36: (1, {'@': 184}), 54: (1, {'@': 184}), 18: (1, {'@': 184}), 55: (1, {'@': 184}), 38: (1, {'@': 184}), 39: (1, {'@': 184}), 57: (1, {'@': 184}), 28: (1, {'@': 184}), 59: (1, {'@': 184}), 5: (1, {'@': 184}), 48: (1, {'@': 184}), 49: (1, {'@': 184}), 30: (1, {'@': 184}), 32: (1, {'@': 184}), 52: (1, {'@': 184}), 33: (1, {'@': 184}), 61: (1, {'@': 184}), 53: (1, {'@': 184}), 37: (1, {'@': 184}), 56: (1, {'@': 184}), 40: (1, {'@': 184}), 41: (1, {'@': 184}), 58: (1, {'@': 184}), 42: (1, {'@': 184}), 3: (1, {'@': 184}), 46: (1, {'@': 184}), 43: (1, {'@': 184}), 31: (1, {'@': 184}), 60: (1, {'@': 184}), 13: (1, {'@': 184}), 44: (1, {'@': 184}), 22: (1, {'@': 184}), 45: (1, {'@': 184})}, 224: {50: (1, {'@': 185}), 29: (1, {'@': 185}), 51: (1, {'@': 185}), 47: (1, {'@': 185}), 34: (1, {'@': 185}), 35: (1, {'@': 185}), 9: (1, {'@': 185}), 36: (1, {'@': 185}), 54: (1, {'@': 185}), 18: (1, {'@': 185}), 19: (1, {'@': 185}), 20: (1, {'@': 185}), 55: (1, {'@': 185}), 38: (1, {'@': 185}), 26: (1, {'@': 185}), 39: (1, {'@': 185}), 57: (1, {'@': 185}), 28: (1, {'@': 185}), 59: (1, {'@': 185}), 5: (1, {'@': 185}), 6: (1, {'@': 185}), 8: (1, {'@': 185}), 10: (1, {'@': 185}), 24: (1, {'@': 185}), 2: (1, {'@': 185}), 48: (1, {'@': 185}), 4: (1, {'@': 185}), 49: (1, {'@': 185}), 30: (1, {'@': 185}), 32: (1, {'@': 185}), 52: (1, {'@': 185}), 33: (1, {'@': 185}), 61: (1, {'@': 185}), 53: (1, {'@': 185}), 11: (1, {'@': 185}), 15: (1, {'@': 185}), 12: (1, {'@': 185}), 37: (1, {'@': 185}), 21: (1, {'@': 185}), 1: (1, {'@': 185}), 25: (1, {'@': 185}), 56: (1, {'@': 185}), 40: (1, {'@': 185}), 41: (1, {'@': 185}), 58: (1, {'@': 185}), 42: (1, {'@': 185}), 3: (1, {'@': 185}), 46: (1, {'@': 185}), 43: (1, {'@': 185}), 31: (1, {'@': 185}), 60: (1, {'@': 185}), 13: (1, {'@': 185}), 14: (1, {'@': 185}), 17: (1, {'@': 185}), 44: (1, {'@': 185}), 22: (1, {'@': 185}), 23: (1, {'@': 185}), 45: (1, {'@': 185}), 27: (1, {'@': 185})}, 225: {2: (1, {'@': 186}), 4: (1, {'@': 186}), 51: (1, {'@': 186}), 32: (1, {'@': 186}), 33: (1, {'@': 186}), 34: (1, {'@': 186}), 35: (1, {'@': 186}), 53: (1, {'@': 186}), 11: (1, {'@': 186}), 9: (1, {'@': 186}), 12: (1, {'@': 186}), 36: (1, {'@': 186}), 54: (1, {'@': 186}), 18: (1, {'@': 186}), 19: (1, {'@': 186}), 37: (1, {'@': 186}), 21: (1, {'@': 186}), 55: (1, {'@': 186}), 20: (1, {'@': 186}), 1: (1, {'@': 186}), 38: (1, {'@': 186}), 25: (1, {'@': 186}), 56: (1, {'@': 186}), 39: (1, {'@': 186}), 40: (1, {'@': 186}), 41: (1, {'@': 186}), 58: (1, {'@': 186}), 42: (1, {'@': 186}), 3: (1, {'@': 186}), 59: (1, {'@': 186}), 43: (1, {'@': 186}), 8: (1, {'@': 186}), 10: (1, {'@': 186}), 13: (1, {'@': 186}), 14: (1, {'@': 186}), 17: (1, {'@': 186}), 23: (1, {'@': 186}), 24: (1, {'@': 186}), 15: (1, {'@': 186})}, 226: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 84: (0, 118), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 227: {52: (0, 84), 18: (0, 230), 22: (0, 90)}, 228: {2: (1, {'@': 187}), 4: (1, {'@': 187}), 5: (1, {'@': 187}), 8: (1, {'@': 187}), 10: (1, {'@': 187}), 11: (1, {'@': 187}), 12: (1, {'@': 187}), 14: (1, {'@': 187}), 17: (1, {'@': 187}), 18: (1, {'@': 187}), 19: (1, {'@': 187}), 20: (1, {'@': 187}), 21: (1, {'@': 187}), 22: (1, {'@': 187}), 24: (1, {'@': 187}), 23: (1, {'@': 187}), 1: (1, {'@': 187}), 25: (1, {'@': 187}), 26: (1, {'@': 187}), 15: (1, {'@': 187}), 28: (1, {'@': 187}), 29: (1, {'@': 187}), 30: (1, {'@': 187}), 31: (1, {'@': 187}), 32: (1, {'@': 187}), 33: (1, {'@': 187}), 34: (1, {'@': 187}), 35: (1, {'@': 187}), 9: (1, {'@': 187}), 36: (1, {'@': 187}), 37: (1, {'@': 187}), 38: (1, {'@': 187}), 39: (1, {'@': 187}), 40: (1, {'@': 187}), 41: (1, {'@': 187}), 42: (1, {'@': 187}), 3: (1, {'@': 187}), 43: (1, {'@': 187}), 13: (1, {'@': 187}), 44: (1, {'@': 187}), 45: (1, {'@': 187}), 50: (1, {'@': 187}), 51: (1, {'@': 187}), 47: (1, {'@': 187}), 54: (1, {'@': 187}), 55: (1, {'@': 187}), 57: (1, {'@': 187}), 59: (1, {'@': 187}), 48: (1, {'@': 187}), 49: (1, {'@': 187}), 52: (1, {'@': 187}), 61: (1, {'@': 187}), 53: (1, {'@': 187}), 56: (1, {'@': 187}), 58: (1, {'@': 187}), 46: (1, {'@': 187}), 60: (1, {'@': 187})}, 229: {2: (1, {'@': 188}), 4: (1, {'@': 188}), 86: (1, {'@': 188}), 8: (1, {'@': 188}), 10: (1, {'@': 188}), 11: (1, {'@': 188}), 12: (1, {'@': 188}), 14: (1, {'@': 188}), 17: (1, {'@': 188}), 18: (1, {'@': 188}), 19: (1, {'@': 188}), 20: (1, {'@': 188}), 21: (1, {'@': 188}), 24: (1, {'@': 188}), 23: (1, {'@': 188}), 1: (1, {'@': 188}), 25: (1, {'@': 188}), 15: (1, {'@': 188}), 40: (1, {'@': 188}), 41: (1, {'@': 188}), 42: (1, {'@': 188}), 3: (1, {'@': 188}), 43: (1, {'@': 188}), 33: (1, {'@': 188}), 9: (1, {'@': 188}), 13: (1, {'@': 188}), 37: (1, {'@': 188}), 87: (1, {'@': 188})}, 230: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 84: (0, 50), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 231: {6: (0, 188), 1: (1, {'@': 189}), 2: (1, {'@': 189}), 4: (1, {'@': 189}), 5: (1, {'@': 189}), 8: (1, {'@': 189}), 10: (1, {'@': 189}), 11: (1, {'@': 189}), 13: (1, {'@': 189}), 12: (1, {'@': 189}), 14: (1, {'@': 189}), 17: (1, {'@': 189}), 18: (1, {'@': 189}), 19: (1, {'@': 189}), 20: (1, {'@': 189}), 21: (1, {'@': 189}), 22: (1, {'@': 189}), 23: (1, {'@': 189}), 24: (1, {'@': 189}), 25: (1, {'@': 189}), 26: (1, {'@': 189}), 15: (1, {'@': 189}), 48: (1, {'@': 189}), 49: (1, {'@': 189}), 50: (1, {'@': 189}), 29: (1, {'@': 189}), 51: (1, {'@': 189}), 47: (1, {'@': 189}), 30: (1, {'@': 189}), 32: (1, {'@': 189}), 52: (1, {'@': 189}), 34: (1, {'@': 189}), 33: (1, {'@': 189}), 35: (1, {'@': 189}), 53: (1, {'@': 189}), 9: (1, {'@': 189}), 36: (1, {'@': 189}), 54: (1, {'@': 189}), 37: (1, {'@': 189}), 55: (1, {'@': 189}), 38: (1, {'@': 189}), 56: (1, {'@': 189}), 39: (1, {'@': 189}), 57: (1, {'@': 189}), 40: (1, {'@': 189}), 28: (1, {'@': 189}), 41: (1, {'@': 189}), 58: (1, {'@': 189}), 42: (1, {'@': 189}), 3: (1, {'@': 189}), 59: (1, {'@': 189}), 46: (1, {'@': 189}), 43: (1, {'@': 189}), 31: (1, {'@': 189}), 60: (1, {'@': 189}), 44: (1, {'@': 189}), 61: (1, {'@': 189}), 45: (1, {'@': 189})}, 232: {1: (1, {'@': 190}), 2: (1, {'@': 190}), 3: (1, {'@': 190}), 4: (1, {'@': 190}), 5: (1, {'@': 190}), 6: (1, {'@': 190}), 7: (1, {'@': 190}), 8: (1, {'@': 190}), 9: (1, {'@': 190}), 10: (1, {'@': 190}), 11: (1, {'@': 190}), 12: (1, {'@': 190}), 13: (1, {'@': 190}), 14: (1, {'@': 190}), 15: (1, {'@': 190}), 16: (1, {'@': 190}), 17: (1, {'@': 190}), 18: (1, {'@': 190}), 19: (1, {'@': 190}), 20: (1, {'@': 190}), 21: (1, {'@': 190}), 22: (1, {'@': 190}), 23: (1, {'@': 190}), 24: (1, {'@': 190}), 25: (1, {'@': 190}), 26: (1, {'@': 190}), 27: (1, {'@': 190}), 48: (1, {'@': 190}), 49: (1, {'@': 190}), 50: (1, {'@': 190}), 29: (1, {'@': 190}), 51: (1, {'@': 190}), 47: (1, {'@': 190}), 30: (1, {'@': 190}), 32: (1, {'@': 190}), 52: (1, {'@': 190}), 34: (1, {'@': 190}), 33: (1, {'@': 190}), 35: (1, {'@': 190}), 53: (1, {'@': 190}), 36: (1, {'@': 190}), 54: (1, {'@': 190}), 37: (1, {'@': 190}), 55: (1, {'@': 190}), 38: (1, {'@': 190}), 56: (1, {'@': 190}), 39: (1, {'@': 190}), 57: (1, {'@': 190}), 40: (1, {'@': 190}), 28: (1, {'@': 190}), 41: (1, {'@': 190}), 58: (1, {'@': 190}), 42: (1, {'@': 190}), 59: (1, {'@': 190}), 46: (1, {'@': 190}), 43: (1, {'@': 190}), 31: (1, {'@': 190}), 60: (1, {'@': 190}), 44: (1, {'@': 190}), 61: (1, {'@': 190}), 45: (1, {'@': 190})}, 233: {18: (1, {'@': 191}), 22: (1, {'@': 191}), 28: (1, {'@': 191}), 29: (1, {'@': 191}), 30: (1, {'@': 191}), 31: (1, {'@': 191}), 2: (1, {'@': 191}), 4: (1, {'@': 191}), 32: (1, {'@': 191}), 33: (1, {'@': 191}), 34: (1, {'@': 191}), 35: (1, {'@': 191}), 11: (1, {'@': 191}), 9: (1, {'@': 191}), 12: (1, {'@': 191}), 36: (1, {'@': 191}), 19: (1, {'@': 191}), 37: (1, {'@': 191}), 21: (1, {'@': 191}), 20: (1, {'@': 191}), 1: (1, {'@': 191}), 38: (1, {'@': 191}), 25: (1, {'@': 191}), 39: (1, {'@': 191}), 40: (1, {'@': 191}), 41: (1, {'@': 191}), 42: (1, {'@': 191}), 3: (1, {'@': 191}), 43: (1, {'@': 191}), 8: (1, {'@': 191}), 10: (1, {'@': 191}), 13: (1, {'@': 191}), 14: (1, {'@': 191}), 44: (1, {'@': 191}), 17: (1, {'@': 191}), 23: (1, {'@': 191}), 24: (1, {'@': 191}), 45: (1, {'@': 191}), 15: (1, {'@': 191}), 46: (1, {'@': 191}), 47: (1, {'@': 191}), 48: (1, {'@': 191}), 49: (1, {'@': 191}), 50: (1, {'@': 191}), 51: (1, {'@': 191}), 52: (1, {'@': 191}), 61: (1, {'@': 191}), 53: (1, {'@': 191}), 54: (1, {'@': 191}), 55: (1, {'@': 191}), 56: (1, {'@': 191}), 57: (1, {'@': 191}), 58: (1, {'@': 191}), 59: (1, {'@': 191}), 60: (1, {'@': 191})}, 234: {2: (1, {'@': 192}), 4: (1, {'@': 192}), 86: (1, {'@': 192}), 8: (1, {'@': 192}), 10: (1, {'@': 192}), 11: (1, {'@': 192}), 12: (1, {'@': 192}), 14: (1, {'@': 192}), 17: (1, {'@': 192}), 18: (1, {'@': 192}), 19: (1, {'@': 192}), 20: (1, {'@': 192}), 21: (1, {'@': 192}), 24: (1, {'@': 192}), 23: (1, {'@': 192}), 1: (1, {'@': 192}), 25: (1, {'@': 192}), 15: (1, {'@': 192}), 40: (1, {'@': 192}), 41: (1, {'@': 192}), 42: (1, {'@': 192}), 3: (1, {'@': 192}), 43: (1, {'@': 192}), 33: (1, {'@': 192}), 9: (1, {'@': 192}), 13: (1, {'@': 192}), 37: (1, {'@': 192}), 87: (1, {'@': 192})}, 235: {18: (0, 230), 22: (0, 90), 2: (1, {'@': 193}), 4: (1, {'@': 193}), 32: (1, {'@': 193}), 33: (1, {'@': 193}), 34: (1, {'@': 193}), 35: (1, {'@': 193}), 11: (1, {'@': 193}), 9: (1, {'@': 193}), 12: (1, {'@': 193}), 36: (1, {'@': 193}), 19: (1, {'@': 193}), 37: (1, {'@': 193}), 21: (1, {'@': 193}), 20: (1, {'@': 193}), 1: (1, {'@': 193}), 38: (1, {'@': 193}), 25: (1, {'@': 193}), 39: (1, {'@': 193}), 40: (1, {'@': 193}), 28: (1, {'@': 193}), 41: (1, {'@': 193}), 42: (1, {'@': 193}), 3: (1, {'@': 193}), 43: (1, {'@': 193}), 8: (1, {'@': 193}), 10: (1, {'@': 193}), 13: (1, {'@': 193}), 14: (1, {'@': 193}), 17: (1, {'@': 193}), 44: (1, {'@': 193}), 23: (1, {'@': 193}), 24: (1, {'@': 193}), 45: (1, {'@': 193}), 15: (1, {'@': 193})}, 236: {2: (1, {'@': 194}), 4: (1, {'@': 194}), 32: (1, {'@': 194}), 33: (1, {'@': 194}), 34: (1, {'@': 194}), 35: (1, {'@': 194}), 11: (1, {'@': 194}), 9: (1, {'@': 194}), 12: (1, {'@': 194}), 36: (1, {'@': 194}), 18: (1, {'@': 194}), 19: (1, {'@': 194}), 37: (1, {'@': 194}), 21: (1, {'@': 194}), 20: (1, {'@': 194}), 1: (1, {'@': 194}), 38: (1, {'@': 194}), 25: (1, {'@': 194}), 39: (1, {'@': 194}), 40: (1, {'@': 194}), 41: (1, {'@': 194}), 42: (1, {'@': 194}), 3: (1, {'@': 194}), 43: (1, {'@': 194}), 8: (1, {'@': 194}), 10: (1, {'@': 194}), 13: (1, {'@': 194}), 14: (1, {'@': 194}), 17: (1, {'@': 194}), 23: (1, {'@': 194}), 24: (1, {'@': 194}), 15: (1, {'@': 194})}, 237: {1: (1, {'@': 195}), 2: (1, {'@': 195}), 4: (1, {'@': 195}), 5: (1, {'@': 195}), 6: (1, {'@': 195}), 8: (1, {'@': 195}), 10: (1, {'@': 195}), 11: (1, {'@': 195}), 15: (1, {'@': 195}), 12: (1, {'@': 195}), 13: (1, {'@': 195}), 14: (1, {'@': 195}), 16: (1, {'@': 195}), 17: (1, {'@': 195}), 18: (1, {'@': 195}), 19: (1, {'@': 195}), 20: (1, {'@': 195}), 21: (1, {'@': 195}), 22: (1, {'@': 195}), 23: (1, {'@': 195}), 24: (1, {'@': 195}), 25: (1, {'@': 195}), 26: (1, {'@': 195}), 27: (1, {'@': 195}), 48: (1, {'@': 195}), 49: (1, {'@': 195}), 50: (1, {'@': 195}), 29: (1, {'@': 195}), 51: (1, {'@': 195}), 47: (1, {'@': 195}), 30: (1, {'@': 195}), 32: (1, {'@': 195}), 52: (1, {'@': 195}), 34: (1, {'@': 195}), 33: (1, {'@': 195}), 61: (1, {'@': 195}), 35: (1, {'@': 195}), 53: (1, {'@': 195}), 9: (1, {'@': 195}), 36: (1, {'@': 195}), 54: (1, {'@': 195}), 37: (1, {'@': 195}), 55: (1, {'@': 195}), 38: (1, {'@': 195}), 56: (1, {'@': 195}), 39: (1, {'@': 195}), 57: (1, {'@': 195}), 40: (1, {'@': 195}), 28: (1, {'@': 195}), 41: (1, {'@': 195}), 58: (1, {'@': 195}), 42: (1, {'@': 195}), 3: (1, {'@': 195}), 59: (1, {'@': 195}), 46: (1, {'@': 195}), 43: (1, {'@': 195}), 31: (1, {'@': 195}), 60: (1, {'@': 195}), 44: (1, {'@': 195}), 45: (1, {'@': 195})}, 238: {28: (0, 77), 46: (0, 27)}, 239: {1: (1, {'@': 196}), 2: (1, {'@': 196}), 3: (1, {'@': 196}), 4: (1, {'@': 196}), 5: (1, {'@': 196}), 6: (1, {'@': 196}), 7: (1, {'@': 196}), 8: (1, {'@': 196}), 9: (1, {'@': 196}), 10: (1, {'@': 196}), 11: (1, {'@': 196}), 12: (1, {'@': 196}), 13: (1, {'@': 196}), 14: (1, {'@': 196}), 15: (1, {'@': 196}), 16: (1, {'@': 196}), 17: (1, {'@': 196}), 18: (1, {'@': 196}), 19: (1, {'@': 196}), 20: (1, {'@': 196}), 21: (1, {'@': 196}), 22: (1, {'@': 196}), 23: (1, {'@': 196}), 24: (1, {'@': 196}), 25: (1, {'@': 196}), 26: (1, {'@': 196}), 27: (1, {'@': 196}), 48: (1, {'@': 196}), 49: (1, {'@': 196}), 50: (1, {'@': 196}), 29: (1, {'@': 196}), 51: (1, {'@': 196}), 47: (1, {'@': 196}), 30: (1, {'@': 196}), 32: (1, {'@': 196}), 52: (1, {'@': 196}), 34: (1, {'@': 196}), 33: (1, {'@': 196}), 35: (1, {'@': 196}), 53: (1, {'@': 196}), 36: (1, {'@': 196}), 54: (1, {'@': 196}), 37: (1, {'@': 196}), 55: (1, {'@': 196}), 38: (1, {'@': 196}), 56: (1, {'@': 196}), 39: (1, {'@': 196}), 57: (1, {'@': 196}), 40: (1, {'@': 196}), 28: (1, {'@': 196}), 41: (1, {'@': 196}), 58: (1, {'@': 196}), 42: (1, {'@': 196}), 59: (1, {'@': 196}), 46: (1, {'@': 196}), 43: (1, {'@': 196}), 31: (1, {'@': 196}), 60: (1, {'@': 196}), 44: (1, {'@': 196}), 61: (1, {'@': 196}), 45: (1, {'@': 196})}, 240: {23: (0, 177), 19: (0, 195), 24: (0, 120), 62: (0, 0), 42: (0, 5), 63: (0, 112), 64: (0, 52), 21: (0, 93), 2: (0, 105), 65: (0, 43), 66: (0, 87), 37: (0, 30), 4: (0, 7), 1: (0, 60), 33: (0, 232), 67: (0, 228), 68: (0, 219), 69: (0, 98), 70: (0, 64), 71: (0, 31), 10: (0, 83), 18: (0, 21), 8: (0, 86), 17: (0, 110), 72: (0, 56), 84: (0, 85), 20: (0, 75), 73: (0, 78), 3: (0, 122), 74: (0, 1), 75: (0, 12), 76: (0, 189), 77: (0, 123), 78: (0, 136), 11: (0, 137), 41: (0, 125), 12: (0, 200), 38: (0, 196), 79: (0, 217), 80: (0, 239), 81: (0, 89), 40: (0, 68), 36: (0, 57), 15: (0, 106), 9: (0, 10), 82: (0, 49), 43: (0, 94), 35: (0, 114), 83: (0, 36), 32: (0, 88), 34: (0, 138), 13: (0, 156), 85: (0, 233), 25: (0, 205), 14: (0, 229), 39: (0, 236)}, 241: {2: (1, {'@': 197}), 4: (1, {'@': 197}), 86: (1, {'@': 197}), 8: (1, {'@': 197}), 10: (1, {'@': 197}), 11: (1, {'@': 197}), 12: (1, {'@': 197}), 14: (1, {'@': 197}), 17: (1, {'@': 197}), 18: (1, {'@': 197}), 19: (1, {'@': 197}), 20: (1, {'@': 197}), 21: (1, {'@': 197}), 24: (1, {'@': 197}), 23: (1, {'@': 197}), 1: (1, {'@': 197}), 25: (1, {'@': 197}), 15: (1, {'@': 197}), 40: (1, {'@': 197}), 41: (1, {'@': 197}), 42: (1, {'@': 197}), 3: (1, {'@': 197}), 43: (1, {'@': 197}), 33: (1, {'@': 197}), 9: (1, {'@': 197}), 13: (1, {'@': 197}), 37: (1, {'@': 197}), 87: (1, {'@': 197})}, 242: {18: (0, 230), 22: (0, 90), 28: (1, {'@': 198}), 29: (1, {'@': 198}), 30: (1, {'@': 198}), 31: (1, {'@': 198}), 2: (1, {'@': 198}), 4: (1, {'@': 198}), 32: (1, {'@': 198}), 33: (1, {'@': 198}), 34: (1, {'@': 198}), 35: (1, {'@': 198}), 11: (1, {'@': 198}), 9: (1, {'@': 198}), 12: (1, {'@': 198}), 36: (1, {'@': 198}), 19: (1, {'@': 198}), 37: (1, {'@': 198}), 21: (1, {'@': 198}), 20: (1, {'@': 198}), 1: (1, {'@': 198}), 38: (1, {'@': 198}), 25: (1, {'@': 198}), 39: (1, {'@': 198}), 40: (1, {'@': 198}), 41: (1, {'@': 198}), 42: (1, {'@': 198}), 3: (1, {'@': 198}), 43: (1, {'@': 198}), 8: (1, {'@': 198}), 10: (1, {'@': 198}), 13: (1, {'@': 198}), 14: (1, {'@': 198}), 44: (1, {'@': 198}), 17: (1, {'@': 198}), 23: (1, {'@': 198}), 24: (1, {'@': 198}), 45: (1, {'@': 198}), 15: (1, {'@': 198}), 46: (1, {'@': 198}), 47: (1, {'@': 198}), 48: (1, {'@': 198}), 49: (1, {'@': 198}), 50: (1, {'@': 198}), 51: (1, {'@': 198}), 52: (1, {'@': 198}), 61: (1, {'@': 198}), 53: (1, {'@': 198}), 54: (1, {'@': 198}), 55: (1, {'@': 198}), 56: (1, {'@': 198}), 57: (1, {'@': 198}), 58: (1, {'@': 198}), 59: (1, {'@': 198}), 60: (1, {'@': 198})}, 243: {18: (0, 230), 22: (0, 90), 50: (1, {'@': 181}), 28: (1, {'@': 181}), 30: (1, {'@': 181}), 46: (1, {'@': 181})}, 244: {27: (0, 109), 2: (1, {'@': 199}), 4: (1, {'@': 199}), 5: (1, {'@': 199}), 6: (1, {'@': 199}), 8: (1, {'@': 199}), 10: (1, {'@': 199}), 11: (1, {'@': 199}), 13: (1, {'@': 199}), 12: (1, {'@': 199}), 14: (1, {'@': 199}), 17: (1, {'@': 199}), 18: (1, {'@': 199}), 19: (1, {'@': 199}), 20: (1, {'@': 199}), 21: (1, {'@': 199}), 22: (1, {'@': 199}), 24: (1, {'@': 199}), 23: (1, {'@': 199}), 1: (1, {'@': 199}), 25: (1, {'@': 199}), 26: (1, {'@': 199}), 15: (1, {'@': 199}), 48: (1, {'@': 199}), 49: (1, {'@': 199}), 50: (1, {'@': 199}), 29: (1, {'@': 199}), 51: (1, {'@': 199}), 47: (1, {'@': 199}), 30: (1, {'@': 199}), 32: (1, {'@': 199}), 52: (1, {'@': 199}), 34: (1, {'@': 199}), 33: (1, {'@': 199}), 61: (1, {'@': 199}), 35: (1, {'@': 199}), 53: (1, {'@': 199}), 9: (1, {'@': 199}), 36: (1, {'@': 199}), 54: (1, {'@': 199}), 37: (1, {'@': 199}), 55: (1, {'@': 199}), 38: (1, {'@': 199}), 56: (1, {'@': 199}), 39: (1, {'@': 199}), 57: (1, {'@': 199}), 40: (1, {'@': 199}), 28: (1, {'@': 199}), 41: (1, {'@': 199}), 58: (1, {'@': 199}), 42: (1, {'@': 199}), 3: (1, {'@': 199}), 59: (1, {'@': 199}), 46: (1, {'@': 199}), 43: (1, {'@': 199}), 31: (1, {'@': 199}), 60: (1, {'@': 199}), 44: (1, {'@': 199}), 45: (1, {'@': 199})}, 245: {3: (0, 240), 79: (0, 217), 80: (0, 239), 81: (0, 89), 42: (0, 5), 40: (0, 68), 72: (0, 56), 63: (0, 112), 64: (0, 183), 9: (0, 10), 65: (0, 43), 66: (0, 87), 62: (0, 173), 37: (0, 30), 33: (0, 232), 67: (0, 228), 43: (0, 94), 69: (0, 98), 77: (0, 123), 70: (0, 64), 13: (0, 156), 41: (0, 125)}, 246: {22: (0, 24)}, 247: {3: (0, 240), 79: (0, 217), 80: (0, 239), 81: (0, 89), 42: (0, 5), 40: (0, 68), 72: (0, 56), 63: (0, 112), 64: (0, 149), 9: (0, 10), 65: (0, 43), 66: (0, 87), 62: (0, 173), 37: (0, 30), 33: (0, 232), 67: (0, 228), 43: (0, 94), 69: (0, 98), 77: (0, 123), 70: (0, 64), 13: (0, 156), 41: (0, 125)}, 248: {29: (1, {'@': 200}), 50: (1, {'@': 200}), 51: (1, {'@': 200}), 47: (1, {'@': 200}), 34: (1, {'@': 200}), 35: (1, {'@': 200}), 9: (1, {'@': 200}), 36: (1, {'@': 200}), 54: (1, {'@': 200}), 18: (1, {'@': 200}), 19: (1, {'@': 200}), 20: (1, {'@': 200}), 27: (1, {'@': 200}), 55: (1, {'@': 200}), 38: (1, {'@': 200}), 26: (1, {'@': 200}), 39: (1, {'@': 200}), 57: (1, {'@': 200}), 28: (1, {'@': 200}), 59: (1, {'@': 200}), 5: (1, {'@': 200}), 6: (1, {'@': 200}), 8: (1, {'@': 200}), 10: (1, {'@': 200}), 24: (1, {'@': 200}), 2: (1, {'@': 200}), 48: (1, {'@': 200}), 4: (1, {'@': 200}), 49: (1, {'@': 200}), 30: (1, {'@': 200}), 32: (1, {'@': 200}), 52: (1, {'@': 200}), 33: (1, {'@': 200}), 61: (1, {'@': 200}), 53: (1, {'@': 200}), 11: (1, {'@': 200}), 12: (1, {'@': 200}), 37: (1, {'@': 200}), 21: (1, {'@': 200}), 1: (1, {'@': 200}), 25: (1, {'@': 200}), 56: (1, {'@': 200}), 40: (1, {'@': 200}), 41: (1, {'@': 200}), 58: (1, {'@': 200}), 42: (1, {'@': 200}), 3: (1, {'@': 200}), 46: (1, {'@': 200}), 43: (1, {'@': 200}), 31: (1, {'@': 200}), 60: (1, {'@': 200}), 13: (1, {'@': 200}), 14: (1, {'@': 200}), 16: (1, {'@': 200}), 17: (1, {'@': 200}), 44: (1, {'@': 200}), 22: (1, {'@': 200}), 23: (1, {'@': 200}), 45: (1, {'@': 200}), 15: (1, {'@': 200})}}, 'start_states': {'start': 124}, 'end_states': {'start': 132}}, 'lexer_conf': {'tokens': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}], 'ignore': ['WS', 'COMMENT'], 'g_regex_flags': 0, '__type__': 'LexerConf'}, 'start': ['start'], '__type__': 'LALR_ContextualLexer'}, 'rules': [{'@': 179}, {'@': 139}, {'@': 153}, {'@': 97}, {'@': 186}, {'@': 73}, {'@': 111}, {'@': 84}, {'@': 79}, {'@': 141}, {'@': 170}, {'@': 193}, {'@': 69}, {'@': 88}, {'@': 90}, {'@': 72}, {'@': 198}, {'@': 148}, {'@': 75}, {'@': 191}, {'@': 151}, {'@': 95}, {'@': 85}, {'@': 146}, {'@': 134}, {'@': 130}, {'@': 142}, {'@': 157}, {'@': 96}, {'@': 164}, {'@': 159}, {'@': 74}, {'@': 150}, {'@': 187}, {'@': 182}, {'@': 68}, {'@': 188}, {'@': 123}, {'@': 131}, {'@': 128}, {'@': 94}, {'@': 81}, {'@': 70}, {'@': 145}, {'@': 136}, {'@': 117}, {'@': 127}, {'@': 103}, {'@': 147}, {'@': 175}, {'@': 161}, {'@': 121}, {'@': 91}, {'@': 99}, {'@': 189}, {'@': 180}, {'@': 199}, {'@': 133}, {'@': 87}, {'@': 138}, {'@': 132}, {'@': 109}, {'@': 126}, {'@': 195}, {'@': 89}, {'@': 102}, {'@': 158}, {'@': 77}, {'@': 152}, {'@': 119}, {'@': 66}, {'@': 196}, {'@': 106}, {'@': 80}, {'@': 190}, {'@': 162}, {'@': 78}, {'@': 171}, {'@': 160}, {'@': 183}, {'@': 143}, {'@': 156}, {'@': 113}, {'@': 116}, {'@': 115}, {'@': 101}, {'@': 178}, {'@': 124}, {'@': 108}, {'@': 140}, {'@': 197}, {'@': 192}, {'@': 114}, {'@': 149}, {'@': 118}, {'@': 154}, {'@': 163}, {'@': 135}, {'@': 120}, {'@': 100}, {'@': 194}, {'@': 93}, {'@': 172}, {'@': 177}, {'@': 83}, {'@': 165}, {'@': 166}, {'@': 104}, {'@': 92}, {'@': 98}, {'@': 105}, {'@': 173}, {'@': 125}, {'@': 137}, {'@': 107}, {'@': 184}, {'@': 176}, {'@': 167}, {'@': 144}, {'@': 169}, {'@': 67}, {'@': 71}, {'@': 76}, {'@': 82}, {'@': 112}, {'@': 168}, {'@': 174}, {'@': 129}, {'@': 110}, {'@': 185}, {'@': 86}, {'@': 200}, {'@': 155}, {'@': 181}, {'@': 122}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache_grammar': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': None, 'ambiguity': 'auto', 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'PP', 'pattern': {'value': '++', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 1: {'name': 'MM', 'pattern': {'value': '--', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 2: {'name': 'TT', 'pattern': {'value': '**', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 3: {'name': 'CONJ', 'pattern': {'value': '(?:(?:(?:\\&|/\\\\)|∧)|and)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 4: {'name': 'DISJ', 'pattern': {'value': '(?:(?:(?:\\||\\\\/)|∨)|or)', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 5: {'name': 'PERCENT', 'pattern': {'value': '%', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 6: {'name': 'ATSIGN', 'pattern': {'value': '@', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 7: {'name': 'EQ', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 8: {'name': 'GT', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 9: {'name': 'LT', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 10: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 11: {'name': '_IS', 'pattern': {'value': '(?:(?:(?:(?:are|is)|∈)|be)|:=)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 12: {'name': 'COMP', 'pattern': {'value': '(?:(?:(?:!|\\~)|¬)|not)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 13: {'name': 'VAR', 'pattern': {'value': '(?!(Section|let|be|true|false|if|then|else|iff|is|are|forall|exists|not|or|and|∈)\\b)[ℕ𝕀ℙℂℚωℝπστΠξμδθγβαa-z_A-Z\\$⋃⋂][\\$a-zA-Z_0-9ℕ𝕀ℙℂℚℝπστωΠξμδθγβαa-z_A-Z⋃⋂]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 14: {'name': 'COMMENT', 'pattern': {'value': '\\/\\/[^\n]*', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 15: {'name': 'INT', 'pattern': {'value': '(?:[0-9])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 16: {'name': 'WS', 'pattern': {'value': '(?:[ \t\x0c\r\n])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 17: {'name': 'ESCAPED_STRING', 'pattern': {'value': '".*?(?<!\\\\)(\\\\\\\\)*?"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 18: {'name': 'LET', 'pattern': {'value': 'Let', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 19: {'name': 'DOT', 'pattern': {'value': '.', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 20: {'name': 'QUOTE', 'pattern': {'value': "'", 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 21: {'name': 'SECTION', 'pattern': {'value': 'Section', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 22: {'name': 'RULE', 'pattern': {'value': 'Rule', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 23: {'name': '__ANON_0', 'pattern': {'value': '=>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 24: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 25: {'name': 'ASSUMING', 'pattern': {'value': 'assuming', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 26: {'name': 'PROOF', 'pattern': {'value': 'Proof', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 27: {'name': 'ASSUME', 'pattern': {'value': 'Assume', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 28: {'name': 'HAS', 'pattern': {'value': 'has', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 29: {'name': 'PROPERTY', 'pattern': {'value': 'property', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 30: {'name': 'THAT', 'pattern': {'value': 'that', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 31: {'name': 'SEMICOLON', 'pattern': {'value': ';', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 32: {'name': 'SEQUENCE', 'pattern': {'value': 'Sequence', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 33: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 34: {'name': 'THEN', 'pattern': {'value': 'then', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 35: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 36: {'name': '__ANON_1', 'pattern': {'value': '|->', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 37: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 38: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 39: {'name': '__ANON_2', 'pattern': {'value': 'Σ', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 40: {'name': 'SUM', 'pattern': {'value': 'sum', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 41: {'name': '__ANON_3', 'pattern': {'value': 'let', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 42: {'name': 'IN', 'pattern': {'value': 'in', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 43: {'name': 'OR', 'pattern': {'value': 'or', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 44: {'name': 'AND', 'pattern': {'value': 'and', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 45: {'name': '__ANON_4', 'pattern': {'value': '[^\x00-ÿ]|×', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 46: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 47: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 48: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 49: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 50: {'name': 'CIRCUMFLEX', 'pattern': {'value': '^', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 51: {'name': 'BANG', 'pattern': {'value': '!', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 52: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 53: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 54: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 55: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 56: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 57: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 58: {'name': '__ANON_5', 'pattern': {'value': '...', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 59: {'name': '__ANON_6', 'pattern': {'value': '≠', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 60: {'name': '__ANON_7', 'pattern': {'value': '≥', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 61: {'name': '__ANON_8', 'pattern': {'value': '≤', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 62: {'name': 'FORALL', 'pattern': {'value': 'forall', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 63: {'name': '__ANON_9', 'pattern': {'value': '∀', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 64: {'name': 'EXISTS', 'pattern': {'value': 'exists', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 65: {'name': '__ANON_10', 'pattern': {'value': '∃', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 66: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 67: {'origin': {'name': '__operator_sym_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__operator_sym_plus_6', '__type__': 'NonTerminal'}, {'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 68: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PP', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 69: {'origin': {'name': 'sequence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SEQUENCE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__sequence_star_2', '__type__': 'NonTerminal'}, {'name': 'seq_def', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 70: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ge', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 71: {'origin': {'name': '__praline_sub_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 72: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'if_stmt', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 73: {'origin': {'name': 'definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RULE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'rule', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 74: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'quant_qual', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'elem', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 75: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'lambda_fun', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 76: {'origin': {'name': '__praline_sub_star_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_sub_star_7', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 77: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_atom', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'praline_app', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 78: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__app_star_13', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 79: {'origin': {'name': 'definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PROOF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RULE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'ASSUMING', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__definition_plus_1', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'proof_rule_assuming', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 80: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ne', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': '__praline_add_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': 'definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PROOF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RULE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'proof_rule', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_2', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'reduce_sum', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': '__praline_div_plus_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_div_plus_11', '__type__': 'NonTerminal'}, {'name': 'PERCENT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exp', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exp', '__type__': 'NonTerminal'}, {'name': '__praline_div_star_10', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': 'sequence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SEQUENCE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'seq_def', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': 'praline_factorial', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': 'seq_def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}, {'name': '__praline_sub_star_7', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': '__definition_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assumption', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'le', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': '__ANON_2', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'reduce', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'or_op', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': 'definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'QUOTE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'QUOTE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'let_operator', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': '__definition_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__definition_plus_1', '__type__': 'NonTerminal'}, {'name': 'assumption', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXISTS', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 15, 'alias': 'comp_set', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_atom', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__app_star_13', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_app', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CONJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': '__definition_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assumption', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': '__definition_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__definition_plus_1', '__type__': 'NonTerminal'}, {'name': 'assumption', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_string', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': '__term_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__term_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': 'var', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': 'praline_exp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_factorial', '__type__': 'NonTerminal'}, {'name': '__praline_exp_star_12', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_exp', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': '__praline_div_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_div_star_10', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exp', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': 'definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RULE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'ASSUMING', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__definition_plus_1', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'rule_assuming', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': '__praline_add_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_add_star_8', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'range_set', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': 'ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__app_star_13', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 14, 'alias': 'comp_set', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 13, 'alias': 'range_set_step', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': 'ge', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_7', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_atom', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_9', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': '__app_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__app_star_13', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': 'int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'int_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': '__sequence_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__sequence_star_2', '__type__': 'NonTerminal'}, {'name': 'seq_def', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': 'praline_exp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_factorial', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_exp', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DISJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ATSIGN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': '__praline_div_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exp', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'exists_sym', '__type__': 'NonTerminal'}, {'name': 'quant_qual', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'exists', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PERCENT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exp', '__type__': 'NonTerminal'}, {'name': '__praline_div_plus_11', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_mod', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'forall_sym', '__type__': 'NonTerminal'}, {'name': 'quant_qual', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 9, 'alias': 'forall', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FORALL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': '__term_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exp', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': 'string', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ESCAPED_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'escaped_str', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': 'definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ASSUME', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'assumption', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'assumption', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'let_match', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': 'finset', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': '__bool_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__bool_plus_5', '__type__': 'NonTerminal'}, {'name': 'AND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'operator', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'SUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'reduce', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '__term_star_3', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'lambda_fun', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': 'ge', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': 'operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator', '__type__': 'NonTerminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'operator', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'operator', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': '__ANON_2', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'reduce', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_atom', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'image', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': 'definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': 'le', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_le', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': '__praline_exp_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_exp_star_12', '__type__': 'NonTerminal'}, {'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_factorial', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': 'finset', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator', '__type__': 'NonTerminal'}, {'name': '__bool_star_4', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'or_op', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_atom', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_app', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'operator', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'complement', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': 'le', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_8', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator', '__type__': 'NonTerminal'}, {'name': '__bool_plus_5', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'and_op', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'definition', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'sequence', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': '__bool_plus_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'operator', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': '__praline_mul_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': '__operator_sym_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': 'assumption', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': 'HAS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PROPERTY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'assume_property', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'definition', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': '__sequence_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'seq_def', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': '__praline_mul_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_mul_star_9', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_4', 'filter_out': False, '__type__': 'Terminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': '__bool_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__bool_star_4', '__type__': 'NonTerminal'}, {'name': 'OR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'operator', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'sequence', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': 'quant_qual', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': '__app_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': 'operator_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__operator_sym_plus_6', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'operator_sym', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__app_star_13', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'finset', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': '__bool_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'OR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'operator', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': '__praline_div_plus_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PERCENT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exp', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': 'definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SECTION', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'section', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': 'operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MM', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}, {'name': '__praline_add_star_8', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': 'ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': 'assumption', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'THAT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'assume_that', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_10', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': 'praline_factorial', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': 'BANG', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_factorial', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_int', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': 'ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'lambda_fun', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}, {'name': '__praline_mul_star_9', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': '__praline_exp_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_factorial', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(transformer=None, postlex=None):
  namespace = {'Rule': Rule, 'TerminalDef': TerminalDef}
  return Lark.deserialize(DATA, namespace, MEMO, transformer=transformer, postlex=postlex)
