# The file was automatically generated by Lark v0.8.5
#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser with a standard lexer
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

import os
from io import open

class LarkError(Exception):
    pass

class GrammarError(LarkError):
    pass

class ParseError(LarkError):
    pass

class LexError(LarkError):
    pass

class UnexpectedEOF(ParseError):
    def __init__(self, expected):
        self.expected = expected

        message = ("Unexpected end-of-input. Expected one of: \n\t* %s\n" % '\n\t* '.join(x.name for x in self.expected))
        super(UnexpectedEOF, self).__init__(message)


class UnexpectedInput(LarkError):
    pos_in_stream = None

    def get_context(self, text, span=40):
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        before = text[start:pos].rsplit('\n', 1)[-1]
        after = text[pos:end].split('\n', 1)[0]
        return before + after + '\n' + ' ' * len(before) + '^\n'

    def match_examples(self, parse_fn, examples):
        """ Given a parser instance and a dictionary mapping some label with
            some malformed syntax examples, it'll return the label for the
            example that bests matches the current error.
        """
        assert self.state is not None, "Not supported for this exception"

        candidate = None
        for label, example in examples.items():
            assert not isinstance(example, STRING_TYPE)

            for malformed in example:
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        try:
                            if ut.token == self.token:  # Try exact match first
                                return label
                        except AttributeError:
                            pass
                        if not candidate:
                            candidate = label

        return candidate


class UnexpectedCharacters(LexError, UnexpectedInput):
    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None):
        message = "No terminal defined for '%s' at line %d col %d" % (seq[lex_pos], line, column)

        self.line = line
        self.column = column
        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.pos_in_stream = lex_pos
        self.state = state

        message += '\n\n' + self.get_context(seq)
        if allowed:
            message += '\nExpecting: %s\n' % allowed
        if token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in token_history)

        super(UnexpectedCharacters, self).__init__(message)



class UnexpectedToken(ParseError, UnexpectedInput):
    def __init__(self, token, expected, considered_rules=None, state=None):
        self.token = token
        self.expected = expected     # XXX str shouldn't necessary
        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.considered_rules = considered_rules
        self.state = state
        self.pos_in_stream = getattr(token, 'pos_in_stream', None)

        message = ("Unexpected token %r at line %s, column %s.\n"
                   "Expected one of: \n\t* %s\n"
                   % (token, self.line, self.column, '\n\t* '.join(self.expected)))

        super(UnexpectedToken, self).__init__(message)

class VisitError(LarkError):
    """VisitError is raised when visitors are interrupted by an exception

    It provides the following attributes for inspection:
    - obj: the tree node or token it was processing when the exception was raised
    - orig_exc: the exception that cause it to fail
    """
    def __init__(self, rule, obj, orig_exc):
        self.obj = obj
        self.orig_exc = orig_exc

        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

def classify(seq, key=None, value=None):
    d = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data, namespace, memo):
    if isinstance(data, dict):
        if '__type__' in data: # Object
            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


class Serialize(object):
    def memo_serialize(self, types_to_memoize):
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None):
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        postprocess = getattr(self, '_serialize', None)
        if postprocess:
            postprocess(res, memo)
        return res

    @classmethod
    def deserialize(cls, data, memo):
        namespace = getattr(cls, '__serialize_namespace__', {})
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)
        postprocess = getattr(inst, '_deserialize', None)
        if postprocess:
            postprocess()
        return inst


class SerializeMemoizer(Serialize):
    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize):
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value):
        return isinstance(value, self.types_to_memoize)

    def serialize(self):
        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data, namespace, memo):
        return _deserialize(data, namespace, memo)



try:
    STRING_TYPE = basestring
except NameError:   # Python 3
    STRING_TYPE = str


import types
from functools import wraps, partial
from contextlib import contextmanager

Str = type(u'')
try:
    classtype = types.ClassType # Python2
except AttributeError:
    classtype = type    # Python3

def smart_decorator(f, create_decorator):
    if isinstance(f, types.FunctionType):
        return wraps(f)(create_decorator(f, True))

    elif isinstance(f, (classtype, type, types.BuiltinFunctionType)):
        return wraps(f)(create_decorator(f, False))

    elif isinstance(f, types.MethodType):
        return wraps(f)(create_decorator(f.__func__, True))

    elif isinstance(f, partial):
        # wraps does not work for partials in 2.7: https://bugs.python.org/issue3445
        return wraps(f.func)(create_decorator(lambda *args, **kw: f(*args[1:], **kw), True))

    else:
        return create_decorator(f.__func__.__call__, True)

import sys, re
Py36 = (sys.version_info[:2] >= (3, 6))

import sre_parse
import sre_constants
def get_regexp_width(regexp):
    try:
        return [int(x) for x in sre_parse.parse(regexp).getwidth()]
    except sre_constants.error:
        raise ValueError(regexp)


class Meta:
    def __init__(self):
        self.empty = True

class Tree(object):
    def __init__(self, data, children, meta=None):
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self):
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%s, %s)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [ indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [ indent_str*level, self._pretty_label(), '\n' ]
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [ indent_str*(level+1), '%s' % (n,), '\n' ]

        return l

    def pretty(self, indent_str='  '):
        return ''.join(self._pretty(0, indent_str))

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self):
        # TODO: Re-write as a more efficient version

        visited = set()
        q = [self]

        l = []
        while q:
            subtree = q.pop()
            l.append( subtree )
            if id(subtree) in visited:
                continue    # already been here from another branch
            visited.add(id(subtree))
            q += [c for c in subtree.children if isinstance(c, Tree)]

        seen = set()
        for x in reversed(l):
            if id(x) not in seen:
                yield x
                seen.add(id(x))

    def find_pred(self, pred):
        "Find all nodes where pred(tree) == True"
        return filter(pred, self.iter_subtrees())

    def find_data(self, data):
        "Find all nodes where tree.data == data"
        return self.find_pred(lambda t: t.data == data)


from inspect import getmembers, getmro

class Discard(Exception):
    pass

# Transformers

class _Decoratable:
    @classmethod
    def _apply_decorator(cls, decorator, **kwargs):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            # Make sure the function isn't inherited (unless it's overwritten)
            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(cls.__dict__[name]):
                continue

            # Skip if v_args already applied (at the function level)
            if hasattr(cls.__dict__[name], 'vargs_applied'):
                continue

            static = isinstance(cls.__dict__[name], (staticmethod, classmethod))
            setattr(cls, name, decorator(value, static=static, **kwargs))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable):
    """Visits the tree recursively, starting with the leaves and finally the root (bottom-up)

    Calls its methods (provided by user via inheritance) according to tree.data
    The returned value replaces the old one in the structure.

    Can be used to implement map or reduce.
    """
    __visit_tokens__ = True   # For backwards compatibility

    def __init__(self,  visit_tokens=True):
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except (GrammarError, Discard):
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)


    def _transform_children(self, children):
        for c in children:
            try:
                if isinstance(c, Tree):
                    yield self._transform_tree(c)
                elif self.__visit_tokens__ and isinstance(c, Token):
                    yield self._call_userfunc_token(c)
                else:
                    yield c
            except Discard:
                pass

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree):
        return self._transform_tree(tree)

    def __mul__(self, other):
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        "Default operation on tree (for override)"
        return Tree(data, children, meta)

    def __default_token__(self, token):
        "Default operation on token (for override)"
        return token



class InlineTransformer(Transformer):   # XXX Deprecated
    def _call_userfunc(self, tree, new_children=None):
        # Assumes tree is already transformed
        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(object):
    def __init__(self, *transformers):
        self.transformers = transformers

    def transform(self, tree):
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other):
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    "Non-recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):           # Cancel recursion
        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_InPlaceRecursive(Transformer):
    "Recursive. Changes the tree in-place instead of returning new instances"
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)



# Visitors

class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        "Default operation on tree (for override)"
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase):
    """Bottom-up visitor, non-recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self,tree):
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree

class Visitor_Recursive(VisitorBase):
    """Bottom-up visitor, recursive

    Visits the tree, starting with the leaves and finally the root (bottom-up)
    Calls its methods (provided by user via inheritance) according to tree.data
    """

    def visit(self, tree):
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree):
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree



def visit_children_decor(func):
    "See Interpreter"
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner


class Interpreter(_Decoratable):
    """Top-down visitor, recursive

    Visits the tree, starting with the root and finally the leaves (top-down)
    Calls its methods (provided by user via inheritance) according to tree.data

    Unlike Transformer and Visitor, the Interpreter doesn't automatically visit its sub-branches.
    The user has to explicitly call visit_children, or use the @visit_children_decor
    """

    def visit(self, tree):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree):
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)




# Decorators

def _apply_decorator(obj, decorator, **kwargs):
    try:
        _apply = obj._apply_decorator
    except AttributeError:
        return decorator(obj, **kwargs)
    else:
        return _apply(decorator, **kwargs)



def _inline_args__func(func):
    @wraps(func)
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, children):
                return _f(self, *children)
        else:
            def f(self, children):
                return _f(*children)
        return f

    return smart_decorator(func, create_decorator)


def inline_args(obj):   # XXX Deprecated
    return _apply_decorator(obj, _inline_args__func)



def _visitor_args_func_dec(func, visit_wrapper=None, static=False):
    def create_decorator(_f, with_self):
        if with_self:
            def f(self, *args, **kwargs):
                return _f(self, *args, **kwargs)
        else:
            def f(self, *args, **kwargs):
                return _f(*args, **kwargs)
        return f

    if static:
        f = wraps(func)(create_decorator(func, False))
    else:
        f = smart_decorator(func, create_decorator)
    f.vargs_applied = True
    f.visit_wrapper = visit_wrapper
    return f


def _vargs_inline(f, data, children, meta):
    return f(*children)
def _vargs_meta_inline(f, data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, data, children, meta):
    return f(children, meta)   # TODO swap these for consistency? Backwards incompatible!
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))

def v_args(inline=False, meta=False, tree=False, wrapper=None):
    "A convenience decorator factory, for modifying the behavior of user-supplied visitor methods"
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_decorator(obj, _visitor_args_func_dec, visit_wrapper=func)
    return _visitor_args_dec



class Indenter:
    def __init__(self):
        self.paren_level = None
        self.indent_level = None
        assert self.tab_len > 0

    def handle_NL(self, token):
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] # Tabs and spaces
        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            assert indent == self.indent_level[-1], '%s != %s' % (indent, self.indent_level[-1])

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                for t in self.handle_NL(token):
                    yield t
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    # XXX Hack for ContextualLexer. Maybe there's a more elegant solution?
    @property
    def always_accept(self):
        return (self.NL_type,)



class Symbol(Serialize):
    __slots__ = ('name',)

    is_term = NotImplemented

    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)



class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term = False



class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'empty_indices'

    def __init__(self, keep_all_tokens=False, expand1=False, priority=None, empty_indices=()):
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
        )


class Rule(Serialize):
    """
        origin : a symbol
        expansion : a list of symbols
        order : index of this expansion amongst all rules of the same name
    """
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion





class Pattern(Serialize):

    def __init__(self, value, flags=()):
        self.value = value
        self.flags = frozenset(flags)

    def __repr__(self):
        return repr(self.to_regexp())

    # Pattern Hashing assumes all subclasses have a different priority!
    def __hash__(self):
        return hash((type(self), self.value, self.flags))
    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    def to_regexp(self):
        raise NotImplementedError()

    if Py36:
        # Python 3.6 changed syntax for flags in regular expression
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s:%s)' % (f, value))
            return value

    else:
        def _get_flags(self, value):
            for f in self.flags:
                value = ('(?%s)' % f) + value
            return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type = "str"

    def to_regexp(self):
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self):
        return len(self.value)
    max_width = min_width

class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type = "re"

    def to_regexp(self):
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self):
        return self._get_width()[0]
    @property
    def max_width(self):
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    def __init__(self, name, pattern, priority=1):
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)



class Token(Str):
    __slots__ = ('type', 'pos_in_stream', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    def __new__(cls, type_, value, pos_in_stream=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        try:
            self = super(Token, cls).__new__(cls, value)
        except UnicodeDecodeError:
            value = value.decode('latin1')
            self = super(Token, cls).__new__(cls, value)

        self.type = type_
        self.pos_in_stream = pos_in_stream
        self.value = value
        self.line = line
        self.column = column
        self.end_line = end_line
        self.end_column = end_column
        self.end_pos = end_pos
        return self

    def update(self, type_=None, value=None):
        return Token.new_borrow_pos(
            type_ if type_ is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls, type_, value, borrow_t):
        return cls(type_, value, borrow_t.pos_in_stream, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.pos_in_stream, self.line, self.column, ))

    def __repr__(self):
        return 'Token(%s, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.pos_in_stream, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return Str.__eq__(self, other)

    __hash__ = Str.__hash__


class LineCounter:
    def __init__(self):
        self.newline_char = '\n'
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def feed(self, token, test_newline=True):
        """Consume a token and calculate the new line & column.

        As an optional optimization, set test_newline=False is token doesn't contain a newline.
        """
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1

class _Lex:
    "Built to serve both Lexer and ContextualLexer"
    def __init__(self, lexer, state=None):
        self.lexer = lexer
        self.state = state

    def lex(self, stream, newline_types, ignore_types):
        newline_types = frozenset(newline_types)
        ignore_types = frozenset(ignore_types)
        line_ctr = LineCounter()
        last_token = None

        while line_ctr.char_pos < len(stream):
            lexer = self.lexer
            res = lexer.match(stream, line_ctr.char_pos)
            if not res:
                allowed = {v for m, tfi in lexer.mres for v in tfi.values()} - ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(stream, line_ctr.char_pos, line_ctr.line, line_ctr.column, allowed=allowed, state=self.state, token_history=last_token and [last_token])

            value, type_ = res

            if type_ not in ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                line_ctr.feed(value, type_ in newline_types)
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in lexer.callback:
                    t = lexer.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise ValueError("Callbacks must return a token (returned %r)" % t)
                yield t
                last_token = t
            else:
                if type_ in lexer.callback:
                    t2 = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    lexer.callback[type_](t2)
                line_ctr.feed(value, type_ in newline_types)




class UnlessCallback:
    def __init__(self, mres):
        self.mres = mres

    def __call__(self, t):
        for mre, type_from_index in self.mres:
            m = mre.match(t.value)
            if m:
                t.type = type_from_index[m.lastindex]
                break
        return t

class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2





def _create_unless(terminals, g_regex_flags):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = [] # {}
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority > retok.priority:
                continue
            s = strtok.pattern.value
            m = re.match(retok.pattern.to_regexp(), s, g_regex_flags)
            if m and m.group(0) == s:
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(build_mres(unless, g_regex_flags, match_whole=True))

    terminals = [t for t in terminals if t not in embedded_strs]
    return terminals, callback


def _build_mres(terminals, max_size, g_regex_flags, match_whole):
    # Python sets an unreasonable group limit (currently 100) in its re module
    # Worse, the only way to know we reached it is by catching an AssertionError!
    # This function recursively tries less and less groups until it's successful.
    postfix = '$' if match_whole else ''
    mres = []
    while terminals:
        try:
            mre = re.compile(u'|'.join(u'(?P<%s>%s)'%(t.name, t.pattern.to_regexp()+postfix) for t in terminals[:max_size]), g_regex_flags)
        except AssertionError:  # Yes, this is what Python provides us.. :/
            return _build_mres(terminals, max_size//2, g_regex_flags, match_whole)

        # terms_from_name = {t.name: t for t in terminals[:max_size]}
        mres.append((mre, {i:n for n,i in mre.groupindex.items()} ))
        terminals = terminals[max_size:]
    return mres

def build_mres(terminals, g_regex_flags, match_whole=False):
    return _build_mres(terminals, len(terminals), g_regex_flags, match_whole)

def _regexp_has_newline(r):
    r"""Expressions that may indicate newlines in a regexp:
        - newlines (\n)
        - escaped newline (\\n)
        - anything but ([^...])
        - any-char (.) when the flag (?s) exists
        - spaces (\s)
    """
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)

class Lexer(object):
    """Lexer interface

    Method Signatures:
        lex(self, stream) -> Iterator[Token]
    """
    lex = NotImplemented


class TraditionalLexer(Lexer):

    def __init__(self, terminals, ignore=(), user_callbacks={}, g_regex_flags=0):
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        terminals = list(terminals)

        # Sanitization
        for t in terminals:
            try:
                re.compile(t.pattern.to_regexp(), g_regex_flags)
            except re.error:
                raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

            if t.pattern.min_width == 0:
                raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

        assert set(ignore) <= {t.name for t in terminals}

        # Init
        self.newline_types = [t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp())]
        self.ignore_types = list(ignore)

        terminals.sort(key=lambda x:(-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = user_callbacks
        self.build(g_regex_flags)

    def build(self, g_regex_flags=0):
        terminals, self.callback = _create_unless(self.terminals, g_regex_flags)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                # Already a callback there, probably UnlessCallback
                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self.mres = build_mres(terminals, g_regex_flags)

    def match(self, stream, pos):
        for mre, type_from_index in self.mres:
            m = mre.match(stream, pos)
            if m:
                return m.group(0), type_from_index[m.lastindex]

    def lex(self, stream):
        return _Lex(self).lex(stream, self.newline_types, self.ignore_types)




class ContextualLexer(Lexer):

    def __init__(self, terminals, states, ignore=(), always_accept=(), user_callbacks={}, g_regex_flags=0):
        tokens_by_name = {}
        for t in terminals:
            assert t.name not in tokens_by_name, t
            tokens_by_name[t.name] = t

        lexer_by_tokens = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(ignore) | set(always_accept)
                state_tokens = [tokens_by_name[n] for n in accepts if n and n in tokens_by_name]
                lexer = TraditionalLexer(state_tokens, ignore=ignore, user_callbacks=user_callbacks, g_regex_flags=g_regex_flags)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        self.root_lexer = TraditionalLexer(terminals, ignore=ignore, user_callbacks=user_callbacks, g_regex_flags=g_regex_flags)

    def lex(self, stream, get_parser_state):
        parser_state = get_parser_state()
        l = _Lex(self.lexers[parser_state], parser_state)
        try:
            for x in l.lex(stream, self.root_lexer.newline_types, self.root_lexer.ignore_types):
                yield x
                parser_state = get_parser_state()
                l.lexer = self.lexers[parser_state]
                l.state = parser_state # For debug only, no need to worry about multithreading
        except UnexpectedCharacters as e:
            # In the contextual lexer, UnexpectedCharacters can mean that the terminal is defined,
            # but not in the current context.
            # This tests the input against the global context, to provide a nicer error.
            root_match = self.root_lexer.match(stream, e.pos_in_stream)
            if not root_match:
                raise

            value, type_ = root_match
            t = Token(type_, value, e.pos_in_stream, e.line, e.column)
            raise UnexpectedToken(t, e.allowed, state=e.state)



class LexerConf(Serialize):
    __serialize_fields__ = 'tokens', 'ignore', 'g_regex_flags'
    __serialize_namespace__ = TerminalDef,

    def __init__(self, tokens, ignore=(), postlex=None, callbacks=None, g_regex_flags=0):
        self.tokens = tokens
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags

    def _deserialize(self):
        self.callbacks = {} # TODO


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)

class PropagatePositions:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            for c in children:
                if isinstance(c, Tree) and not c.meta.empty:
                    res.meta.line = c.meta.line
                    res.meta.column = c.meta.column
                    res.meta.start_pos = c.meta.start_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.line = c.line
                    res.meta.column = c.column
                    res.meta.start_pos = c.pos_in_stream
                    res.meta.empty = False
                    break

            for c in reversed(children):
                if isinstance(c, Tree) and not c.meta.empty:
                    res.meta.end_line = c.meta.end_line
                    res.meta.end_column = c.meta.end_column
                    res.meta.end_pos = c.meta.end_pos
                    res.meta.empty = False
                    break
                elif isinstance(c, Token):
                    res.meta.end_line = c.end_line
                    res.meta.end_column = c.end_column
                    res.meta.end_pos = c.end_pos
                    res.meta.empty = False
                    break

        return res


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)

class ChildFilterLALR_NoPlaceholders(ChildFilter):
    "Optimized childfilter for LALR (assumes no duplication in parse tree, so it's safe to change it)"
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   # Optimize for left-recursion
                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)

def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')

def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices):
    # Prepare empty_indices as: How many Nones to insert at each index?
    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            # LALR without placeholders
            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])

class AmbiguousExpander:
    """Deal with the case where we're expanding children ('_rule') into a parent but the children
       are ambiguous. i.e. (parent->_ambig->_expand_this_rule). In this case, make the parent itself
       ambiguous with as many copies as their are ambiguous children, and then copy the ambiguous children
       into the right parents in the right places, essentially shifting the ambiguiuty up the tree."""
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(child):
            return hasattr(child, 'data') and child.data == '_ambig'

        #### When we're repeatedly expanding ambiguities we can end up with nested ambiguities.
        #    All children of an _ambig node should be a derivation of that ambig node, hence
        #    it is safe to assume that if we see an _ambig node nested within an ambig node
        #    it is safe to simply expand it into the parent _ambig node as an alternative derivation.
        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                to_expand = [j for j, grandchild in enumerate(child.children) if _is_ambig_tree(grandchild)]
                child.expand_kids_by_index(*to_expand)

        if not ambiguous:
            return self.node_builder(children)

        expand = [ iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children) ]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])

def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)

def ptb_inline_args(func):
    @wraps(func)
    def f(children):
        return func(*children)
    return f

def inplace_transformer(func):
    @wraps(func)
    def f(children):
        # function name in a Transformer is a rule name.
        tree = Tree(func.__name__, children)
        return func(tree)
    return f

def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")
    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, keep_all_tokens=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.always_keep_all_tokens = keep_all_tokens
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        for rule in rules:
            options = rule.options
            keep_all_tokens = self.always_keep_all_tokens or options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                self.propagate_positions and PropagatePositions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
            ]))

            yield rule, wrapper_chain


    def create_callback(self, transformer=None):
        callbacks = {}

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                # XXX InlineTransformer is deprecated!
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                else:
                    if isinstance(transformer, InlineTransformer):
                        f = ptb_inline_args(f)
                    elif isinstance(transformer, Transformer_InPlace):
                        f = inplace_transformer(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks


class LALR_Parser(object):
    def __init__(self, parser_conf, debug=False):
        assert all(r.options.priority is None for r in parser_conf.rules), "LALR doesn't yet support prioritization"
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks)

    @classmethod
    def deserialize(cls, data, memo, callbacks):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks)
        return inst

    def serialize(self, memo):
        return self._parse_table.serialize(memo)

    def parse(self, *args):
        return self.parser.parse(*args)


class _Parser:
    def __init__(self, parse_table, callbacks):
        self.states = parse_table.states
        self.start_states = parse_table.start_states
        self.end_states = parse_table.end_states
        self.callbacks = callbacks

    def parse(self, seq, start, set_state=None):
        token = None
        stream = iter(seq)
        states = self.states

        start_state = self.start_states[start]
        end_state = self.end_states[start]

        state_stack = [start_state]
        value_stack = []

        if set_state: set_state(start_state)

        def get_action(token):
            state = state_stack[-1]
            try:
                return states[state][token.type]
            except KeyError:
                expected = [s for s in states[state].keys() if s.isupper()]
                raise UnexpectedToken(token, expected, state=state)

        def reduce(rule):
            size = len(rule.expansion)
            if size:
                s = value_stack[-size:]
                del state_stack[-size:]
                del value_stack[-size:]
            else:
                s = []

            value = self.callbacks[rule](s)

            _action, new_state = states[state_stack[-1]][rule.origin.name]
            assert _action is Shift
            state_stack.append(new_state)
            value_stack.append(value)

        # Main LALR-parser loop
        for token in stream:
            while True:
                action, arg = get_action(token)
                assert arg != end_state

                if action is Shift:
                    state_stack.append(arg)
                    value_stack.append(token)
                    if set_state: set_state(arg)
                    break # next token
                else:
                    reduce(arg)

        token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
        while True:
            _action, arg = get_action(token)
            assert(_action is Reduce)
            reduce(arg)
            if state_stack[-1] == end_state:
                return value_stack[-1]



class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')


class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()
        rules = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def get_frontend(parser, lexer):
    if parser=='lalr':
        if lexer is None:
            raise ValueError('The LALR parser requires use of a lexer')
        elif lexer == 'standard':
            return LALR_TraditionalLexer
        elif lexer == 'contextual':
            return LALR_ContextualLexer
        elif issubclass(lexer, Lexer):
            return partial(LALR_CustomLexer, lexer)
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser=='earley':
        if lexer=='standard':
            return Earley
        elif lexer=='dynamic':
            return XEarley
        elif lexer=='dynamic_complete':
            return XEarley_CompleteLex
        elif lexer=='contextual':
            raise ValueError('The Earley parser does not support the contextual parser')
        else:
            raise ValueError('Unknown lexer: %s' % lexer)
    elif parser == 'cyk':
        if lexer == 'standard':
            return CYK
        else:
            raise ValueError('CYK parser requires using standard parser.')
    else:
        raise ValueError('Unknown parser: %s' % parser)


class _ParserFrontend(Serialize):
    def _parse(self, input, start, *args):
        if start is None:
            start = self.start
            if len(start) > 1:
                raise ValueError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start)
            start ,= start
        return self.parser.parse(input, start, *args)


class WithLexer(_ParserFrontend):
    lexer = None
    parser = None
    lexer_conf = None
    start = None

    __serialize_fields__ = 'parser', 'lexer_conf', 'start'
    __serialize_namespace__ = LexerConf,

    def __init__(self, lexer_conf, parser_conf, options=None):
        self.lexer_conf = lexer_conf
        self.start = parser_conf.start
        self.postlex = lexer_conf.postlex

    @classmethod
    def deserialize(cls, data, memo, callbacks, postlex):
        inst = super(WithLexer, cls).deserialize(data, memo)
        inst.postlex = postlex
        inst.parser = LALR_Parser.deserialize(inst.parser, memo, callbacks)
        inst.init_lexer()
        return inst

    def _serialize(self, data, memo):
        data['parser'] = data['parser'].serialize(memo)

    def lex(self, *args):
        stream = self.lexer.lex(*args)
        return self.postlex.process(stream) if self.postlex else stream

    def parse(self, text, start=None):
        token_stream = self.lex(text)
        return self._parse(token_stream, start)

    def init_traditional_lexer(self):
        self.lexer = TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks, g_regex_flags=self.lexer_conf.g_regex_flags)

class LALR_WithLexer(WithLexer):
    def __init__(self, lexer_conf, parser_conf, options=None):
        debug = options.debug if options else False
        self.parser = LALR_Parser(parser_conf, debug=debug)
        WithLexer.__init__(self, lexer_conf, parser_conf, options)

        self.init_lexer()

    def init_lexer(self):
        raise NotImplementedError()

class LALR_TraditionalLexer(LALR_WithLexer):
    def init_lexer(self):
        self.init_traditional_lexer()

class LALR_ContextualLexer(LALR_WithLexer):
    def init_lexer(self):
        states = {idx:list(t.keys()) for idx, t in self.parser._parse_table.states.items()}
        always_accept = self.postlex.always_accept if self.postlex else ()
        self.lexer = ContextualLexer(self.lexer_conf.tokens, states,
                                     ignore=self.lexer_conf.ignore,
                                     always_accept=always_accept,
                                     user_callbacks=self.lexer_conf.callbacks,
                                     g_regex_flags=self.lexer_conf.g_regex_flags)


    def parse(self, text, start=None):
        parser_state = [None]
        def set_parser_state(s):
            parser_state[0] = s

        token_stream = self.lex(text, lambda: parser_state[0])
        return self._parse(token_stream, start, set_parser_state)


class LarkOptions(Serialize):
    """Specifies the options for Lark

    """
    OPTIONS_DOC = """
# General

    start - The start symbol. Either a string, or a list of strings for
            multiple possible starts (Default: "start")
    debug - Display debug information, such as warnings (default: False)
    transformer - Applies the transformer to every parse tree (equivlent to
                  applying it after the parse, but faster)
    propagate_positions - Propagates (line, column, end_line, end_column)
                          attributes into all tree branches.
    maybe_placeholders - When True, the `[]` operator returns `None` when not matched.
                         When `False`,  `[]` behaves like the `?` operator,
                             and returns no value at all.
                         (default=`False`. Recommended to set to `True`)
    cache_grammar - Cache the Lark grammar (Default: False)
    g_regex_flags - Flags that are applied to all terminals
                    (both regex and strings)
    keep_all_tokens - Prevent the tree builder from automagically
                      removing "punctuation" tokens (default: False)

# Algorithm

    parser - Decides which parser engine to use
             Accepts "earley" or "lalr". (Default: "earley")
             (there is also a "cyk" option for legacy)

    lexer - Decides whether or not to use a lexer stage
        "auto" (default): Choose for me based on the parser
        "standard": Use a standard lexer
        "contextual": Stronger lexer (only works with parser="lalr")
        "dynamic": Flexible and powerful (only with parser="earley")
        "dynamic_complete": Same as dynamic, but tries *every* variation
                            of tokenizing possible.

    ambiguity - Decides how to handle ambiguity in the parse.
                Only relevant if parser="earley"
        "resolve": The parser will automatically choose the simplest
                    derivation (it chooses consistently: greedy for
                    tokens, non-greedy for rules)
        "explicit": The parser will return all derivations wrapped
                    in "_ambig" tree nodes (i.e. a forest).

# Domain Specific

    postlex - Lexer post-processing (Default: None) Only works with the
                standard and contextual lexers.
    priority - How priorities should be evaluated - auto, none, normal,
                invert (Default: auto)
    lexer_callbacks - Dictionary of callbacks for the lexer. May alter
                        tokens during lexing. Use with caution.
    edit_terminals - A callback
    """
    if __doc__:
        __doc__ += OPTIONS_DOC

    _defaults = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache_grammar': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': False,
        'edit_terminals': None,
        'g_regex_flags': 0,
    }

    def __init__(self, options_dict):
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], STRING_TYPE):
            options['start'] = [options['start']]

        self.__dict__['options'] = options

        assert self.parser in ('earley', 'lalr', 'cyk', None)

        if self.parser == 'earley' and self.transformer:
            raise ValueError('Cannot specify an embedded transformer when using the Earley algorithm.'
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ValueError("Unknown options: %s" % o.keys())

    def __getattr__(self, name):
        try:
            return self.options[name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name, value):
        assert name in self.options
        self.options[name] = value

    def serialize(self, memo):
        return self.options

    @classmethod
    def deserialize(cls, data, memo):
        return cls(data)


class Lark(Serialize):
    def __init__(self, grammar, **options):
        """
            grammar : a string or file-object containing the grammar spec (using Lark's ebnf syntax)
            options : a dictionary controlling various aspects of Lark.
        """
        self.options = LarkOptions(options)

        # Some, but not all file-like objects have a 'name' attribute
        try:
            self.source = grammar.name
        except AttributeError:
            self.source = '<string>'

        # Drain file-like objects to get their contents
        try:
            read = grammar.read
        except AttributeError:
            pass
        else:
            grammar = read()

        assert isinstance(grammar, STRING_TYPE)

        if self.options.cache_grammar:
            raise NotImplementedError("Not available yet")

        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'standard'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        assert lexer in ('standard', 'contextual', 'dynamic', 'dynamic_complete') or issubclass(lexer, Lexer)

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            disambig_parsers = ['earley', 'cyk']
            assert self.options.parser in disambig_parsers, (
                'Only %s supports disambiguation right now') % ', '.join(disambig_parsers)

        if self.options.priority == 'auto':
            if self.options.parser in ('earley', 'cyk', ):
                self.options.priority = 'normal'
            elif self.options.parser in ('lalr', ):
                self.options.priority = None
        elif self.options.priority in ('invert', 'normal'):
            assert self.options.parser in ('earley', 'cyk'), "priorities are not supported for LALR at this time"

        assert self.options.priority in ('auto', None, 'normal', 'invert'), 'invalid priority option specified: {}. options are auto, none, normal, invert.'.format(self.options.priority)
        assert self.options.ambiguity not in ('resolve__antiscore_sum', ), 'resolve__antiscore_sum has been replaced with the option priority="invert"'
        assert self.options.ambiguity in ('resolve', 'explicit', 'auto', )

        # Parse the grammar file and compose the grammars (TODO)
        self.grammar = load_grammar(grammar, self.source)

        # Compile the EBNF grammar into BNF
        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name:t for t in self.terminals}

        # If the user asked to invert the priorities, negate them all here.
        # This replaces the old 'resolve__antiscore_sum' option.
        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
        # Else, if the user asked to disable priorities, strip them from the
        # rules. This allows the Earley parsers to skip an extra forest walk
        # for improved performance, if you don't need them (or didn't specify any).
        elif self.options.priority == None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None

        # TODO Deprecate lexer_callbacks?
        lexer_callbacks = dict(self.options.lexer_callbacks)
        if self.options.transformer:
            t = self.options.transformer
            for term in self.terminals:
                if hasattr(t, term.name):
                    lexer_callbacks[term.name] = getattr(t, term.name)

        self.lexer_conf = LexerConf(self.terminals, self.ignore_tokens, self.options.postlex, lexer_callbacks, self.options.g_regex_flags)

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

    if __init__.__doc__:
        __init__.__doc__ += "\nOptions:\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self):
        return TraditionalLexer(self.lexer_conf.tokens, ignore=self.lexer_conf.ignore, user_callbacks=self.lexer_conf.callbacks, g_regex_flags=self.lexer_conf.g_regex_flags)

    def _prepare_callbacks(self):
        self.parser_class = get_frontend(self.options.parser, self.options.lexer)
        self._parse_tree_builder = ParseTreeBuilder(self.rules, self.options.tree_class or Tree, self.options.propagate_positions, self.options.keep_all_tokens, self.options.parser!='lalr' and self.options.ambiguity=='explicit', self.options.maybe_placeholders)
        self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)

    def _build_parser(self):
        self._prepare_callbacks()
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return self.parser_class(self.lexer_conf, parser_conf, options=self.options)

    @classmethod
    def deserialize(cls, data, namespace, memo, transformer=None, postlex=None):
        if memo:
            memo = SerializeMemoizer.deserialize(memo, namespace, {})
        inst = cls.__new__(cls)
        options = dict(data['options'])
        if transformer is not None:
            options['transformer'] = transformer
        if postlex is not None:
            options['postlex'] = postlex
        inst.options = LarkOptions.deserialize(options, memo)
        inst.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        inst.source = '<deserialized>'
        inst._prepare_callbacks()
        inst.parser = inst.parser_class.deserialize(data['parser'], memo, inst._callbacks, inst.options.postlex)
        return inst

    def save(self, f):
        data, m = self.memo_serialize([TerminalDef, Rule])
        pickle.dump({'data': data, 'memo': m}, f)

    @classmethod
    def load(cls, f):
        d = pickle.load(f)
        namespace = {'Rule': Rule, 'TerminalDef': TerminalDef}
        memo = d['memo']
        return Lark.deserialize(d['data'], namespace, memo)


    @classmethod
    def open(cls, grammar_filename, rel_to=None, **options):
        """Create an instance of Lark with the grammar given by its filename

        If rel_to is provided, the function will find the grammar filename in relation to it.

        Example:

            >>> Lark.open("grammar_file.lark", rel_to=__file__, parser="lalr")
            Lark(...)

        """
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source, self.options.parser, self.options.lexer)


    def lex(self, text):
        "Only lex (and postlex) the text, without parsing it. Only relevant when lexer='standard'"
        if not hasattr(self, 'lexer'):
            self.lexer = self._build_lexer()
        stream = self.lexer.lex(text)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name):
        "Get information about a terminal"
        return self._terminals_dict[name]

    def parse(self, text, start=None):
        """Parse the given text, according to the options provided.

        The 'start' parameter is required if Lark was given multiple possible start symbols (using the start option).

        Returns a tree, unless specified otherwise.
        """
        return self.parser.parse(text, start=start)


DATA = (
{'parser': {'parser': {'tokens': {0: 'MM', 1: 'PP', 2: 'PERCENT', 3: '__ANON_6', 4: 'ATSIGN', 5: 'TT', 6: 'GT', 7: 'SUM', 8: '__ANON_2', 9: 'COMP', 10: '__ANON_8', 11: 'SLASH', 12: 'LT', 13: '__ANON_4', 14: 'EQ', 15: 'CONJ', 16: '__ANON_7', 17: 'DISJ', 18: 'QUOTE', 19: 'TRUE', 20: 'MINUS', 21: 'LPAR', 22: 'FALSE', 23: 'INT', 24: 'LSQB', 25: 'LBRACE', 26: 'VAR', 27: 'ESCAPED_STRING', 28: 'praline_mul', 29: 'var', 30: 'praline_atom', 31: 'operator_sym_char', 32: 'term', 33: 'ne', 34: '__operator_sym_plus_7', 35: 'praline_factorial', 36: 'praline_arith', 37: 'quant_qual', 38: 'app', 39: 'int', 40: 'ge', 41: 'praline_add', 42: 'praline_exp', 43: 'string', 44: 'operator', 45: '__ANON_9', 46: 'FORALL', 47: 'operator_sym', 48: 'EXISTS', 49: 'exists_sym', 50: 'praline_sub', 51: '__ANON_10', 52: 'le', 53: 'bool', 54: 'praline_div', 55: 'forall_sym', 56: '__ANON_3', 57: 'IF', 58: 'RPAR', 59: 'AND', 60: '_IS', 61: 'OR', 62: 'HAS', 63: 'RSQB', 64: 'COMMA', 65: 'PROVE', 66: 'SEQUENCE', 67: 'ELSE', 68: '$END', 69: 'LET', 70: 'THAT', 71: '__ANON_5', 72: 'SEMICOLON', 73: '__ANON_0', 74: 'COLON', 75: 'THEN', 76: 'RULE', 77: 'IN', 78: 'ASSUME', 79: 'PROOF', 80: 'SECTION', 81: 'DOT', 82: 'RBRACE', 83: 'ASSUMING', 84: 'PLUS', 85: 'CIRCUMFLEX', 86: 'BANG', 87: 'STAR', 88: 'assumption', 89: '__praline_add_star_9', 90: '__ANON_1', 91: '__app_star_14', 92: '__praline_div_plus_12', 93: '__praline_div_star_11', 94: 'PROPERTY', 95: 'seq_def', 96: '__sequence_star_3', 97: '__bool_plus_6', 98: '__bool_star_5', 99: '__praline_sub_star_8', 100: '__start_star_0', 101: 'start', 102: 'sequence', 103: 'definition', 104: '__praline_exp_star_13', 105: '__definition_plus_2', 106: '__praline_mul_star_10', 107: '__definition_plus_1', 108: '__term_star_4'}, 'states': {0: {0: (1, {'@': 67}), 1: (1, {'@': 67}), 2: (1, {'@': 67}), 3: (1, {'@': 67}), 4: (1, {'@': 67}), 5: (1, {'@': 67}), 6: (1, {'@': 67}), 7: (1, {'@': 67}), 8: (1, {'@': 67}), 9: (1, {'@': 67}), 10: (1, {'@': 67}), 11: (1, {'@': 67}), 12: (1, {'@': 67}), 13: (1, {'@': 67}), 14: (1, {'@': 67}), 15: (1, {'@': 67}), 16: (1, {'@': 67}), 17: (1, {'@': 67}), 18: (1, {'@': 67}), 19: (1, {'@': 67}), 20: (1, {'@': 67}), 21: (1, {'@': 67}), 22: (1, {'@': 67}), 23: (1, {'@': 67}), 24: (1, {'@': 67}), 25: (1, {'@': 67}), 26: (1, {'@': 67}), 27: (1, {'@': 67})}, 1: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 247), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 31), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 2: {7: (0, 183), 8: (0, 133)}, 3: {0: (1, {'@': 68}), 1: (1, {'@': 68}), 58: (1, {'@': 68}), 2: (1, {'@': 68}), 3: (1, {'@': 68}), 4: (1, {'@': 68}), 5: (1, {'@': 68}), 59: (1, {'@': 68}), 60: (1, {'@': 68}), 6: (1, {'@': 68}), 61: (1, {'@': 68}), 8: (1, {'@': 68}), 9: (1, {'@': 68}), 10: (1, {'@': 68}), 11: (1, {'@': 68}), 12: (1, {'@': 68}), 13: (1, {'@': 68}), 14: (1, {'@': 68}), 15: (1, {'@': 68}), 16: (1, {'@': 68}), 17: (1, {'@': 68}), 62: (1, {'@': 68}), 63: (1, {'@': 68}), 64: (1, {'@': 68}), 65: (1, {'@': 68}), 66: (1, {'@': 68}), 19: (1, {'@': 68}), 67: (1, {'@': 68}), 21: (1, {'@': 68}), 23: (1, {'@': 68}), 57: (1, {'@': 68}), 68: (1, {'@': 68}), 69: (1, {'@': 68}), 24: (1, {'@': 68}), 25: (1, {'@': 68}), 45: (1, {'@': 68}), 70: (1, {'@': 68}), 71: (1, {'@': 68}), 72: (1, {'@': 68}), 26: (1, {'@': 68}), 73: (1, {'@': 68}), 74: (1, {'@': 68}), 75: (1, {'@': 68}), 76: (1, {'@': 68}), 27: (1, {'@': 68}), 77: (1, {'@': 68}), 78: (1, {'@': 68}), 79: (1, {'@': 68}), 20: (1, {'@': 68}), 80: (1, {'@': 68}), 22: (1, {'@': 68}), 81: (1, {'@': 68}), 56: (1, {'@': 68}), 82: (1, {'@': 68}), 46: (1, {'@': 68}), 48: (1, {'@': 68}), 83: (1, {'@': 68}), 51: (1, {'@': 68})}, 4: {0: (1, {'@': 69}), 1: (1, {'@': 69}), 84: (1, {'@': 69}), 58: (1, {'@': 69}), 2: (1, {'@': 69}), 3: (1, {'@': 69}), 20: (1, {'@': 69}), 21: (1, {'@': 69}), 5: (1, {'@': 69}), 59: (1, {'@': 69}), 60: (1, {'@': 69}), 6: (1, {'@': 69}), 61: (1, {'@': 69}), 17: (1, {'@': 69}), 85: (1, {'@': 69}), 24: (1, {'@': 69}), 86: (1, {'@': 69}), 8: (1, {'@': 69}), 9: (1, {'@': 69}), 10: (1, {'@': 69}), 11: (1, {'@': 69}), 12: (1, {'@': 69}), 13: (1, {'@': 69}), 14: (1, {'@': 69}), 15: (1, {'@': 69}), 87: (1, {'@': 69}), 16: (1, {'@': 69}), 4: (1, {'@': 69}), 62: (1, {'@': 69}), 65: (1, {'@': 69}), 66: (1, {'@': 69}), 67: (1, {'@': 69}), 23: (1, {'@': 69}), 68: (1, {'@': 69}), 63: (1, {'@': 69}), 25: (1, {'@': 69}), 45: (1, {'@': 69}), 70: (1, {'@': 69}), 72: (1, {'@': 69}), 73: (1, {'@': 69}), 76: (1, {'@': 69}), 82: (1, {'@': 69}), 19: (1, {'@': 69}), 57: (1, {'@': 69}), 69: (1, {'@': 69}), 71: (1, {'@': 69}), 26: (1, {'@': 69}), 74: (1, {'@': 69}), 64: (1, {'@': 69}), 75: (1, {'@': 69}), 27: (1, {'@': 69}), 77: (1, {'@': 69}), 78: (1, {'@': 69}), 79: (1, {'@': 69}), 80: (1, {'@': 69}), 22: (1, {'@': 69}), 81: (1, {'@': 69}), 56: (1, {'@': 69}), 46: (1, {'@': 69}), 48: (1, {'@': 69}), 83: (1, {'@': 69}), 51: (1, {'@': 69})}, 5: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 61), 70: (0, 98), 33: (0, 220), 34: (0, 200), 88: (0, 44), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 81: (0, 22), 57: (0, 176)}, 6: {30: (0, 70), 19: (0, 57), 28: (0, 10), 42: (0, 81), 25: (0, 89), 24: (0, 8), 22: (0, 4), 21: (0, 79), 35: (0, 155), 23: (0, 160), 38: (0, 249), 39: (0, 236), 54: (0, 213), 43: (0, 127), 26: (0, 19), 41: (0, 198), 27: (0, 216), 29: (0, 66)}, 7: {65: (1, {'@': 70}), 66: (1, {'@': 70}), 67: (1, {'@': 70}), 5: (1, {'@': 70}), 23: (1, {'@': 70}), 68: (1, {'@': 70}), 62: (1, {'@': 70}), 8: (1, {'@': 70}), 25: (1, {'@': 70}), 45: (1, {'@': 70}), 70: (1, {'@': 70}), 63: (1, {'@': 70}), 72: (1, {'@': 70}), 11: (1, {'@': 70}), 73: (1, {'@': 70}), 76: (1, {'@': 70}), 87: (1, {'@': 70}), 16: (1, {'@': 70}), 4: (1, {'@': 70}), 0: (1, {'@': 70}), 60: (1, {'@': 70}), 82: (1, {'@': 70}), 15: (1, {'@': 70}), 1: (1, {'@': 70}), 19: (1, {'@': 70}), 21: (1, {'@': 70}), 6: (1, {'@': 70}), 61: (1, {'@': 70}), 57: (1, {'@': 70}), 85: (1, {'@': 70}), 69: (1, {'@': 70}), 24: (1, {'@': 70}), 9: (1, {'@': 70}), 71: (1, {'@': 70}), 10: (1, {'@': 70}), 26: (1, {'@': 70}), 13: (1, {'@': 70}), 74: (1, {'@': 70}), 64: (1, {'@': 70}), 75: (1, {'@': 70}), 27: (1, {'@': 70}), 77: (1, {'@': 70}), 17: (1, {'@': 70}), 78: (1, {'@': 70}), 58: (1, {'@': 70}), 84: (1, {'@': 70}), 79: (1, {'@': 70}), 2: (1, {'@': 70}), 3: (1, {'@': 70}), 20: (1, {'@': 70}), 80: (1, {'@': 70}), 22: (1, {'@': 70}), 59: (1, {'@': 70}), 81: (1, {'@': 70}), 56: (1, {'@': 70}), 46: (1, {'@': 70}), 48: (1, {'@': 70}), 12: (1, {'@': 70}), 83: (1, {'@': 70}), 51: (1, {'@': 70}), 14: (1, {'@': 70})}, 8: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 63: (0, 150), 31: (0, 162), 32: (0, 77), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 9: {60: (0, 80), 8: (0, 228), 58: (1, {'@': 71}), 62: (1, {'@': 71}), 64: (1, {'@': 71}), 63: (1, {'@': 71}), 65: (1, {'@': 71}), 66: (1, {'@': 71}), 1: (1, {'@': 71}), 19: (1, {'@': 71}), 67: (1, {'@': 71}), 21: (1, {'@': 71}), 5: (1, {'@': 71}), 6: (1, {'@': 71}), 23: (1, {'@': 71}), 57: (1, {'@': 71}), 68: (1, {'@': 71}), 69: (1, {'@': 71}), 24: (1, {'@': 71}), 25: (1, {'@': 71}), 45: (1, {'@': 71}), 70: (1, {'@': 71}), 71: (1, {'@': 71}), 9: (1, {'@': 71}), 10: (1, {'@': 71}), 72: (1, {'@': 71}), 11: (1, {'@': 71}), 26: (1, {'@': 71}), 73: (1, {'@': 71}), 74: (1, {'@': 71}), 13: (1, {'@': 71}), 75: (1, {'@': 71}), 76: (1, {'@': 71}), 27: (1, {'@': 71}), 77: (1, {'@': 71}), 16: (1, {'@': 71}), 4: (1, {'@': 71}), 17: (1, {'@': 71}), 78: (1, {'@': 71}), 0: (1, {'@': 71}), 79: (1, {'@': 71}), 2: (1, {'@': 71}), 3: (1, {'@': 71}), 20: (1, {'@': 71}), 80: (1, {'@': 71}), 22: (1, {'@': 71}), 81: (1, {'@': 71}), 56: (1, {'@': 71}), 82: (1, {'@': 71}), 46: (1, {'@': 71}), 48: (1, {'@': 71}), 12: (1, {'@': 71}), 83: (1, {'@': 71}), 51: (1, {'@': 71}), 15: (1, {'@': 71}), 14: (1, {'@': 71})}, 10: {84: (0, 37), 89: (0, 30), 0: (1, {'@': 72}), 1: (1, {'@': 72}), 58: (1, {'@': 72}), 2: (1, {'@': 72}), 3: (1, {'@': 72}), 20: (1, {'@': 72}), 5: (1, {'@': 72}), 59: (1, {'@': 72}), 60: (1, {'@': 72}), 6: (1, {'@': 72}), 61: (1, {'@': 72}), 17: (1, {'@': 72}), 8: (1, {'@': 72}), 9: (1, {'@': 72}), 10: (1, {'@': 72}), 11: (1, {'@': 72}), 12: (1, {'@': 72}), 13: (1, {'@': 72}), 14: (1, {'@': 72}), 15: (1, {'@': 72}), 16: (1, {'@': 72}), 4: (1, {'@': 72}), 62: (1, {'@': 72}), 65: (1, {'@': 72}), 66: (1, {'@': 72}), 19: (1, {'@': 72}), 67: (1, {'@': 72}), 21: (1, {'@': 72}), 23: (1, {'@': 72}), 57: (1, {'@': 72}), 68: (1, {'@': 72}), 69: (1, {'@': 72}), 24: (1, {'@': 72}), 63: (1, {'@': 72}), 25: (1, {'@': 72}), 45: (1, {'@': 72}), 70: (1, {'@': 72}), 71: (1, {'@': 72}), 72: (1, {'@': 72}), 26: (1, {'@': 72}), 73: (1, {'@': 72}), 74: (1, {'@': 72}), 64: (1, {'@': 72}), 75: (1, {'@': 72}), 76: (1, {'@': 72}), 27: (1, {'@': 72}), 77: (1, {'@': 72}), 78: (1, {'@': 72}), 79: (1, {'@': 72}), 80: (1, {'@': 72}), 22: (1, {'@': 72}), 81: (1, {'@': 72}), 56: (1, {'@': 72}), 82: (1, {'@': 72}), 46: (1, {'@': 72}), 48: (1, {'@': 72}), 83: (1, {'@': 72}), 51: (1, {'@': 72})}, 11: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 13), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 12: {64: (0, 64), 63: (0, 206)}, 13: {60: (0, 80), 8: (0, 228), 58: (1, {'@': 73}), 62: (1, {'@': 73}), 64: (1, {'@': 73}), 63: (1, {'@': 73}), 65: (1, {'@': 73}), 66: (1, {'@': 73}), 1: (1, {'@': 73}), 19: (1, {'@': 73}), 67: (1, {'@': 73}), 21: (1, {'@': 73}), 5: (1, {'@': 73}), 6: (1, {'@': 73}), 23: (1, {'@': 73}), 57: (1, {'@': 73}), 68: (1, {'@': 73}), 69: (1, {'@': 73}), 24: (1, {'@': 73}), 25: (1, {'@': 73}), 45: (1, {'@': 73}), 70: (1, {'@': 73}), 71: (1, {'@': 73}), 9: (1, {'@': 73}), 10: (1, {'@': 73}), 72: (1, {'@': 73}), 11: (1, {'@': 73}), 26: (1, {'@': 73}), 73: (1, {'@': 73}), 74: (1, {'@': 73}), 13: (1, {'@': 73}), 75: (1, {'@': 73}), 76: (1, {'@': 73}), 27: (1, {'@': 73}), 77: (1, {'@': 73}), 16: (1, {'@': 73}), 4: (1, {'@': 73}), 17: (1, {'@': 73}), 78: (1, {'@': 73}), 0: (1, {'@': 73}), 79: (1, {'@': 73}), 2: (1, {'@': 73}), 3: (1, {'@': 73}), 20: (1, {'@': 73}), 80: (1, {'@': 73}), 22: (1, {'@': 73}), 81: (1, {'@': 73}), 56: (1, {'@': 73}), 82: (1, {'@': 73}), 46: (1, {'@': 73}), 48: (1, {'@': 73}), 12: (1, {'@': 73}), 83: (1, {'@': 73}), 51: (1, {'@': 73}), 15: (1, {'@': 73}), 14: (1, {'@': 73})}, 14: {30: (0, 70), 19: (0, 57), 28: (0, 10), 42: (0, 81), 25: (0, 89), 24: (0, 8), 20: (0, 43), 44: (0, 42), 22: (0, 4), 21: (0, 79), 50: (0, 251), 35: (0, 155), 36: (0, 177), 23: (0, 160), 38: (0, 249), 39: (0, 236), 54: (0, 213), 41: (0, 132), 43: (0, 127), 26: (0, 19), 27: (0, 216), 29: (0, 66)}, 15: {0: (1, {'@': 74}), 1: (1, {'@': 74}), 84: (1, {'@': 74}), 58: (1, {'@': 74}), 2: (1, {'@': 74}), 3: (1, {'@': 74}), 20: (1, {'@': 74}), 21: (1, {'@': 74}), 5: (1, {'@': 74}), 59: (1, {'@': 74}), 60: (1, {'@': 74}), 6: (1, {'@': 74}), 61: (1, {'@': 74}), 17: (1, {'@': 74}), 85: (1, {'@': 74}), 24: (1, {'@': 74}), 86: (1, {'@': 74}), 8: (1, {'@': 74}), 9: (1, {'@': 74}), 10: (1, {'@': 74}), 11: (1, {'@': 74}), 12: (1, {'@': 74}), 13: (1, {'@': 74}), 14: (1, {'@': 74}), 15: (1, {'@': 74}), 87: (1, {'@': 74}), 16: (1, {'@': 74}), 4: (1, {'@': 74}), 62: (1, {'@': 74}), 65: (1, {'@': 74}), 66: (1, {'@': 74}), 67: (1, {'@': 74}), 23: (1, {'@': 74}), 68: (1, {'@': 74}), 63: (1, {'@': 74}), 25: (1, {'@': 74}), 45: (1, {'@': 74}), 70: (1, {'@': 74}), 72: (1, {'@': 74}), 73: (1, {'@': 74}), 76: (1, {'@': 74}), 82: (1, {'@': 74}), 19: (1, {'@': 74}), 57: (1, {'@': 74}), 69: (1, {'@': 74}), 71: (1, {'@': 74}), 26: (1, {'@': 74}), 74: (1, {'@': 74}), 64: (1, {'@': 74}), 75: (1, {'@': 74}), 27: (1, {'@': 74}), 77: (1, {'@': 74}), 78: (1, {'@': 74}), 79: (1, {'@': 74}), 80: (1, {'@': 74}), 22: (1, {'@': 74}), 81: (1, {'@': 74}), 56: (1, {'@': 74}), 46: (1, {'@': 74}), 48: (1, {'@': 74}), 83: (1, {'@': 74}), 51: (1, {'@': 74})}, 16: {65: (1, {'@': 75}), 66: (1, {'@': 75}), 1: (1, {'@': 75}), 19: (1, {'@': 75}), 21: (1, {'@': 75}), 5: (1, {'@': 75}), 6: (1, {'@': 75}), 23: (1, {'@': 75}), 57: (1, {'@': 75}), 68: (1, {'@': 75}), 69: (1, {'@': 75}), 24: (1, {'@': 75}), 25: (1, {'@': 75}), 8: (1, {'@': 75}), 45: (1, {'@': 75}), 9: (1, {'@': 75}), 10: (1, {'@': 75}), 26: (1, {'@': 75}), 11: (1, {'@': 75}), 13: (1, {'@': 75}), 76: (1, {'@': 75}), 27: (1, {'@': 75}), 16: (1, {'@': 75}), 17: (1, {'@': 75}), 4: (1, {'@': 75}), 78: (1, {'@': 75}), 0: (1, {'@': 75}), 79: (1, {'@': 75}), 2: (1, {'@': 75}), 3: (1, {'@': 75}), 20: (1, {'@': 75}), 80: (1, {'@': 75}), 22: (1, {'@': 75}), 56: (1, {'@': 75}), 46: (1, {'@': 75}), 48: (1, {'@': 75}), 12: (1, {'@': 75}), 51: (1, {'@': 75}), 14: (1, {'@': 75}), 15: (1, {'@': 75})}, 17: {0: (1, {'@': 76}), 1: (1, {'@': 76}), 84: (1, {'@': 76}), 58: (1, {'@': 76}), 2: (1, {'@': 76}), 3: (1, {'@': 76}), 20: (1, {'@': 76}), 5: (1, {'@': 76}), 59: (1, {'@': 76}), 60: (1, {'@': 76}), 6: (1, {'@': 76}), 61: (1, {'@': 76}), 17: (1, {'@': 76}), 85: (1, {'@': 76}), 8: (1, {'@': 76}), 9: (1, {'@': 76}), 10: (1, {'@': 76}), 11: (1, {'@': 76}), 12: (1, {'@': 76}), 13: (1, {'@': 76}), 14: (1, {'@': 76}), 15: (1, {'@': 76}), 87: (1, {'@': 76}), 16: (1, {'@': 76}), 4: (1, {'@': 76}), 62: (1, {'@': 76}), 65: (1, {'@': 76}), 66: (1, {'@': 76}), 19: (1, {'@': 76}), 67: (1, {'@': 76}), 21: (1, {'@': 76}), 23: (1, {'@': 76}), 57: (1, {'@': 76}), 68: (1, {'@': 76}), 69: (1, {'@': 76}), 24: (1, {'@': 76}), 63: (1, {'@': 76}), 25: (1, {'@': 76}), 45: (1, {'@': 76}), 70: (1, {'@': 76}), 71: (1, {'@': 76}), 72: (1, {'@': 76}), 26: (1, {'@': 76}), 73: (1, {'@': 76}), 74: (1, {'@': 76}), 64: (1, {'@': 76}), 75: (1, {'@': 76}), 76: (1, {'@': 76}), 27: (1, {'@': 76}), 77: (1, {'@': 76}), 78: (1, {'@': 76}), 79: (1, {'@': 76}), 80: (1, {'@': 76}), 22: (1, {'@': 76}), 81: (1, {'@': 76}), 56: (1, {'@': 76}), 82: (1, {'@': 76}), 46: (1, {'@': 76}), 48: (1, {'@': 76}), 83: (1, {'@': 76}), 51: (1, {'@': 76})}, 18: {81: (0, 62), 60: (1, {'@': 77}), 8: (1, {'@': 77})}, 19: {58: (1, {'@': 78}), 0: (1, {'@': 78}), 1: (1, {'@': 78}), 84: (1, {'@': 78}), 2: (1, {'@': 78}), 3: (1, {'@': 78}), 20: (1, {'@': 78}), 21: (1, {'@': 78}), 4: (1, {'@': 78}), 5: (1, {'@': 78}), 59: (1, {'@': 78}), 60: (1, {'@': 78}), 90: (1, {'@': 78}), 6: (1, {'@': 78}), 61: (1, {'@': 78}), 85: (1, {'@': 78}), 24: (1, {'@': 78}), 86: (1, {'@': 78}), 8: (1, {'@': 78}), 9: (1, {'@': 78}), 10: (1, {'@': 78}), 11: (1, {'@': 78}), 12: (1, {'@': 78}), 13: (1, {'@': 78}), 64: (1, {'@': 78}), 14: (1, {'@': 78}), 15: (1, {'@': 78}), 87: (1, {'@': 78}), 16: (1, {'@': 78}), 17: (1, {'@': 78}), 62: (1, {'@': 78}), 65: (1, {'@': 78}), 66: (1, {'@': 78}), 19: (1, {'@': 78}), 67: (1, {'@': 78}), 23: (1, {'@': 78}), 57: (1, {'@': 78}), 68: (1, {'@': 78}), 69: (1, {'@': 78}), 63: (1, {'@': 78}), 25: (1, {'@': 78}), 45: (1, {'@': 78}), 70: (1, {'@': 78}), 71: (1, {'@': 78}), 72: (1, {'@': 78}), 26: (1, {'@': 78}), 73: (1, {'@': 78}), 74: (1, {'@': 78}), 75: (1, {'@': 78}), 76: (1, {'@': 78}), 27: (1, {'@': 78}), 77: (1, {'@': 78}), 78: (1, {'@': 78}), 79: (1, {'@': 78}), 80: (1, {'@': 78}), 22: (1, {'@': 78}), 81: (1, {'@': 78}), 56: (1, {'@': 78}), 82: (1, {'@': 78}), 46: (1, {'@': 78}), 48: (1, {'@': 78}), 83: (1, {'@': 78}), 51: (1, {'@': 78})}, 20: {1: (1, {'@': 79}), 19: (1, {'@': 79}), 21: (1, {'@': 79}), 5: (1, {'@': 79}), 6: (1, {'@': 79}), 23: (1, {'@': 79}), 57: (1, {'@': 79}), 24: (1, {'@': 79}), 25: (1, {'@': 79}), 8: (1, {'@': 79}), 45: (1, {'@': 79}), 9: (1, {'@': 79}), 10: (1, {'@': 79}), 26: (1, {'@': 79}), 11: (1, {'@': 79}), 13: (1, {'@': 79}), 27: (1, {'@': 79}), 16: (1, {'@': 79}), 17: (1, {'@': 79}), 4: (1, {'@': 79}), 0: (1, {'@': 79}), 2: (1, {'@': 79}), 3: (1, {'@': 79}), 20: (1, {'@': 79}), 22: (1, {'@': 79}), 56: (1, {'@': 79}), 46: (1, {'@': 79}), 48: (1, {'@': 79}), 12: (1, {'@': 79}), 51: (1, {'@': 79}), 14: (1, {'@': 79}), 15: (1, {'@': 79})}, 21: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 74), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 22: {65: (1, {'@': 80}), 66: (1, {'@': 80}), 1: (1, {'@': 80}), 19: (1, {'@': 80}), 21: (1, {'@': 80}), 5: (1, {'@': 80}), 6: (1, {'@': 80}), 23: (1, {'@': 80}), 57: (1, {'@': 80}), 68: (1, {'@': 80}), 69: (1, {'@': 80}), 24: (1, {'@': 80}), 25: (1, {'@': 80}), 8: (1, {'@': 80}), 45: (1, {'@': 80}), 9: (1, {'@': 80}), 10: (1, {'@': 80}), 26: (1, {'@': 80}), 11: (1, {'@': 80}), 13: (1, {'@': 80}), 76: (1, {'@': 80}), 27: (1, {'@': 80}), 16: (1, {'@': 80}), 17: (1, {'@': 80}), 4: (1, {'@': 80}), 78: (1, {'@': 80}), 0: (1, {'@': 80}), 79: (1, {'@': 80}), 2: (1, {'@': 80}), 3: (1, {'@': 80}), 20: (1, {'@': 80}), 80: (1, {'@': 80}), 22: (1, {'@': 80}), 56: (1, {'@': 80}), 46: (1, {'@': 80}), 48: (1, {'@': 80}), 12: (1, {'@': 80}), 51: (1, {'@': 80}), 14: (1, {'@': 80}), 15: (1, {'@': 80})}, 23: {20: (0, 75), 0: (1, {'@': 81}), 1: (1, {'@': 81}), 58: (1, {'@': 81}), 2: (1, {'@': 81}), 3: (1, {'@': 81}), 4: (1, {'@': 81}), 5: (1, {'@': 81}), 59: (1, {'@': 81}), 60: (1, {'@': 81}), 6: (1, {'@': 81}), 61: (1, {'@': 81}), 8: (1, {'@': 81}), 9: (1, {'@': 81}), 10: (1, {'@': 81}), 11: (1, {'@': 81}), 12: (1, {'@': 81}), 13: (1, {'@': 81}), 14: (1, {'@': 81}), 15: (1, {'@': 81}), 16: (1, {'@': 81}), 17: (1, {'@': 81}), 62: (1, {'@': 81}), 63: (1, {'@': 81}), 64: (1, {'@': 81}), 65: (1, {'@': 81}), 66: (1, {'@': 81}), 19: (1, {'@': 81}), 67: (1, {'@': 81}), 21: (1, {'@': 81}), 23: (1, {'@': 81}), 57: (1, {'@': 81}), 68: (1, {'@': 81}), 69: (1, {'@': 81}), 24: (1, {'@': 81}), 25: (1, {'@': 81}), 45: (1, {'@': 81}), 70: (1, {'@': 81}), 71: (1, {'@': 81}), 72: (1, {'@': 81}), 26: (1, {'@': 81}), 73: (1, {'@': 81}), 74: (1, {'@': 81}), 75: (1, {'@': 81}), 76: (1, {'@': 81}), 27: (1, {'@': 81}), 77: (1, {'@': 81}), 78: (1, {'@': 81}), 79: (1, {'@': 81}), 80: (1, {'@': 81}), 22: (1, {'@': 81}), 81: (1, {'@': 81}), 56: (1, {'@': 81}), 82: (1, {'@': 81}), 46: (1, {'@': 81}), 48: (1, {'@': 81}), 83: (1, {'@': 81}), 51: (1, {'@': 81})}, 24: {60: (0, 80), 8: (0, 228), 73: (0, 243)}, 25: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 32: (0, 212), 11: (0, 140), 9: (0, 181), 31: (0, 162), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 26: {1: (1, {'@': 82}), 19: (1, {'@': 82}), 21: (1, {'@': 82}), 5: (1, {'@': 82}), 6: (1, {'@': 82}), 23: (1, {'@': 82}), 57: (1, {'@': 82}), 24: (1, {'@': 82}), 25: (1, {'@': 82}), 70: (1, {'@': 82}), 8: (1, {'@': 82}), 45: (1, {'@': 82}), 9: (1, {'@': 82}), 10: (1, {'@': 82}), 26: (1, {'@': 82}), 11: (1, {'@': 82}), 13: (1, {'@': 82}), 27: (1, {'@': 82}), 16: (1, {'@': 82}), 17: (1, {'@': 82}), 4: (1, {'@': 82}), 0: (1, {'@': 82}), 2: (1, {'@': 82}), 3: (1, {'@': 82}), 20: (1, {'@': 82}), 22: (1, {'@': 82}), 81: (1, {'@': 82}), 56: (1, {'@': 82}), 46: (1, {'@': 82}), 48: (1, {'@': 82}), 12: (1, {'@': 82}), 51: (1, {'@': 82}), 14: (1, {'@': 82}), 15: (1, {'@': 82})}, 27: {65: (1, {'@': 83}), 66: (1, {'@': 83}), 67: (1, {'@': 83}), 5: (1, {'@': 83}), 23: (1, {'@': 83}), 68: (1, {'@': 83}), 62: (1, {'@': 83}), 8: (1, {'@': 83}), 25: (1, {'@': 83}), 45: (1, {'@': 83}), 70: (1, {'@': 83}), 63: (1, {'@': 83}), 72: (1, {'@': 83}), 11: (1, {'@': 83}), 73: (1, {'@': 83}), 76: (1, {'@': 83}), 87: (1, {'@': 83}), 16: (1, {'@': 83}), 4: (1, {'@': 83}), 0: (1, {'@': 83}), 60: (1, {'@': 83}), 82: (1, {'@': 83}), 15: (1, {'@': 83}), 1: (1, {'@': 83}), 19: (1, {'@': 83}), 21: (1, {'@': 83}), 6: (1, {'@': 83}), 61: (1, {'@': 83}), 57: (1, {'@': 83}), 69: (1, {'@': 83}), 24: (1, {'@': 83}), 9: (1, {'@': 83}), 71: (1, {'@': 83}), 10: (1, {'@': 83}), 26: (1, {'@': 83}), 13: (1, {'@': 83}), 74: (1, {'@': 83}), 64: (1, {'@': 83}), 75: (1, {'@': 83}), 27: (1, {'@': 83}), 77: (1, {'@': 83}), 17: (1, {'@': 83}), 78: (1, {'@': 83}), 58: (1, {'@': 83}), 84: (1, {'@': 83}), 79: (1, {'@': 83}), 2: (1, {'@': 83}), 3: (1, {'@': 83}), 20: (1, {'@': 83}), 80: (1, {'@': 83}), 59: (1, {'@': 83}), 22: (1, {'@': 83}), 81: (1, {'@': 83}), 56: (1, {'@': 83}), 46: (1, {'@': 83}), 48: (1, {'@': 83}), 12: (1, {'@': 83}), 83: (1, {'@': 83}), 51: (1, {'@': 83}), 14: (1, {'@': 83})}, 28: {58: (1, {'@': 84}), 64: (1, {'@': 84})}, 29: {0: (1, {'@': 85}), 1: (1, {'@': 85}), 2: (1, {'@': 85}), 3: (1, {'@': 85}), 4: (1, {'@': 85}), 5: (1, {'@': 85}), 6: (1, {'@': 85}), 7: (1, {'@': 85}), 8: (1, {'@': 85}), 9: (1, {'@': 85}), 10: (1, {'@': 85}), 11: (1, {'@': 85}), 12: (1, {'@': 85}), 13: (1, {'@': 85}), 14: (1, {'@': 85}), 15: (1, {'@': 85}), 16: (1, {'@': 85}), 17: (1, {'@': 85}), 18: (1, {'@': 85}), 19: (1, {'@': 85}), 20: (1, {'@': 85}), 21: (1, {'@': 85}), 22: (1, {'@': 85}), 23: (1, {'@': 85}), 24: (1, {'@': 85}), 25: (1, {'@': 85}), 26: (1, {'@': 85}), 27: (1, {'@': 85})}, 30: {84: (0, 187), 0: (1, {'@': 86}), 1: (1, {'@': 86}), 58: (1, {'@': 86}), 2: (1, {'@': 86}), 3: (1, {'@': 86}), 20: (1, {'@': 86}), 5: (1, {'@': 86}), 59: (1, {'@': 86}), 60: (1, {'@': 86}), 6: (1, {'@': 86}), 61: (1, {'@': 86}), 17: (1, {'@': 86}), 8: (1, {'@': 86}), 9: (1, {'@': 86}), 10: (1, {'@': 86}), 11: (1, {'@': 86}), 12: (1, {'@': 86}), 13: (1, {'@': 86}), 14: (1, {'@': 86}), 15: (1, {'@': 86}), 16: (1, {'@': 86}), 4: (1, {'@': 86}), 62: (1, {'@': 86}), 65: (1, {'@': 86}), 66: (1, {'@': 86}), 19: (1, {'@': 86}), 67: (1, {'@': 86}), 21: (1, {'@': 86}), 23: (1, {'@': 86}), 57: (1, {'@': 86}), 68: (1, {'@': 86}), 69: (1, {'@': 86}), 24: (1, {'@': 86}), 63: (1, {'@': 86}), 25: (1, {'@': 86}), 45: (1, {'@': 86}), 70: (1, {'@': 86}), 71: (1, {'@': 86}), 72: (1, {'@': 86}), 26: (1, {'@': 86}), 73: (1, {'@': 86}), 74: (1, {'@': 86}), 64: (1, {'@': 86}), 75: (1, {'@': 86}), 76: (1, {'@': 86}), 27: (1, {'@': 86}), 77: (1, {'@': 86}), 78: (1, {'@': 86}), 79: (1, {'@': 86}), 80: (1, {'@': 86}), 22: (1, {'@': 86}), 81: (1, {'@': 86}), 56: (1, {'@': 86}), 82: (1, {'@': 86}), 46: (1, {'@': 86}), 48: (1, {'@': 86}), 83: (1, {'@': 86}), 51: (1, {'@': 86})}, 31: {60: (0, 80), 58: (0, 139), 8: (0, 228)}, 32: {1: (1, {'@': 87}), 19: (1, {'@': 87}), 21: (1, {'@': 87}), 5: (1, {'@': 87}), 6: (1, {'@': 87}), 23: (1, {'@': 87}), 57: (1, {'@': 87}), 24: (1, {'@': 87}), 25: (1, {'@': 87}), 8: (1, {'@': 87}), 45: (1, {'@': 87}), 9: (1, {'@': 87}), 10: (1, {'@': 87}), 26: (1, {'@': 87}), 11: (1, {'@': 87}), 13: (1, {'@': 87}), 27: (1, {'@': 87}), 16: (1, {'@': 87}), 17: (1, {'@': 87}), 4: (1, {'@': 87}), 0: (1, {'@': 87}), 2: (1, {'@': 87}), 3: (1, {'@': 87}), 20: (1, {'@': 87}), 22: (1, {'@': 87}), 81: (1, {'@': 87}), 56: (1, {'@': 87}), 46: (1, {'@': 87}), 48: (1, {'@': 87}), 12: (1, {'@': 87}), 51: (1, {'@': 87}), 14: (1, {'@': 87}), 15: (1, {'@': 87})}, 33: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 145), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 34: {65: (1, {'@': 88}), 66: (1, {'@': 88}), 1: (1, {'@': 88}), 19: (1, {'@': 88}), 21: (1, {'@': 88}), 5: (1, {'@': 88}), 6: (1, {'@': 88}), 23: (1, {'@': 88}), 57: (1, {'@': 88}), 68: (1, {'@': 88}), 69: (1, {'@': 88}), 24: (1, {'@': 88}), 25: (1, {'@': 88}), 8: (1, {'@': 88}), 45: (1, {'@': 88}), 9: (1, {'@': 88}), 10: (1, {'@': 88}), 26: (1, {'@': 88}), 11: (1, {'@': 88}), 13: (1, {'@': 88}), 76: (1, {'@': 88}), 27: (1, {'@': 88}), 16: (1, {'@': 88}), 17: (1, {'@': 88}), 4: (1, {'@': 88}), 78: (1, {'@': 88}), 0: (1, {'@': 88}), 79: (1, {'@': 88}), 2: (1, {'@': 88}), 3: (1, {'@': 88}), 20: (1, {'@': 88}), 80: (1, {'@': 88}), 22: (1, {'@': 88}), 56: (1, {'@': 88}), 46: (1, {'@': 88}), 48: (1, {'@': 88}), 12: (1, {'@': 88}), 51: (1, {'@': 88}), 14: (1, {'@': 88}), 15: (1, {'@': 88})}, 35: {30: (0, 70), 19: (0, 57), 42: (0, 81), 25: (0, 89), 24: (0, 8), 22: (0, 4), 21: (0, 79), 35: (0, 155), 23: (0, 160), 38: (0, 249), 39: (0, 236), 43: (0, 127), 26: (0, 19), 27: (0, 216), 29: (0, 66), 54: (0, 69)}, 36: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 9), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 37: {30: (0, 70), 19: (0, 57), 42: (0, 81), 25: (0, 89), 24: (0, 8), 22: (0, 4), 21: (0, 79), 35: (0, 155), 23: (0, 160), 38: (0, 249), 39: (0, 236), 54: (0, 213), 28: (0, 239), 43: (0, 127), 26: (0, 19), 27: (0, 216), 29: (0, 66)}, 38: {60: (0, 80), 91: (0, 118), 58: (0, 46), 64: (0, 55), 8: (0, 228)}, 39: {82: (0, 151), 60: (0, 80), 91: (0, 170), 64: (0, 55), 8: (0, 228)}, 40: {2: (0, 227), 3: (0, 126), 16: (0, 0), 34: (0, 200), 40: (0, 121), 0: (0, 91), 12: (0, 188), 9: (0, 137), 4: (0, 56), 17: (0, 50), 11: (0, 140), 10: (0, 29), 31: (0, 162), 47: (0, 207), 33: (0, 220), 13: (0, 167), 52: (0, 182), 14: (0, 197), 6: (0, 203), 1: (0, 245), 5: (0, 51), 15: (0, 178)}, 41: {65: (1, {'@': 89}), 66: (1, {'@': 89}), 67: (1, {'@': 89}), 5: (1, {'@': 89}), 23: (1, {'@': 89}), 68: (1, {'@': 89}), 62: (1, {'@': 89}), 8: (1, {'@': 89}), 25: (1, {'@': 89}), 45: (1, {'@': 89}), 70: (1, {'@': 89}), 63: (1, {'@': 89}), 72: (1, {'@': 89}), 11: (1, {'@': 89}), 73: (1, {'@': 89}), 76: (1, {'@': 89}), 16: (1, {'@': 89}), 4: (1, {'@': 89}), 0: (1, {'@': 89}), 60: (1, {'@': 89}), 82: (1, {'@': 89}), 15: (1, {'@': 89}), 1: (1, {'@': 89}), 19: (1, {'@': 89}), 21: (1, {'@': 89}), 6: (1, {'@': 89}), 61: (1, {'@': 89}), 57: (1, {'@': 89}), 69: (1, {'@': 89}), 24: (1, {'@': 89}), 9: (1, {'@': 89}), 71: (1, {'@': 89}), 10: (1, {'@': 89}), 26: (1, {'@': 89}), 13: (1, {'@': 89}), 74: (1, {'@': 89}), 64: (1, {'@': 89}), 75: (1, {'@': 89}), 27: (1, {'@': 89}), 77: (1, {'@': 89}), 17: (1, {'@': 89}), 78: (1, {'@': 89}), 58: (1, {'@': 89}), 84: (1, {'@': 89}), 79: (1, {'@': 89}), 2: (1, {'@': 89}), 3: (1, {'@': 89}), 20: (1, {'@': 89}), 80: (1, {'@': 89}), 59: (1, {'@': 89}), 22: (1, {'@': 89}), 81: (1, {'@': 89}), 56: (1, {'@': 89}), 46: (1, {'@': 89}), 48: (1, {'@': 89}), 12: (1, {'@': 89}), 83: (1, {'@': 89}), 51: (1, {'@': 89}), 14: (1, {'@': 89})}, 42: {2: (0, 227), 3: (0, 126), 16: (0, 0), 34: (0, 200), 40: (0, 121), 0: (0, 91), 12: (0, 188), 9: (0, 137), 4: (0, 56), 17: (0, 50), 11: (0, 140), 47: (0, 114), 10: (0, 29), 31: (0, 162), 33: (0, 220), 13: (0, 167), 52: (0, 182), 14: (0, 197), 6: (0, 203), 1: (0, 245), 5: (0, 51), 15: (0, 178), 65: (1, {'@': 90}), 66: (1, {'@': 90}), 67: (1, {'@': 90}), 23: (1, {'@': 90}), 68: (1, {'@': 90}), 62: (1, {'@': 90}), 8: (1, {'@': 90}), 25: (1, {'@': 90}), 45: (1, {'@': 90}), 70: (1, {'@': 90}), 63: (1, {'@': 90}), 72: (1, {'@': 90}), 73: (1, {'@': 90}), 76: (1, {'@': 90}), 60: (1, {'@': 90}), 82: (1, {'@': 90}), 19: (1, {'@': 90}), 21: (1, {'@': 90}), 61: (1, {'@': 90}), 57: (1, {'@': 90}), 69: (1, {'@': 90}), 24: (1, {'@': 90}), 71: (1, {'@': 90}), 26: (1, {'@': 90}), 74: (1, {'@': 90}), 64: (1, {'@': 90}), 75: (1, {'@': 90}), 27: (1, {'@': 90}), 77: (1, {'@': 90}), 78: (1, {'@': 90}), 58: (1, {'@': 90}), 79: (1, {'@': 90}), 20: (1, {'@': 90}), 80: (1, {'@': 90}), 22: (1, {'@': 90}), 81: (1, {'@': 90}), 56: (1, {'@': 90}), 46: (1, {'@': 90}), 48: (1, {'@': 90}), 83: (1, {'@': 90}), 51: (1, {'@': 90})}, 43: {30: (0, 70), 19: (0, 57), 28: (0, 10), 42: (0, 81), 25: (0, 89), 24: (0, 8), 22: (0, 4), 21: (0, 79), 35: (0, 155), 23: (0, 160), 38: (0, 249), 39: (0, 236), 54: (0, 213), 41: (0, 132), 43: (0, 127), 26: (0, 19), 50: (0, 3), 27: (0, 216), 29: (0, 66)}, 44: {64: (0, 26), 1: (1, {'@': 91}), 19: (1, {'@': 91}), 21: (1, {'@': 91}), 5: (1, {'@': 91}), 6: (1, {'@': 91}), 23: (1, {'@': 91}), 57: (1, {'@': 91}), 24: (1, {'@': 91}), 25: (1, {'@': 91}), 70: (1, {'@': 91}), 8: (1, {'@': 91}), 45: (1, {'@': 91}), 9: (1, {'@': 91}), 10: (1, {'@': 91}), 26: (1, {'@': 91}), 11: (1, {'@': 91}), 13: (1, {'@': 91}), 27: (1, {'@': 91}), 16: (1, {'@': 91}), 17: (1, {'@': 91}), 4: (1, {'@': 91}), 0: (1, {'@': 91}), 2: (1, {'@': 91}), 3: (1, {'@': 91}), 20: (1, {'@': 91}), 22: (1, {'@': 91}), 81: (1, {'@': 91}), 56: (1, {'@': 91}), 46: (1, {'@': 91}), 48: (1, {'@': 91}), 12: (1, {'@': 91}), 51: (1, {'@': 91}), 14: (1, {'@': 91}), 15: (1, {'@': 91})}, 45: {60: (0, 192), 8: (0, 228)}, 46: {0: (1, {'@': 92}), 1: (1, {'@': 92}), 84: (1, {'@': 92}), 58: (1, {'@': 92}), 2: (1, {'@': 92}), 3: (1, {'@': 92}), 20: (1, {'@': 92}), 4: (1, {'@': 92}), 5: (1, {'@': 92}), 59: (1, {'@': 92}), 60: (1, {'@': 92}), 6: (1, {'@': 92}), 61: (1, {'@': 92}), 85: (1, {'@': 92}), 86: (1, {'@': 92}), 8: (1, {'@': 92}), 9: (1, {'@': 92}), 10: (1, {'@': 92}), 11: (1, {'@': 92}), 12: (1, {'@': 92}), 13: (1, {'@': 92}), 14: (1, {'@': 92}), 15: (1, {'@': 92}), 87: (1, {'@': 92}), 16: (1, {'@': 92}), 17: (1, {'@': 92}), 62: (1, {'@': 92}), 65: (1, {'@': 92}), 66: (1, {'@': 92}), 19: (1, {'@': 92}), 67: (1, {'@': 92}), 21: (1, {'@': 92}), 23: (1, {'@': 92}), 57: (1, {'@': 92}), 68: (1, {'@': 92}), 69: (1, {'@': 92}), 24: (1, {'@': 92}), 63: (1, {'@': 92}), 25: (1, {'@': 92}), 45: (1, {'@': 92}), 70: (1, {'@': 92}), 71: (1, {'@': 92}), 72: (1, {'@': 92}), 26: (1, {'@': 92}), 73: (1, {'@': 92}), 74: (1, {'@': 92}), 64: (1, {'@': 92}), 75: (1, {'@': 92}), 76: (1, {'@': 92}), 27: (1, {'@': 92}), 77: (1, {'@': 92}), 78: (1, {'@': 92}), 79: (1, {'@': 92}), 80: (1, {'@': 92}), 22: (1, {'@': 92}), 81: (1, {'@': 92}), 56: (1, {'@': 92}), 82: (1, {'@': 92}), 46: (1, {'@': 92}), 48: (1, {'@': 92}), 83: (1, {'@': 92}), 51: (1, {'@': 92})}, 47: {1: (1, {'@': 93}), 19: (1, {'@': 93}), 21: (1, {'@': 93}), 5: (1, {'@': 93}), 6: (1, {'@': 93}), 23: (1, {'@': 93}), 57: (1, {'@': 93}), 24: (1, {'@': 93}), 25: (1, {'@': 93}), 8: (1, {'@': 93}), 45: (1, {'@': 93}), 9: (1, {'@': 93}), 10: (1, {'@': 93}), 26: (1, {'@': 93}), 11: (1, {'@': 93}), 13: (1, {'@': 93}), 27: (1, {'@': 93}), 16: (1, {'@': 93}), 17: (1, {'@': 93}), 4: (1, {'@': 93}), 0: (1, {'@': 93}), 2: (1, {'@': 93}), 3: (1, {'@': 93}), 20: (1, {'@': 93}), 22: (1, {'@': 93}), 56: (1, {'@': 93}), 46: (1, {'@': 93}), 48: (1, {'@': 93}), 12: (1, {'@': 93}), 51: (1, {'@': 93}), 14: (1, {'@': 93}), 15: (1, {'@': 93})}, 48: {65: (1, {'@': 94}), 66: (1, {'@': 94}), 67: (1, {'@': 94}), 5: (1, {'@': 94}), 23: (1, {'@': 94}), 68: (1, {'@': 94}), 62: (1, {'@': 94}), 8: (1, {'@': 94}), 25: (1, {'@': 94}), 45: (1, {'@': 94}), 70: (1, {'@': 94}), 63: (1, {'@': 94}), 72: (1, {'@': 94}), 11: (1, {'@': 94}), 73: (1, {'@': 94}), 76: (1, {'@': 94}), 87: (1, {'@': 94}), 16: (1, {'@': 94}), 4: (1, {'@': 94}), 0: (1, {'@': 94}), 60: (1, {'@': 94}), 82: (1, {'@': 94}), 15: (1, {'@': 94}), 1: (1, {'@': 94}), 19: (1, {'@': 94}), 21: (1, {'@': 94}), 6: (1, {'@': 94}), 61: (1, {'@': 94}), 57: (1, {'@': 94}), 69: (1, {'@': 94}), 24: (1, {'@': 94}), 9: (1, {'@': 94}), 71: (1, {'@': 94}), 10: (1, {'@': 94}), 26: (1, {'@': 94}), 13: (1, {'@': 94}), 74: (1, {'@': 94}), 64: (1, {'@': 94}), 75: (1, {'@': 94}), 27: (1, {'@': 94}), 77: (1, {'@': 94}), 17: (1, {'@': 94}), 78: (1, {'@': 94}), 58: (1, {'@': 94}), 84: (1, {'@': 94}), 79: (1, {'@': 94}), 2: (1, {'@': 94}), 3: (1, {'@': 94}), 20: (1, {'@': 94}), 80: (1, {'@': 94}), 59: (1, {'@': 94}), 22: (1, {'@': 94}), 81: (1, {'@': 94}), 56: (1, {'@': 94}), 46: (1, {'@': 94}), 48: (1, {'@': 94}), 12: (1, {'@': 94}), 83: (1, {'@': 94}), 51: (1, {'@': 94}), 14: (1, {'@': 94})}, 49: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 202), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 50: {0: (1, {'@': 95}), 1: (1, {'@': 95}), 2: (1, {'@': 95}), 3: (1, {'@': 95}), 4: (1, {'@': 95}), 5: (1, {'@': 95}), 6: (1, {'@': 95}), 7: (1, {'@': 95}), 8: (1, {'@': 95}), 9: (1, {'@': 95}), 10: (1, {'@': 95}), 11: (1, {'@': 95}), 12: (1, {'@': 95}), 13: (1, {'@': 95}), 14: (1, {'@': 95}), 15: (1, {'@': 95}), 16: (1, {'@': 95}), 17: (1, {'@': 95}), 18: (1, {'@': 95}), 19: (1, {'@': 95}), 20: (1, {'@': 95}), 21: (1, {'@': 95}), 22: (1, {'@': 95}), 23: (1, {'@': 95}), 24: (1, {'@': 95}), 25: (1, {'@': 95}), 26: (1, {'@': 95}), 27: (1, {'@': 95})}, 51: {0: (1, {'@': 96}), 1: (1, {'@': 96}), 2: (1, {'@': 96}), 3: (1, {'@': 96}), 4: (1, {'@': 96}), 5: (1, {'@': 96}), 6: (1, {'@': 96}), 7: (1, {'@': 96}), 8: (1, {'@': 96}), 9: (1, {'@': 96}), 10: (1, {'@': 96}), 11: (1, {'@': 96}), 12: (1, {'@': 96}), 13: (1, {'@': 96}), 14: (1, {'@': 96}), 15: (1, {'@': 96}), 16: (1, {'@': 96}), 17: (1, {'@': 96}), 18: (1, {'@': 96}), 19: (1, {'@': 96}), 20: (1, {'@': 96}), 21: (1, {'@': 96}), 22: (1, {'@': 96}), 23: (1, {'@': 96}), 24: (1, {'@': 96}), 25: (1, {'@': 96}), 26: (1, {'@': 96}), 27: (1, {'@': 96})}, 52: {2: (0, 227), 3: (0, 126), 16: (0, 0), 34: (0, 200), 40: (0, 121), 0: (0, 91), 12: (0, 188), 9: (0, 137), 4: (0, 56), 17: (0, 50), 11: (0, 140), 47: (0, 114), 10: (0, 29), 31: (0, 162), 33: (0, 220), 13: (0, 167), 52: (0, 182), 14: (0, 197), 6: (0, 203), 1: (0, 245), 5: (0, 51), 15: (0, 178), 65: (1, {'@': 97}), 66: (1, {'@': 97}), 67: (1, {'@': 97}), 23: (1, {'@': 97}), 68: (1, {'@': 97}), 62: (1, {'@': 97}), 8: (1, {'@': 97}), 25: (1, {'@': 97}), 45: (1, {'@': 97}), 70: (1, {'@': 97}), 63: (1, {'@': 97}), 72: (1, {'@': 97}), 73: (1, {'@': 97}), 76: (1, {'@': 97}), 60: (1, {'@': 97}), 82: (1, {'@': 97}), 19: (1, {'@': 97}), 21: (1, {'@': 97}), 61: (1, {'@': 97}), 57: (1, {'@': 97}), 69: (1, {'@': 97}), 24: (1, {'@': 97}), 71: (1, {'@': 97}), 26: (1, {'@': 97}), 74: (1, {'@': 97}), 64: (1, {'@': 97}), 75: (1, {'@': 97}), 27: (1, {'@': 97}), 77: (1, {'@': 97}), 78: (1, {'@': 97}), 58: (1, {'@': 97}), 79: (1, {'@': 97}), 20: (1, {'@': 97}), 80: (1, {'@': 97}), 22: (1, {'@': 97}), 81: (1, {'@': 97}), 56: (1, {'@': 97}), 46: (1, {'@': 97}), 48: (1, {'@': 97}), 83: (1, {'@': 97}), 51: (1, {'@': 97})}, 53: {30: (0, 70), 19: (0, 57), 42: (0, 81), 25: (0, 89), 24: (0, 8), 22: (0, 4), 21: (0, 79), 35: (0, 155), 23: (0, 160), 38: (0, 249), 54: (0, 194), 39: (0, 236), 43: (0, 127), 26: (0, 19), 27: (0, 216), 29: (0, 66)}, 54: {0: (1, {'@': 98}), 1: (1, {'@': 98}), 2: (1, {'@': 98}), 3: (1, {'@': 98}), 4: (1, {'@': 98}), 5: (1, {'@': 98}), 6: (1, {'@': 98}), 7: (1, {'@': 98}), 8: (1, {'@': 98}), 9: (1, {'@': 98}), 10: (1, {'@': 98}), 11: (1, {'@': 98}), 12: (1, {'@': 98}), 13: (1, {'@': 98}), 14: (1, {'@': 98}), 15: (1, {'@': 98}), 16: (1, {'@': 98}), 17: (1, {'@': 98}), 18: (1, {'@': 98}), 19: (1, {'@': 98}), 20: (1, {'@': 98}), 21: (1, {'@': 98}), 22: (1, {'@': 98}), 23: (1, {'@': 98}), 24: (1, {'@': 98}), 25: (1, {'@': 98}), 26: (1, {'@': 98}), 27: (1, {'@': 98})}, 55: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 232), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 56: {0: (1, {'@': 99}), 1: (1, {'@': 99}), 2: (1, {'@': 99}), 3: (1, {'@': 99}), 4: (1, {'@': 99}), 5: (1, {'@': 99}), 6: (1, {'@': 99}), 7: (1, {'@': 99}), 8: (1, {'@': 99}), 9: (1, {'@': 99}), 10: (1, {'@': 99}), 11: (1, {'@': 99}), 12: (1, {'@': 99}), 13: (1, {'@': 99}), 14: (1, {'@': 99}), 15: (1, {'@': 99}), 16: (1, {'@': 99}), 17: (1, {'@': 99}), 18: (1, {'@': 99}), 19: (1, {'@': 99}), 20: (1, {'@': 99}), 21: (1, {'@': 99}), 22: (1, {'@': 99}), 23: (1, {'@': 99}), 24: (1, {'@': 99}), 25: (1, {'@': 99}), 26: (1, {'@': 99}), 27: (1, {'@': 99})}, 57: {0: (1, {'@': 100}), 1: (1, {'@': 100}), 84: (1, {'@': 100}), 58: (1, {'@': 100}), 2: (1, {'@': 100}), 3: (1, {'@': 100}), 20: (1, {'@': 100}), 21: (1, {'@': 100}), 5: (1, {'@': 100}), 59: (1, {'@': 100}), 60: (1, {'@': 100}), 6: (1, {'@': 100}), 61: (1, {'@': 100}), 17: (1, {'@': 100}), 85: (1, {'@': 100}), 24: (1, {'@': 100}), 86: (1, {'@': 100}), 8: (1, {'@': 100}), 9: (1, {'@': 100}), 10: (1, {'@': 100}), 11: (1, {'@': 100}), 12: (1, {'@': 100}), 13: (1, {'@': 100}), 14: (1, {'@': 100}), 15: (1, {'@': 100}), 87: (1, {'@': 100}), 16: (1, {'@': 100}), 4: (1, {'@': 100}), 62: (1, {'@': 100}), 65: (1, {'@': 100}), 66: (1, {'@': 100}), 67: (1, {'@': 100}), 23: (1, {'@': 100}), 68: (1, {'@': 100}), 63: (1, {'@': 100}), 25: (1, {'@': 100}), 45: (1, {'@': 100}), 70: (1, {'@': 100}), 72: (1, {'@': 100}), 73: (1, {'@': 100}), 76: (1, {'@': 100}), 82: (1, {'@': 100}), 19: (1, {'@': 100}), 57: (1, {'@': 100}), 69: (1, {'@': 100}), 71: (1, {'@': 100}), 26: (1, {'@': 100}), 74: (1, {'@': 100}), 64: (1, {'@': 100}), 75: (1, {'@': 100}), 27: (1, {'@': 100}), 77: (1, {'@': 100}), 78: (1, {'@': 100}), 79: (1, {'@': 100}), 80: (1, {'@': 100}), 22: (1, {'@': 100}), 81: (1, {'@': 100}), 56: (1, {'@': 100}), 46: (1, {'@': 100}), 48: (1, {'@': 100}), 83: (1, {'@': 100}), 51: (1, {'@': 100})}, 58: {60: (0, 80), 8: (0, 228), 58: (1, {'@': 101}), 62: (1, {'@': 101}), 64: (1, {'@': 101}), 63: (1, {'@': 101}), 65: (1, {'@': 101}), 66: (1, {'@': 101}), 1: (1, {'@': 101}), 19: (1, {'@': 101}), 67: (1, {'@': 101}), 21: (1, {'@': 101}), 5: (1, {'@': 101}), 6: (1, {'@': 101}), 23: (1, {'@': 101}), 57: (1, {'@': 101}), 68: (1, {'@': 101}), 69: (1, {'@': 101}), 24: (1, {'@': 101}), 25: (1, {'@': 101}), 45: (1, {'@': 101}), 70: (1, {'@': 101}), 71: (1, {'@': 101}), 9: (1, {'@': 101}), 10: (1, {'@': 101}), 72: (1, {'@': 101}), 11: (1, {'@': 101}), 26: (1, {'@': 101}), 73: (1, {'@': 101}), 74: (1, {'@': 101}), 13: (1, {'@': 101}), 75: (1, {'@': 101}), 76: (1, {'@': 101}), 27: (1, {'@': 101}), 77: (1, {'@': 101}), 16: (1, {'@': 101}), 4: (1, {'@': 101}), 17: (1, {'@': 101}), 78: (1, {'@': 101}), 0: (1, {'@': 101}), 79: (1, {'@': 101}), 2: (1, {'@': 101}), 3: (1, {'@': 101}), 20: (1, {'@': 101}), 80: (1, {'@': 101}), 22: (1, {'@': 101}), 81: (1, {'@': 101}), 56: (1, {'@': 101}), 82: (1, {'@': 101}), 46: (1, {'@': 101}), 48: (1, {'@': 101}), 12: (1, {'@': 101}), 83: (1, {'@': 101}), 51: (1, {'@': 101}), 15: (1, {'@': 101}), 14: (1, {'@': 101})}, 59: {2: (0, 227), 3: (0, 126), 16: (0, 0), 34: (0, 200), 40: (0, 121), 0: (0, 91), 12: (0, 188), 9: (0, 137), 4: (0, 56), 17: (0, 50), 11: (0, 140), 47: (0, 114), 10: (0, 29), 31: (0, 162), 33: (0, 220), 13: (0, 167), 52: (0, 182), 14: (0, 197), 6: (0, 203), 1: (0, 245), 5: (0, 51), 15: (0, 178), 58: (1, {'@': 102}), 60: (1, {'@': 102}), 8: (1, {'@': 102}), 62: (1, {'@': 102}), 64: (1, {'@': 102}), 63: (1, {'@': 102}), 65: (1, {'@': 102}), 66: (1, {'@': 102}), 19: (1, {'@': 102}), 67: (1, {'@': 102}), 21: (1, {'@': 102}), 23: (1, {'@': 102}), 57: (1, {'@': 102}), 68: (1, {'@': 102}), 69: (1, {'@': 102}), 24: (1, {'@': 102}), 25: (1, {'@': 102}), 45: (1, {'@': 102}), 70: (1, {'@': 102}), 71: (1, {'@': 102}), 72: (1, {'@': 102}), 26: (1, {'@': 102}), 73: (1, {'@': 102}), 74: (1, {'@': 102}), 75: (1, {'@': 102}), 76: (1, {'@': 102}), 27: (1, {'@': 102}), 77: (1, {'@': 102}), 78: (1, {'@': 102}), 79: (1, {'@': 102}), 20: (1, {'@': 102}), 80: (1, {'@': 102}), 22: (1, {'@': 102}), 81: (1, {'@': 102}), 56: (1, {'@': 102}), 82: (1, {'@': 102}), 46: (1, {'@': 102}), 48: (1, {'@': 102}), 83: (1, {'@': 102}), 51: (1, {'@': 102})}, 60: {60: (0, 80), 81: (0, 258), 8: (0, 228), 74: (0, 184)}, 61: {60: (0, 80), 8: (0, 228), 62: (0, 84)}, 62: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 120), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 63: {61: (0, 14), 58: (1, {'@': 103}), 60: (1, {'@': 103}), 8: (1, {'@': 103}), 62: (1, {'@': 103}), 64: (1, {'@': 103}), 63: (1, {'@': 103}), 65: (1, {'@': 103}), 66: (1, {'@': 103}), 1: (1, {'@': 103}), 19: (1, {'@': 103}), 67: (1, {'@': 103}), 21: (1, {'@': 103}), 5: (1, {'@': 103}), 6: (1, {'@': 103}), 23: (1, {'@': 103}), 57: (1, {'@': 103}), 68: (1, {'@': 103}), 69: (1, {'@': 103}), 24: (1, {'@': 103}), 25: (1, {'@': 103}), 45: (1, {'@': 103}), 70: (1, {'@': 103}), 71: (1, {'@': 103}), 9: (1, {'@': 103}), 10: (1, {'@': 103}), 72: (1, {'@': 103}), 11: (1, {'@': 103}), 26: (1, {'@': 103}), 73: (1, {'@': 103}), 74: (1, {'@': 103}), 13: (1, {'@': 103}), 75: (1, {'@': 103}), 76: (1, {'@': 103}), 27: (1, {'@': 103}), 77: (1, {'@': 103}), 16: (1, {'@': 103}), 4: (1, {'@': 103}), 17: (1, {'@': 103}), 78: (1, {'@': 103}), 0: (1, {'@': 103}), 79: (1, {'@': 103}), 2: (1, {'@': 103}), 3: (1, {'@': 103}), 20: (1, {'@': 103}), 80: (1, {'@': 103}), 22: (1, {'@': 103}), 81: (1, {'@': 103}), 56: (1, {'@': 103}), 82: (1, {'@': 103}), 46: (1, {'@': 103}), 48: (1, {'@': 103}), 12: (1, {'@': 103}), 83: (1, {'@': 103}), 51: (1, {'@': 103}), 15: (1, {'@': 103}), 14: (1, {'@': 103})}, 64: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 149), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 65: {1: (1, {'@': 104}), 19: (1, {'@': 104}), 21: (1, {'@': 104}), 5: (1, {'@': 104}), 6: (1, {'@': 104}), 23: (1, {'@': 104}), 57: (1, {'@': 104}), 24: (1, {'@': 104}), 25: (1, {'@': 104}), 70: (1, {'@': 104}), 8: (1, {'@': 104}), 45: (1, {'@': 104}), 9: (1, {'@': 104}), 10: (1, {'@': 104}), 26: (1, {'@': 104}), 11: (1, {'@': 104}), 13: (1, {'@': 104}), 27: (1, {'@': 104}), 16: (1, {'@': 104}), 17: (1, {'@': 104}), 4: (1, {'@': 104}), 0: (1, {'@': 104}), 2: (1, {'@': 104}), 3: (1, {'@': 104}), 20: (1, {'@': 104}), 22: (1, {'@': 104}), 81: (1, {'@': 104}), 56: (1, {'@': 104}), 46: (1, {'@': 104}), 48: (1, {'@': 104}), 12: (1, {'@': 104}), 51: (1, {'@': 104}), 14: (1, {'@': 104}), 15: (1, {'@': 104})}, 66: {65: (1, {'@': 105}), 66: (1, {'@': 105}), 67: (1, {'@': 105}), 5: (1, {'@': 105}), 23: (1, {'@': 105}), 68: (1, {'@': 105}), 62: (1, {'@': 105}), 86: (1, {'@': 105}), 8: (1, {'@': 105}), 63: (1, {'@': 105}), 25: (1, {'@': 105}), 45: (1, {'@': 105}), 70: (1, {'@': 105}), 72: (1, {'@': 105}), 11: (1, {'@': 105}), 73: (1, {'@': 105}), 76: (1, {'@': 105}), 87: (1, {'@': 105}), 16: (1, {'@': 105}), 4: (1, {'@': 105}), 0: (1, {'@': 105}), 60: (1, {'@': 105}), 82: (1, {'@': 105}), 15: (1, {'@': 105}), 1: (1, {'@': 105}), 19: (1, {'@': 105}), 21: (1, {'@': 105}), 6: (1, {'@': 105}), 61: (1, {'@': 105}), 57: (1, {'@': 105}), 85: (1, {'@': 105}), 69: (1, {'@': 105}), 24: (1, {'@': 105}), 9: (1, {'@': 105}), 71: (1, {'@': 105}), 10: (1, {'@': 105}), 26: (1, {'@': 105}), 13: (1, {'@': 105}), 74: (1, {'@': 105}), 64: (1, {'@': 105}), 75: (1, {'@': 105}), 27: (1, {'@': 105}), 77: (1, {'@': 105}), 17: (1, {'@': 105}), 78: (1, {'@': 105}), 58: (1, {'@': 105}), 84: (1, {'@': 105}), 79: (1, {'@': 105}), 2: (1, {'@': 105}), 3: (1, {'@': 105}), 20: (1, {'@': 105}), 80: (1, {'@': 105}), 59: (1, {'@': 105}), 22: (1, {'@': 105}), 81: (1, {'@': 105}), 56: (1, {'@': 105}), 46: (1, {'@': 105}), 48: (1, {'@': 105}), 12: (1, {'@': 105}), 83: (1, {'@': 105}), 51: (1, {'@': 105}), 14: (1, {'@': 105})}, 67: {29: (0, 83), 26: (0, 19), 18: (0, 40)}, 68: {81: (0, 169), 60: (1, {'@': 77}), 8: (1, {'@': 77})}, 69: {65: (1, {'@': 106}), 66: (1, {'@': 106}), 67: (1, {'@': 106}), 5: (1, {'@': 106}), 23: (1, {'@': 106}), 68: (1, {'@': 106}), 62: (1, {'@': 106}), 8: (1, {'@': 106}), 63: (1, {'@': 106}), 25: (1, {'@': 106}), 45: (1, {'@': 106}), 70: (1, {'@': 106}), 72: (1, {'@': 106}), 11: (1, {'@': 106}), 73: (1, {'@': 106}), 76: (1, {'@': 106}), 87: (1, {'@': 106}), 16: (1, {'@': 106}), 4: (1, {'@': 106}), 0: (1, {'@': 106}), 60: (1, {'@': 106}), 82: (1, {'@': 106}), 15: (1, {'@': 106}), 1: (1, {'@': 106}), 19: (1, {'@': 106}), 21: (1, {'@': 106}), 6: (1, {'@': 106}), 61: (1, {'@': 106}), 57: (1, {'@': 106}), 69: (1, {'@': 106}), 24: (1, {'@': 106}), 9: (1, {'@': 106}), 71: (1, {'@': 106}), 10: (1, {'@': 106}), 26: (1, {'@': 106}), 13: (1, {'@': 106}), 74: (1, {'@': 106}), 64: (1, {'@': 106}), 75: (1, {'@': 106}), 27: (1, {'@': 106}), 77: (1, {'@': 106}), 17: (1, {'@': 106}), 78: (1, {'@': 106}), 58: (1, {'@': 106}), 84: (1, {'@': 106}), 79: (1, {'@': 106}), 2: (1, {'@': 106}), 3: (1, {'@': 106}), 20: (1, {'@': 106}), 80: (1, {'@': 106}), 59: (1, {'@': 106}), 22: (1, {'@': 106}), 81: (1, {'@': 106}), 56: (1, {'@': 106}), 46: (1, {'@': 106}), 48: (1, {'@': 106}), 12: (1, {'@': 106}), 83: (1, {'@': 106}), 51: (1, {'@': 106}), 14: (1, {'@': 106})}, 70: {21: (0, 82), 24: (0, 21), 0: (1, {'@': 107}), 1: (1, {'@': 107}), 84: (1, {'@': 107}), 58: (1, {'@': 107}), 2: (1, {'@': 107}), 3: (1, {'@': 107}), 20: (1, {'@': 107}), 4: (1, {'@': 107}), 5: (1, {'@': 107}), 59: (1, {'@': 107}), 60: (1, {'@': 107}), 6: (1, {'@': 107}), 61: (1, {'@': 107}), 85: (1, {'@': 107}), 86: (1, {'@': 107}), 8: (1, {'@': 107}), 9: (1, {'@': 107}), 10: (1, {'@': 107}), 11: (1, {'@': 107}), 12: (1, {'@': 107}), 13: (1, {'@': 107}), 14: (1, {'@': 107}), 15: (1, {'@': 107}), 87: (1, {'@': 107}), 16: (1, {'@': 107}), 17: (1, {'@': 107}), 62: (1, {'@': 107}), 65: (1, {'@': 107}), 66: (1, {'@': 107}), 19: (1, {'@': 107}), 67: (1, {'@': 107}), 23: (1, {'@': 107}), 57: (1, {'@': 107}), 68: (1, {'@': 107}), 69: (1, {'@': 107}), 63: (1, {'@': 107}), 25: (1, {'@': 107}), 45: (1, {'@': 107}), 70: (1, {'@': 107}), 71: (1, {'@': 107}), 72: (1, {'@': 107}), 26: (1, {'@': 107}), 73: (1, {'@': 107}), 74: (1, {'@': 107}), 64: (1, {'@': 107}), 75: (1, {'@': 107}), 76: (1, {'@': 107}), 27: (1, {'@': 107}), 77: (1, {'@': 107}), 78: (1, {'@': 107}), 79: (1, {'@': 107}), 80: (1, {'@': 107}), 22: (1, {'@': 107}), 81: (1, {'@': 107}), 56: (1, {'@': 107}), 82: (1, {'@': 107}), 46: (1, {'@': 107}), 48: (1, {'@': 107}), 83: (1, {'@': 107}), 51: (1, {'@': 107})}, 71: {}, 72: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 24), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 73: {0: (1, {'@': 108}), 1: (1, {'@': 108}), 84: (1, {'@': 108}), 58: (1, {'@': 108}), 2: (1, {'@': 108}), 3: (1, {'@': 108}), 20: (1, {'@': 108}), 4: (1, {'@': 108}), 5: (1, {'@': 108}), 59: (1, {'@': 108}), 60: (1, {'@': 108}), 6: (1, {'@': 108}), 61: (1, {'@': 108}), 85: (1, {'@': 108}), 86: (1, {'@': 108}), 8: (1, {'@': 108}), 9: (1, {'@': 108}), 10: (1, {'@': 108}), 11: (1, {'@': 108}), 12: (1, {'@': 108}), 13: (1, {'@': 108}), 14: (1, {'@': 108}), 15: (1, {'@': 108}), 87: (1, {'@': 108}), 16: (1, {'@': 108}), 17: (1, {'@': 108}), 62: (1, {'@': 108}), 65: (1, {'@': 108}), 66: (1, {'@': 108}), 19: (1, {'@': 108}), 67: (1, {'@': 108}), 21: (1, {'@': 108}), 23: (1, {'@': 108}), 57: (1, {'@': 108}), 68: (1, {'@': 108}), 69: (1, {'@': 108}), 24: (1, {'@': 108}), 63: (1, {'@': 108}), 25: (1, {'@': 108}), 45: (1, {'@': 108}), 70: (1, {'@': 108}), 71: (1, {'@': 108}), 72: (1, {'@': 108}), 26: (1, {'@': 108}), 73: (1, {'@': 108}), 74: (1, {'@': 108}), 64: (1, {'@': 108}), 75: (1, {'@': 108}), 76: (1, {'@': 108}), 27: (1, {'@': 108}), 77: (1, {'@': 108}), 78: (1, {'@': 108}), 79: (1, {'@': 108}), 80: (1, {'@': 108}), 22: (1, {'@': 108}), 81: (1, {'@': 108}), 56: (1, {'@': 108}), 82: (1, {'@': 108}), 46: (1, {'@': 108}), 48: (1, {'@': 108}), 83: (1, {'@': 108}), 51: (1, {'@': 108})}, 74: {60: (0, 80), 8: (0, 228), 63: (0, 73)}, 75: {30: (0, 70), 19: (0, 57), 41: (0, 148), 28: (0, 10), 42: (0, 81), 25: (0, 89), 24: (0, 8), 22: (0, 4), 21: (0, 79), 35: (0, 155), 23: (0, 160), 38: (0, 249), 39: (0, 236), 54: (0, 213), 43: (0, 127), 26: (0, 19), 27: (0, 216), 29: (0, 66)}, 76: {65: (1, {'@': 109}), 66: (1, {'@': 109}), 1: (1, {'@': 109}), 19: (1, {'@': 109}), 21: (1, {'@': 109}), 5: (1, {'@': 109}), 6: (1, {'@': 109}), 23: (1, {'@': 109}), 57: (1, {'@': 109}), 68: (1, {'@': 109}), 69: (1, {'@': 109}), 24: (1, {'@': 109}), 25: (1, {'@': 109}), 8: (1, {'@': 109}), 45: (1, {'@': 109}), 9: (1, {'@': 109}), 10: (1, {'@': 109}), 26: (1, {'@': 109}), 11: (1, {'@': 109}), 13: (1, {'@': 109}), 76: (1, {'@': 109}), 27: (1, {'@': 109}), 16: (1, {'@': 109}), 17: (1, {'@': 109}), 4: (1, {'@': 109}), 78: (1, {'@': 109}), 0: (1, {'@': 109}), 79: (1, {'@': 109}), 2: (1, {'@': 109}), 3: (1, {'@': 109}), 20: (1, {'@': 109}), 80: (1, {'@': 109}), 22: (1, {'@': 109}), 56: (1, {'@': 109}), 46: (1, {'@': 109}), 48: (1, {'@': 109}), 12: (1, {'@': 109}), 51: (1, {'@': 109}), 14: (1, {'@': 109}), 15: (1, {'@': 109})}, 77: {60: (0, 80), 63: (0, 246), 91: (0, 12), 64: (0, 55), 8: (0, 228)}, 78: {60: (0, 80), 8: (0, 228), 1: (1, {'@': 110}), 19: (1, {'@': 110}), 21: (1, {'@': 110}), 5: (1, {'@': 110}), 6: (1, {'@': 110}), 23: (1, {'@': 110}), 57: (1, {'@': 110}), 24: (1, {'@': 110}), 25: (1, {'@': 110}), 70: (1, {'@': 110}), 45: (1, {'@': 110}), 9: (1, {'@': 110}), 10: (1, {'@': 110}), 26: (1, {'@': 110}), 11: (1, {'@': 110}), 13: (1, {'@': 110}), 64: (1, {'@': 110}), 27: (1, {'@': 110}), 16: (1, {'@': 110}), 17: (1, {'@': 110}), 4: (1, {'@': 110}), 0: (1, {'@': 110}), 2: (1, {'@': 110}), 3: (1, {'@': 110}), 20: (1, {'@': 110}), 22: (1, {'@': 110}), 81: (1, {'@': 110}), 56: (1, {'@': 110}), 46: (1, {'@': 110}), 48: (1, {'@': 110}), 12: (1, {'@': 110}), 51: (1, {'@': 110}), 14: (1, {'@': 110}), 15: (1, {'@': 110})}, 79: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 31), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 80: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 231), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 81: {92: (0, 211), 2: (0, 110), 93: (0, 85), 11: (0, 90), 0: (1, {'@': 111}), 1: (1, {'@': 111}), 84: (1, {'@': 111}), 58: (1, {'@': 111}), 3: (1, {'@': 111}), 20: (1, {'@': 111}), 5: (1, {'@': 111}), 59: (1, {'@': 111}), 60: (1, {'@': 111}), 6: (1, {'@': 111}), 61: (1, {'@': 111}), 17: (1, {'@': 111}), 8: (1, {'@': 111}), 9: (1, {'@': 111}), 10: (1, {'@': 111}), 12: (1, {'@': 111}), 13: (1, {'@': 111}), 14: (1, {'@': 111}), 15: (1, {'@': 111}), 87: (1, {'@': 111}), 16: (1, {'@': 111}), 4: (1, {'@': 111}), 62: (1, {'@': 111}), 65: (1, {'@': 111}), 66: (1, {'@': 111}), 19: (1, {'@': 111}), 67: (1, {'@': 111}), 21: (1, {'@': 111}), 23: (1, {'@': 111}), 57: (1, {'@': 111}), 68: (1, {'@': 111}), 69: (1, {'@': 111}), 24: (1, {'@': 111}), 63: (1, {'@': 111}), 25: (1, {'@': 111}), 45: (1, {'@': 111}), 70: (1, {'@': 111}), 71: (1, {'@': 111}), 72: (1, {'@': 111}), 26: (1, {'@': 111}), 73: (1, {'@': 111}), 74: (1, {'@': 111}), 64: (1, {'@': 111}), 75: (1, {'@': 111}), 76: (1, {'@': 111}), 27: (1, {'@': 111}), 77: (1, {'@': 111}), 78: (1, {'@': 111}), 79: (1, {'@': 111}), 80: (1, {'@': 111}), 22: (1, {'@': 111}), 81: (1, {'@': 111}), 56: (1, {'@': 111}), 82: (1, {'@': 111}), 46: (1, {'@': 111}), 48: (1, {'@': 111}), 83: (1, {'@': 111}), 51: (1, {'@': 111})}, 82: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 38), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 58: (0, 174), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 83: {60: (0, 25)}, 84: {94: (0, 257)}, 85: {11: (0, 240), 0: (1, {'@': 112}), 1: (1, {'@': 112}), 84: (1, {'@': 112}), 58: (1, {'@': 112}), 2: (1, {'@': 112}), 3: (1, {'@': 112}), 20: (1, {'@': 112}), 5: (1, {'@': 112}), 59: (1, {'@': 112}), 60: (1, {'@': 112}), 6: (1, {'@': 112}), 61: (1, {'@': 112}), 17: (1, {'@': 112}), 8: (1, {'@': 112}), 9: (1, {'@': 112}), 10: (1, {'@': 112}), 12: (1, {'@': 112}), 13: (1, {'@': 112}), 14: (1, {'@': 112}), 15: (1, {'@': 112}), 87: (1, {'@': 112}), 16: (1, {'@': 112}), 4: (1, {'@': 112}), 62: (1, {'@': 112}), 65: (1, {'@': 112}), 66: (1, {'@': 112}), 19: (1, {'@': 112}), 67: (1, {'@': 112}), 21: (1, {'@': 112}), 23: (1, {'@': 112}), 57: (1, {'@': 112}), 68: (1, {'@': 112}), 69: (1, {'@': 112}), 24: (1, {'@': 112}), 63: (1, {'@': 112}), 25: (1, {'@': 112}), 45: (1, {'@': 112}), 70: (1, {'@': 112}), 71: (1, {'@': 112}), 72: (1, {'@': 112}), 26: (1, {'@': 112}), 73: (1, {'@': 112}), 74: (1, {'@': 112}), 64: (1, {'@': 112}), 75: (1, {'@': 112}), 76: (1, {'@': 112}), 27: (1, {'@': 112}), 77: (1, {'@': 112}), 78: (1, {'@': 112}), 79: (1, {'@': 112}), 80: (1, {'@': 112}), 22: (1, {'@': 112}), 81: (1, {'@': 112}), 56: (1, {'@': 112}), 82: (1, {'@': 112}), 46: (1, {'@': 112}), 48: (1, {'@': 112}), 83: (1, {'@': 112}), 51: (1, {'@': 112})}, 86: {74: (0, 125), 64: (0, 163), 8: (0, 228), 60: (0, 80), 91: (0, 166), 82: (0, 248), 71: (0, 237)}, 87: {30: (0, 70), 24: (0, 8), 19: (0, 57), 25: (0, 89), 95: (0, 171), 22: (0, 4), 21: (0, 79), 43: (0, 127), 96: (0, 99), 26: (0, 19), 27: (0, 216), 29: (0, 66), 23: (0, 160), 38: (0, 88), 39: (0, 236)}, 88: {60: (0, 138)}, 89: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 32: (0, 86), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 82: (0, 123), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 90: {30: (0, 70), 24: (0, 8), 19: (0, 57), 25: (0, 89), 22: (0, 4), 21: (0, 79), 43: (0, 127), 38: (0, 249), 26: (0, 19), 42: (0, 191), 27: (0, 216), 29: (0, 66), 35: (0, 155), 23: (0, 160), 39: (0, 236)}, 91: {0: (1, {'@': 113}), 1: (1, {'@': 113}), 2: (1, {'@': 113}), 3: (1, {'@': 113}), 4: (1, {'@': 113}), 5: (1, {'@': 113}), 6: (1, {'@': 113}), 7: (1, {'@': 113}), 8: (1, {'@': 113}), 9: (1, {'@': 113}), 10: (1, {'@': 113}), 11: (1, {'@': 113}), 12: (1, {'@': 113}), 13: (1, {'@': 113}), 14: (1, {'@': 113}), 15: (1, {'@': 113}), 16: (1, {'@': 113}), 17: (1, {'@': 113}), 18: (1, {'@': 113}), 19: (1, {'@': 113}), 20: (1, {'@': 113}), 21: (1, {'@': 113}), 22: (1, {'@': 113}), 23: (1, {'@': 113}), 24: (1, {'@': 113}), 25: (1, {'@': 113}), 26: (1, {'@': 113}), 27: (1, {'@': 113})}, 92: {1: (1, {'@': 114}), 19: (1, {'@': 114}), 21: (1, {'@': 114}), 5: (1, {'@': 114}), 6: (1, {'@': 114}), 23: (1, {'@': 114}), 57: (1, {'@': 114}), 24: (1, {'@': 114}), 25: (1, {'@': 114}), 8: (1, {'@': 114}), 45: (1, {'@': 114}), 9: (1, {'@': 114}), 10: (1, {'@': 114}), 26: (1, {'@': 114}), 11: (1, {'@': 114}), 13: (1, {'@': 114}), 27: (1, {'@': 114}), 16: (1, {'@': 114}), 17: (1, {'@': 114}), 4: (1, {'@': 114}), 0: (1, {'@': 114}), 2: (1, {'@': 114}), 3: (1, {'@': 114}), 20: (1, {'@': 114}), 22: (1, {'@': 114}), 56: (1, {'@': 114}), 46: (1, {'@': 114}), 48: (1, {'@': 114}), 12: (1, {'@': 114}), 51: (1, {'@': 114}), 14: (1, {'@': 114}), 15: (1, {'@': 114})}, 93: {60: (0, 80), 8: (0, 228), 58: (1, {'@': 115}), 62: (1, {'@': 115}), 64: (1, {'@': 115}), 63: (1, {'@': 115}), 65: (1, {'@': 115}), 66: (1, {'@': 115}), 1: (1, {'@': 115}), 19: (1, {'@': 115}), 67: (1, {'@': 115}), 21: (1, {'@': 115}), 5: (1, {'@': 115}), 6: (1, {'@': 115}), 23: (1, {'@': 115}), 57: (1, {'@': 115}), 68: (1, {'@': 115}), 69: (1, {'@': 115}), 24: (1, {'@': 115}), 25: (1, {'@': 115}), 45: (1, {'@': 115}), 70: (1, {'@': 115}), 71: (1, {'@': 115}), 9: (1, {'@': 115}), 10: (1, {'@': 115}), 72: (1, {'@': 115}), 11: (1, {'@': 115}), 26: (1, {'@': 115}), 73: (1, {'@': 115}), 74: (1, {'@': 115}), 13: (1, {'@': 115}), 75: (1, {'@': 115}), 76: (1, {'@': 115}), 27: (1, {'@': 115}), 77: (1, {'@': 115}), 16: (1, {'@': 115}), 4: (1, {'@': 115}), 17: (1, {'@': 115}), 78: (1, {'@': 115}), 0: (1, {'@': 115}), 79: (1, {'@': 115}), 2: (1, {'@': 115}), 3: (1, {'@': 115}), 20: (1, {'@': 115}), 80: (1, {'@': 115}), 22: (1, {'@': 115}), 81: (1, {'@': 115}), 56: (1, {'@': 115}), 82: (1, {'@': 115}), 46: (1, {'@': 115}), 48: (1, {'@': 115}), 12: (1, {'@': 115}), 83: (1, {'@': 115}), 51: (1, {'@': 115}), 15: (1, {'@': 115}), 14: (1, {'@': 115})}, 94: {0: (1, {'@': 116}), 1: (1, {'@': 116}), 84: (1, {'@': 116}), 58: (1, {'@': 116}), 2: (1, {'@': 116}), 3: (1, {'@': 116}), 20: (1, {'@': 116}), 21: (1, {'@': 116}), 5: (1, {'@': 116}), 59: (1, {'@': 116}), 60: (1, {'@': 116}), 6: (1, {'@': 116}), 61: (1, {'@': 116}), 17: (1, {'@': 116}), 85: (1, {'@': 116}), 24: (1, {'@': 116}), 86: (1, {'@': 116}), 8: (1, {'@': 116}), 9: (1, {'@': 116}), 10: (1, {'@': 116}), 11: (1, {'@': 116}), 12: (1, {'@': 116}), 13: (1, {'@': 116}), 14: (1, {'@': 116}), 15: (1, {'@': 116}), 87: (1, {'@': 116}), 16: (1, {'@': 116}), 4: (1, {'@': 116}), 62: (1, {'@': 116}), 65: (1, {'@': 116}), 66: (1, {'@': 116}), 67: (1, {'@': 116}), 23: (1, {'@': 116}), 68: (1, {'@': 116}), 63: (1, {'@': 116}), 25: (1, {'@': 116}), 45: (1, {'@': 116}), 70: (1, {'@': 116}), 72: (1, {'@': 116}), 73: (1, {'@': 116}), 76: (1, {'@': 116}), 82: (1, {'@': 116}), 19: (1, {'@': 116}), 57: (1, {'@': 116}), 69: (1, {'@': 116}), 71: (1, {'@': 116}), 26: (1, {'@': 116}), 74: (1, {'@': 116}), 64: (1, {'@': 116}), 75: (1, {'@': 116}), 27: (1, {'@': 116}), 77: (1, {'@': 116}), 78: (1, {'@': 116}), 79: (1, {'@': 116}), 80: (1, {'@': 116}), 22: (1, {'@': 116}), 81: (1, {'@': 116}), 56: (1, {'@': 116}), 46: (1, {'@': 116}), 48: (1, {'@': 116}), 83: (1, {'@': 116}), 51: (1, {'@': 116})}, 95: {26: (0, 19), 29: (0, 28)}, 96: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 58), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 97: {30: (0, 70), 24: (0, 8), 19: (0, 57), 25: (0, 89), 22: (0, 4), 21: (0, 79), 43: (0, 127), 38: (0, 249), 26: (0, 19), 27: (0, 216), 35: (0, 242), 29: (0, 66), 23: (0, 160), 39: (0, 236)}, 98: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 78), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 99: {30: (0, 70), 24: (0, 8), 19: (0, 57), 25: (0, 89), 95: (0, 131), 22: (0, 4), 21: (0, 79), 43: (0, 127), 26: (0, 19), 27: (0, 216), 29: (0, 66), 23: (0, 160), 38: (0, 88), 39: (0, 236)}, 100: {59: (0, 134), 58: (1, {'@': 117}), 60: (1, {'@': 117}), 8: (1, {'@': 117}), 62: (1, {'@': 117}), 64: (1, {'@': 117}), 63: (1, {'@': 117}), 65: (1, {'@': 117}), 66: (1, {'@': 117}), 1: (1, {'@': 117}), 19: (1, {'@': 117}), 67: (1, {'@': 117}), 21: (1, {'@': 117}), 5: (1, {'@': 117}), 6: (1, {'@': 117}), 23: (1, {'@': 117}), 57: (1, {'@': 117}), 68: (1, {'@': 117}), 69: (1, {'@': 117}), 24: (1, {'@': 117}), 25: (1, {'@': 117}), 45: (1, {'@': 117}), 70: (1, {'@': 117}), 71: (1, {'@': 117}), 9: (1, {'@': 117}), 10: (1, {'@': 117}), 72: (1, {'@': 117}), 11: (1, {'@': 117}), 26: (1, {'@': 117}), 73: (1, {'@': 117}), 74: (1, {'@': 117}), 13: (1, {'@': 117}), 75: (1, {'@': 117}), 76: (1, {'@': 117}), 27: (1, {'@': 117}), 77: (1, {'@': 117}), 16: (1, {'@': 117}), 4: (1, {'@': 117}), 17: (1, {'@': 117}), 78: (1, {'@': 117}), 0: (1, {'@': 117}), 79: (1, {'@': 117}), 2: (1, {'@': 117}), 3: (1, {'@': 117}), 20: (1, {'@': 117}), 80: (1, {'@': 117}), 22: (1, {'@': 117}), 81: (1, {'@': 117}), 56: (1, {'@': 117}), 82: (1, {'@': 117}), 46: (1, {'@': 117}), 48: (1, {'@': 117}), 12: (1, {'@': 117}), 83: (1, {'@': 117}), 51: (1, {'@': 117}), 15: (1, {'@': 117}), 14: (1, {'@': 117})}, 101: {90: (0, 217)}, 102: {65: (1, {'@': 118}), 66: (1, {'@': 118}), 1: (1, {'@': 118}), 19: (1, {'@': 118}), 21: (1, {'@': 118}), 5: (1, {'@': 118}), 6: (1, {'@': 118}), 23: (1, {'@': 118}), 57: (1, {'@': 118}), 68: (1, {'@': 118}), 69: (1, {'@': 118}), 24: (1, {'@': 118}), 25: (1, {'@': 118}), 8: (1, {'@': 118}), 45: (1, {'@': 118}), 9: (1, {'@': 118}), 10: (1, {'@': 118}), 26: (1, {'@': 118}), 11: (1, {'@': 118}), 13: (1, {'@': 118}), 76: (1, {'@': 118}), 27: (1, {'@': 118}), 16: (1, {'@': 118}), 17: (1, {'@': 118}), 4: (1, {'@': 118}), 78: (1, {'@': 118}), 0: (1, {'@': 118}), 79: (1, {'@': 118}), 2: (1, {'@': 118}), 3: (1, {'@': 118}), 20: (1, {'@': 118}), 80: (1, {'@': 118}), 22: (1, {'@': 118}), 56: (1, {'@': 118}), 46: (1, {'@': 118}), 48: (1, {'@': 118}), 12: (1, {'@': 118}), 51: (1, {'@': 118}), 14: (1, {'@': 118}), 15: (1, {'@': 118})}, 103: {30: (0, 70), 19: (0, 57), 28: (0, 10), 42: (0, 81), 25: (0, 89), 24: (0, 8), 20: (0, 43), 22: (0, 4), 44: (0, 52), 21: (0, 79), 50: (0, 251), 35: (0, 155), 36: (0, 177), 23: (0, 160), 38: (0, 249), 39: (0, 236), 54: (0, 213), 41: (0, 132), 43: (0, 127), 26: (0, 19), 27: (0, 216), 29: (0, 66)}, 104: {3: (0, 126), 16: (0, 0), 34: (0, 200), 59: (0, 105), 0: (0, 91), 4: (0, 56), 11: (0, 140), 10: (0, 29), 9: (0, 137), 31: (0, 162), 97: (0, 100), 33: (0, 220), 52: (0, 182), 14: (0, 197), 6: (0, 203), 15: (0, 178), 98: (0, 63), 2: (0, 227), 61: (0, 103), 40: (0, 121), 12: (0, 188), 17: (0, 50), 47: (0, 114), 13: (0, 167), 1: (0, 245), 5: (0, 51), 58: (1, {'@': 119}), 60: (1, {'@': 119}), 8: (1, {'@': 119}), 62: (1, {'@': 119}), 64: (1, {'@': 119}), 63: (1, {'@': 119}), 65: (1, {'@': 119}), 66: (1, {'@': 119}), 19: (1, {'@': 119}), 67: (1, {'@': 119}), 21: (1, {'@': 119}), 23: (1, {'@': 119}), 57: (1, {'@': 119}), 68: (1, {'@': 119}), 69: (1, {'@': 119}), 24: (1, {'@': 119}), 25: (1, {'@': 119}), 45: (1, {'@': 119}), 70: (1, {'@': 119}), 71: (1, {'@': 119}), 72: (1, {'@': 119}), 26: (1, {'@': 119}), 73: (1, {'@': 119}), 74: (1, {'@': 119}), 75: (1, {'@': 119}), 76: (1, {'@': 119}), 27: (1, {'@': 119}), 77: (1, {'@': 119}), 78: (1, {'@': 119}), 79: (1, {'@': 119}), 20: (1, {'@': 119}), 80: (1, {'@': 119}), 22: (1, {'@': 119}), 81: (1, {'@': 119}), 56: (1, {'@': 119}), 82: (1, {'@': 119}), 46: (1, {'@': 119}), 48: (1, {'@': 119}), 83: (1, {'@': 119}), 51: (1, {'@': 119})}, 105: {30: (0, 70), 19: (0, 57), 28: (0, 10), 42: (0, 81), 25: (0, 89), 24: (0, 8), 20: (0, 43), 22: (0, 4), 21: (0, 79), 50: (0, 251), 35: (0, 155), 36: (0, 177), 23: (0, 160), 38: (0, 249), 39: (0, 236), 54: (0, 213), 41: (0, 132), 44: (0, 179), 43: (0, 127), 26: (0, 19), 27: (0, 216), 29: (0, 66)}, 106: {0: (1, {'@': 120}), 1: (1, {'@': 120}), 8: (1, {'@': 120}), 2: (1, {'@': 120}), 3: (1, {'@': 120}), 9: (1, {'@': 120}), 10: (1, {'@': 120}), 11: (1, {'@': 120}), 12: (1, {'@': 120}), 5: (1, {'@': 120}), 17: (1, {'@': 120}), 13: (1, {'@': 120}), 6: (1, {'@': 120}), 7: (1, {'@': 120}), 14: (1, {'@': 120}), 15: (1, {'@': 120}), 16: (1, {'@': 120}), 4: (1, {'@': 120}), 18: (1, {'@': 120}), 19: (1, {'@': 120}), 20: (1, {'@': 120}), 21: (1, {'@': 120}), 22: (1, {'@': 120}), 23: (1, {'@': 120}), 24: (1, {'@': 120}), 25: (1, {'@': 120}), 26: (1, {'@': 120}), 27: (1, {'@': 120})}, 107: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 168), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 108: {81: (0, 16), 60: (0, 80), 8: (0, 228)}, 109: {65: (1, {'@': 121}), 66: (1, {'@': 121}), 1: (1, {'@': 121}), 19: (1, {'@': 121}), 21: (1, {'@': 121}), 5: (1, {'@': 121}), 6: (1, {'@': 121}), 23: (1, {'@': 121}), 57: (1, {'@': 121}), 68: (1, {'@': 121}), 69: (1, {'@': 121}), 24: (1, {'@': 121}), 25: (1, {'@': 121}), 8: (1, {'@': 121}), 45: (1, {'@': 121}), 9: (1, {'@': 121}), 10: (1, {'@': 121}), 26: (1, {'@': 121}), 11: (1, {'@': 121}), 13: (1, {'@': 121}), 76: (1, {'@': 121}), 27: (1, {'@': 121}), 16: (1, {'@': 121}), 17: (1, {'@': 121}), 4: (1, {'@': 121}), 78: (1, {'@': 121}), 0: (1, {'@': 121}), 79: (1, {'@': 121}), 2: (1, {'@': 121}), 3: (1, {'@': 121}), 20: (1, {'@': 121}), 80: (1, {'@': 121}), 22: (1, {'@': 121}), 56: (1, {'@': 121}), 46: (1, {'@': 121}), 48: (1, {'@': 121}), 12: (1, {'@': 121}), 51: (1, {'@': 121}), 14: (1, {'@': 121}), 15: (1, {'@': 121})}, 110: {30: (0, 70), 24: (0, 8), 19: (0, 57), 25: (0, 89), 22: (0, 4), 21: (0, 79), 43: (0, 127), 38: (0, 249), 26: (0, 19), 27: (0, 216), 29: (0, 66), 35: (0, 155), 23: (0, 160), 42: (0, 27), 39: (0, 236)}, 111: {8: (0, 228), 60: (0, 80), 58: (1, {'@': 122}), 62: (1, {'@': 122}), 64: (1, {'@': 122}), 63: (1, {'@': 122}), 65: (1, {'@': 122}), 66: (1, {'@': 122}), 1: (1, {'@': 122}), 19: (1, {'@': 122}), 67: (1, {'@': 122}), 21: (1, {'@': 122}), 5: (1, {'@': 122}), 6: (1, {'@': 122}), 23: (1, {'@': 122}), 57: (1, {'@': 122}), 68: (1, {'@': 122}), 69: (1, {'@': 122}), 24: (1, {'@': 122}), 25: (1, {'@': 122}), 45: (1, {'@': 122}), 70: (1, {'@': 122}), 71: (1, {'@': 122}), 9: (1, {'@': 122}), 10: (1, {'@': 122}), 72: (1, {'@': 122}), 11: (1, {'@': 122}), 26: (1, {'@': 122}), 73: (1, {'@': 122}), 74: (1, {'@': 122}), 13: (1, {'@': 122}), 75: (1, {'@': 122}), 76: (1, {'@': 122}), 27: (1, {'@': 122}), 77: (1, {'@': 122}), 16: (1, {'@': 122}), 4: (1, {'@': 122}), 17: (1, {'@': 122}), 78: (1, {'@': 122}), 0: (1, {'@': 122}), 79: (1, {'@': 122}), 2: (1, {'@': 122}), 3: (1, {'@': 122}), 20: (1, {'@': 122}), 80: (1, {'@': 122}), 22: (1, {'@': 122}), 81: (1, {'@': 122}), 56: (1, {'@': 122}), 82: (1, {'@': 122}), 46: (1, {'@': 122}), 48: (1, {'@': 122}), 12: (1, {'@': 122}), 83: (1, {'@': 122}), 51: (1, {'@': 122}), 15: (1, {'@': 122}), 14: (1, {'@': 122})}, 112: {90: (0, 11), 0: (1, {'@': 105}), 1: (1, {'@': 105}), 84: (1, {'@': 105}), 2: (1, {'@': 105}), 3: (1, {'@': 105}), 20: (1, {'@': 105}), 21: (1, {'@': 105}), 5: (1, {'@': 105}), 59: (1, {'@': 105}), 60: (1, {'@': 105}), 6: (1, {'@': 105}), 61: (1, {'@': 105}), 17: (1, {'@': 105}), 85: (1, {'@': 105}), 62: (1, {'@': 105}), 24: (1, {'@': 105}), 86: (1, {'@': 105}), 8: (1, {'@': 105}), 9: (1, {'@': 105}), 10: (1, {'@': 105}), 11: (1, {'@': 105}), 12: (1, {'@': 105}), 13: (1, {'@': 105}), 14: (1, {'@': 105}), 15: (1, {'@': 105}), 87: (1, {'@': 105}), 16: (1, {'@': 105}), 4: (1, {'@': 105}), 63: (1, {'@': 105}), 64: (1, {'@': 105}), 65: (1, {'@': 105}), 66: (1, {'@': 105}), 67: (1, {'@': 105}), 23: (1, {'@': 105}), 68: (1, {'@': 105}), 25: (1, {'@': 105}), 45: (1, {'@': 105}), 70: (1, {'@': 105}), 72: (1, {'@': 105}), 73: (1, {'@': 105}), 76: (1, {'@': 105}), 82: (1, {'@': 105}), 19: (1, {'@': 105}), 57: (1, {'@': 105}), 69: (1, {'@': 105}), 71: (1, {'@': 105}), 26: (1, {'@': 105}), 74: (1, {'@': 105}), 75: (1, {'@': 105}), 27: (1, {'@': 105}), 77: (1, {'@': 105}), 78: (1, {'@': 105}), 58: (1, {'@': 105}), 79: (1, {'@': 105}), 80: (1, {'@': 105}), 22: (1, {'@': 105}), 81: (1, {'@': 105}), 56: (1, {'@': 105}), 46: (1, {'@': 105}), 48: (1, {'@': 105}), 83: (1, {'@': 105}), 51: (1, {'@': 105})}, 113: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 218), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 18), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 114: {30: (0, 70), 19: (0, 57), 28: (0, 10), 42: (0, 81), 25: (0, 89), 24: (0, 8), 20: (0, 43), 22: (0, 4), 21: (0, 79), 50: (0, 251), 35: (0, 155), 44: (0, 154), 36: (0, 177), 23: (0, 160), 38: (0, 249), 39: (0, 236), 54: (0, 213), 41: (0, 132), 43: (0, 127), 26: (0, 19), 27: (0, 216), 29: (0, 66)}, 115: {60: (0, 80), 82: (0, 241), 8: (0, 228)}, 116: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 61), 70: (0, 98), 33: (0, 220), 34: (0, 200), 88: (0, 44), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 81: (0, 76), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 117: {87: (0, 53), 0: (1, {'@': 123}), 1: (1, {'@': 123}), 84: (1, {'@': 123}), 58: (1, {'@': 123}), 2: (1, {'@': 123}), 3: (1, {'@': 123}), 20: (1, {'@': 123}), 4: (1, {'@': 123}), 5: (1, {'@': 123}), 59: (1, {'@': 123}), 60: (1, {'@': 123}), 6: (1, {'@': 123}), 61: (1, {'@': 123}), 8: (1, {'@': 123}), 9: (1, {'@': 123}), 10: (1, {'@': 123}), 11: (1, {'@': 123}), 12: (1, {'@': 123}), 13: (1, {'@': 123}), 14: (1, {'@': 123}), 15: (1, {'@': 123}), 16: (1, {'@': 123}), 17: (1, {'@': 123}), 62: (1, {'@': 123}), 65: (1, {'@': 123}), 66: (1, {'@': 123}), 19: (1, {'@': 123}), 67: (1, {'@': 123}), 21: (1, {'@': 123}), 23: (1, {'@': 123}), 57: (1, {'@': 123}), 68: (1, {'@': 123}), 69: (1, {'@': 123}), 24: (1, {'@': 123}), 63: (1, {'@': 123}), 25: (1, {'@': 123}), 45: (1, {'@': 123}), 70: (1, {'@': 123}), 71: (1, {'@': 123}), 72: (1, {'@': 123}), 26: (1, {'@': 123}), 73: (1, {'@': 123}), 74: (1, {'@': 123}), 64: (1, {'@': 123}), 75: (1, {'@': 123}), 76: (1, {'@': 123}), 27: (1, {'@': 123}), 77: (1, {'@': 123}), 78: (1, {'@': 123}), 79: (1, {'@': 123}), 80: (1, {'@': 123}), 22: (1, {'@': 123}), 81: (1, {'@': 123}), 56: (1, {'@': 123}), 82: (1, {'@': 123}), 46: (1, {'@': 123}), 48: (1, {'@': 123}), 83: (1, {'@': 123}), 51: (1, {'@': 123})}, 118: {58: (0, 215), 64: (0, 64)}, 119: {8: (0, 228), 60: (0, 80), 1: (1, {'@': 124}), 19: (1, {'@': 124}), 21: (1, {'@': 124}), 5: (1, {'@': 124}), 6: (1, {'@': 124}), 23: (1, {'@': 124}), 57: (1, {'@': 124}), 24: (1, {'@': 124}), 25: (1, {'@': 124}), 70: (1, {'@': 124}), 45: (1, {'@': 124}), 9: (1, {'@': 124}), 10: (1, {'@': 124}), 26: (1, {'@': 124}), 11: (1, {'@': 124}), 13: (1, {'@': 124}), 64: (1, {'@': 124}), 27: (1, {'@': 124}), 16: (1, {'@': 124}), 17: (1, {'@': 124}), 4: (1, {'@': 124}), 0: (1, {'@': 124}), 2: (1, {'@': 124}), 3: (1, {'@': 124}), 20: (1, {'@': 124}), 22: (1, {'@': 124}), 81: (1, {'@': 124}), 56: (1, {'@': 124}), 46: (1, {'@': 124}), 48: (1, {'@': 124}), 12: (1, {'@': 124}), 51: (1, {'@': 124}), 14: (1, {'@': 124}), 15: (1, {'@': 124})}, 120: {8: (0, 228), 60: (0, 80), 58: (1, {'@': 125}), 62: (1, {'@': 125}), 64: (1, {'@': 125}), 63: (1, {'@': 125}), 65: (1, {'@': 125}), 66: (1, {'@': 125}), 1: (1, {'@': 125}), 19: (1, {'@': 125}), 67: (1, {'@': 125}), 21: (1, {'@': 125}), 5: (1, {'@': 125}), 6: (1, {'@': 125}), 23: (1, {'@': 125}), 57: (1, {'@': 125}), 68: (1, {'@': 125}), 69: (1, {'@': 125}), 24: (1, {'@': 125}), 25: (1, {'@': 125}), 45: (1, {'@': 125}), 70: (1, {'@': 125}), 71: (1, {'@': 125}), 9: (1, {'@': 125}), 10: (1, {'@': 125}), 72: (1, {'@': 125}), 11: (1, {'@': 125}), 26: (1, {'@': 125}), 73: (1, {'@': 125}), 74: (1, {'@': 125}), 13: (1, {'@': 125}), 75: (1, {'@': 125}), 76: (1, {'@': 125}), 27: (1, {'@': 125}), 77: (1, {'@': 125}), 16: (1, {'@': 125}), 4: (1, {'@': 125}), 17: (1, {'@': 125}), 78: (1, {'@': 125}), 0: (1, {'@': 125}), 79: (1, {'@': 125}), 2: (1, {'@': 125}), 3: (1, {'@': 125}), 20: (1, {'@': 125}), 80: (1, {'@': 125}), 22: (1, {'@': 125}), 81: (1, {'@': 125}), 56: (1, {'@': 125}), 82: (1, {'@': 125}), 46: (1, {'@': 125}), 48: (1, {'@': 125}), 12: (1, {'@': 125}), 83: (1, {'@': 125}), 51: (1, {'@': 125}), 15: (1, {'@': 125}), 14: (1, {'@': 125})}, 121: {0: (1, {'@': 126}), 1: (1, {'@': 126}), 2: (1, {'@': 126}), 3: (1, {'@': 126}), 4: (1, {'@': 126}), 5: (1, {'@': 126}), 6: (1, {'@': 126}), 7: (1, {'@': 126}), 8: (1, {'@': 126}), 9: (1, {'@': 126}), 10: (1, {'@': 126}), 11: (1, {'@': 126}), 12: (1, {'@': 126}), 13: (1, {'@': 126}), 14: (1, {'@': 126}), 15: (1, {'@': 126}), 16: (1, {'@': 126}), 17: (1, {'@': 126}), 18: (1, {'@': 126}), 19: (1, {'@': 126}), 20: (1, {'@': 126}), 21: (1, {'@': 126}), 22: (1, {'@': 126}), 23: (1, {'@': 126}), 24: (1, {'@': 126}), 25: (1, {'@': 126}), 26: (1, {'@': 126}), 27: (1, {'@': 126})}, 122: {65: (1, {'@': 127}), 66: (1, {'@': 127}), 1: (1, {'@': 127}), 19: (1, {'@': 127}), 21: (1, {'@': 127}), 5: (1, {'@': 127}), 6: (1, {'@': 127}), 23: (1, {'@': 127}), 57: (1, {'@': 127}), 68: (1, {'@': 127}), 69: (1, {'@': 127}), 24: (1, {'@': 127}), 25: (1, {'@': 127}), 8: (1, {'@': 127}), 45: (1, {'@': 127}), 9: (1, {'@': 127}), 10: (1, {'@': 127}), 26: (1, {'@': 127}), 11: (1, {'@': 127}), 13: (1, {'@': 127}), 76: (1, {'@': 127}), 27: (1, {'@': 127}), 16: (1, {'@': 127}), 17: (1, {'@': 127}), 4: (1, {'@': 127}), 78: (1, {'@': 127}), 0: (1, {'@': 127}), 79: (1, {'@': 127}), 2: (1, {'@': 127}), 3: (1, {'@': 127}), 20: (1, {'@': 127}), 80: (1, {'@': 127}), 22: (1, {'@': 127}), 56: (1, {'@': 127}), 46: (1, {'@': 127}), 48: (1, {'@': 127}), 12: (1, {'@': 127}), 51: (1, {'@': 127}), 14: (1, {'@': 127}), 15: (1, {'@': 127})}, 123: {0: (1, {'@': 128}), 1: (1, {'@': 128}), 84: (1, {'@': 128}), 58: (1, {'@': 128}), 2: (1, {'@': 128}), 3: (1, {'@': 128}), 20: (1, {'@': 128}), 21: (1, {'@': 128}), 5: (1, {'@': 128}), 59: (1, {'@': 128}), 60: (1, {'@': 128}), 6: (1, {'@': 128}), 61: (1, {'@': 128}), 17: (1, {'@': 128}), 85: (1, {'@': 128}), 24: (1, {'@': 128}), 86: (1, {'@': 128}), 8: (1, {'@': 128}), 9: (1, {'@': 128}), 10: (1, {'@': 128}), 11: (1, {'@': 128}), 12: (1, {'@': 128}), 13: (1, {'@': 128}), 14: (1, {'@': 128}), 15: (1, {'@': 128}), 87: (1, {'@': 128}), 16: (1, {'@': 128}), 4: (1, {'@': 128}), 62: (1, {'@': 128}), 65: (1, {'@': 128}), 66: (1, {'@': 128}), 67: (1, {'@': 128}), 23: (1, {'@': 128}), 68: (1, {'@': 128}), 63: (1, {'@': 128}), 25: (1, {'@': 128}), 45: (1, {'@': 128}), 70: (1, {'@': 128}), 72: (1, {'@': 128}), 73: (1, {'@': 128}), 76: (1, {'@': 128}), 82: (1, {'@': 128}), 19: (1, {'@': 128}), 57: (1, {'@': 128}), 69: (1, {'@': 128}), 71: (1, {'@': 128}), 26: (1, {'@': 128}), 74: (1, {'@': 128}), 64: (1, {'@': 128}), 75: (1, {'@': 128}), 27: (1, {'@': 128}), 77: (1, {'@': 128}), 78: (1, {'@': 128}), 79: (1, {'@': 128}), 80: (1, {'@': 128}), 22: (1, {'@': 128}), 81: (1, {'@': 128}), 56: (1, {'@': 128}), 46: (1, {'@': 128}), 48: (1, {'@': 128}), 83: (1, {'@': 128}), 51: (1, {'@': 128})}, 124: {85: (0, 255), 0: (1, {'@': 129}), 1: (1, {'@': 129}), 84: (1, {'@': 129}), 58: (1, {'@': 129}), 2: (1, {'@': 129}), 3: (1, {'@': 129}), 20: (1, {'@': 129}), 4: (1, {'@': 129}), 5: (1, {'@': 129}), 59: (1, {'@': 129}), 60: (1, {'@': 129}), 6: (1, {'@': 129}), 61: (1, {'@': 129}), 8: (1, {'@': 129}), 9: (1, {'@': 129}), 10: (1, {'@': 129}), 11: (1, {'@': 129}), 12: (1, {'@': 129}), 13: (1, {'@': 129}), 14: (1, {'@': 129}), 15: (1, {'@': 129}), 87: (1, {'@': 129}), 16: (1, {'@': 129}), 17: (1, {'@': 129}), 62: (1, {'@': 129}), 65: (1, {'@': 129}), 66: (1, {'@': 129}), 19: (1, {'@': 129}), 67: (1, {'@': 129}), 21: (1, {'@': 129}), 23: (1, {'@': 129}), 57: (1, {'@': 129}), 68: (1, {'@': 129}), 69: (1, {'@': 129}), 24: (1, {'@': 129}), 63: (1, {'@': 129}), 25: (1, {'@': 129}), 45: (1, {'@': 129}), 70: (1, {'@': 129}), 71: (1, {'@': 129}), 72: (1, {'@': 129}), 26: (1, {'@': 129}), 73: (1, {'@': 129}), 74: (1, {'@': 129}), 64: (1, {'@': 129}), 75: (1, {'@': 129}), 76: (1, {'@': 129}), 27: (1, {'@': 129}), 77: (1, {'@': 129}), 78: (1, {'@': 129}), 79: (1, {'@': 129}), 80: (1, {'@': 129}), 22: (1, {'@': 129}), 81: (1, {'@': 129}), 56: (1, {'@': 129}), 82: (1, {'@': 129}), 46: (1, {'@': 129}), 48: (1, {'@': 129}), 83: (1, {'@': 129}), 51: (1, {'@': 129})}, 125: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 39), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 126: {0: (1, {'@': 130}), 1: (1, {'@': 130}), 2: (1, {'@': 130}), 3: (1, {'@': 130}), 4: (1, {'@': 130}), 5: (1, {'@': 130}), 6: (1, {'@': 130}), 7: (1, {'@': 130}), 8: (1, {'@': 130}), 9: (1, {'@': 130}), 10: (1, {'@': 130}), 11: (1, {'@': 130}), 12: (1, {'@': 130}), 13: (1, {'@': 130}), 14: (1, {'@': 130}), 15: (1, {'@': 130}), 16: (1, {'@': 130}), 17: (1, {'@': 130}), 18: (1, {'@': 130}), 19: (1, {'@': 130}), 20: (1, {'@': 130}), 21: (1, {'@': 130}), 22: (1, {'@': 130}), 23: (1, {'@': 130}), 24: (1, {'@': 130}), 25: (1, {'@': 130}), 26: (1, {'@': 130}), 27: (1, {'@': 130})}, 127: {0: (1, {'@': 131}), 1: (1, {'@': 131}), 84: (1, {'@': 131}), 58: (1, {'@': 131}), 2: (1, {'@': 131}), 3: (1, {'@': 131}), 20: (1, {'@': 131}), 21: (1, {'@': 131}), 5: (1, {'@': 131}), 59: (1, {'@': 131}), 60: (1, {'@': 131}), 6: (1, {'@': 131}), 61: (1, {'@': 131}), 17: (1, {'@': 131}), 85: (1, {'@': 131}), 24: (1, {'@': 131}), 86: (1, {'@': 131}), 8: (1, {'@': 131}), 9: (1, {'@': 131}), 10: (1, {'@': 131}), 11: (1, {'@': 131}), 12: (1, {'@': 131}), 13: (1, {'@': 131}), 14: (1, {'@': 131}), 15: (1, {'@': 131}), 87: (1, {'@': 131}), 16: (1, {'@': 131}), 4: (1, {'@': 131}), 62: (1, {'@': 131}), 65: (1, {'@': 131}), 66: (1, {'@': 131}), 67: (1, {'@': 131}), 23: (1, {'@': 131}), 68: (1, {'@': 131}), 63: (1, {'@': 131}), 25: (1, {'@': 131}), 45: (1, {'@': 131}), 70: (1, {'@': 131}), 72: (1, {'@': 131}), 73: (1, {'@': 131}), 76: (1, {'@': 131}), 82: (1, {'@': 131}), 19: (1, {'@': 131}), 57: (1, {'@': 131}), 69: (1, {'@': 131}), 71: (1, {'@': 131}), 26: (1, {'@': 131}), 74: (1, {'@': 131}), 64: (1, {'@': 131}), 75: (1, {'@': 131}), 27: (1, {'@': 131}), 77: (1, {'@': 131}), 78: (1, {'@': 131}), 79: (1, {'@': 131}), 80: (1, {'@': 131}), 22: (1, {'@': 131}), 81: (1, {'@': 131}), 56: (1, {'@': 131}), 46: (1, {'@': 131}), 48: (1, {'@': 131}), 83: (1, {'@': 131}), 51: (1, {'@': 131})}, 128: {65: (1, {'@': 132}), 66: (1, {'@': 132}), 1: (1, {'@': 132}), 19: (1, {'@': 132}), 21: (1, {'@': 132}), 5: (1, {'@': 132}), 6: (1, {'@': 132}), 23: (1, {'@': 132}), 57: (1, {'@': 132}), 68: (1, {'@': 132}), 69: (1, {'@': 132}), 24: (1, {'@': 132}), 25: (1, {'@': 132}), 8: (1, {'@': 132}), 45: (1, {'@': 132}), 9: (1, {'@': 132}), 10: (1, {'@': 132}), 26: (1, {'@': 132}), 11: (1, {'@': 132}), 13: (1, {'@': 132}), 76: (1, {'@': 132}), 27: (1, {'@': 132}), 16: (1, {'@': 132}), 17: (1, {'@': 132}), 4: (1, {'@': 132}), 78: (1, {'@': 132}), 0: (1, {'@': 132}), 79: (1, {'@': 132}), 2: (1, {'@': 132}), 3: (1, {'@': 132}), 20: (1, {'@': 132}), 80: (1, {'@': 132}), 22: (1, {'@': 132}), 56: (1, {'@': 132}), 46: (1, {'@': 132}), 48: (1, {'@': 132}), 12: (1, {'@': 132}), 51: (1, {'@': 132}), 14: (1, {'@': 132}), 15: (1, {'@': 132})}, 129: {0: (1, {'@': 133}), 1: (1, {'@': 133}), 2: (1, {'@': 133}), 3: (1, {'@': 133}), 4: (1, {'@': 133}), 5: (1, {'@': 133}), 6: (1, {'@': 133}), 7: (1, {'@': 133}), 8: (1, {'@': 133}), 9: (1, {'@': 133}), 10: (1, {'@': 133}), 11: (1, {'@': 133}), 12: (1, {'@': 133}), 13: (1, {'@': 133}), 14: (1, {'@': 133}), 15: (1, {'@': 133}), 16: (1, {'@': 133}), 17: (1, {'@': 133}), 18: (1, {'@': 133}), 19: (1, {'@': 133}), 20: (1, {'@': 133}), 21: (1, {'@': 133}), 22: (1, {'@': 133}), 23: (1, {'@': 133}), 24: (1, {'@': 133}), 25: (1, {'@': 133}), 26: (1, {'@': 133}), 27: (1, {'@': 133})}, 130: {25: (1, {'@': 134}), 19: (1, {'@': 134}), 21: (1, {'@': 134}), 26: (1, {'@': 134}), 22: (1, {'@': 134}), 23: (1, {'@': 134}), 27: (1, {'@': 134}), 24: (1, {'@': 134})}, 131: {81: (0, 164), 72: (0, 229)}, 132: {99: (0, 23), 20: (0, 6), 0: (1, {'@': 135}), 1: (1, {'@': 135}), 58: (1, {'@': 135}), 2: (1, {'@': 135}), 3: (1, {'@': 135}), 4: (1, {'@': 135}), 5: (1, {'@': 135}), 59: (1, {'@': 135}), 60: (1, {'@': 135}), 6: (1, {'@': 135}), 61: (1, {'@': 135}), 8: (1, {'@': 135}), 9: (1, {'@': 135}), 10: (1, {'@': 135}), 11: (1, {'@': 135}), 12: (1, {'@': 135}), 13: (1, {'@': 135}), 14: (1, {'@': 135}), 15: (1, {'@': 135}), 16: (1, {'@': 135}), 17: (1, {'@': 135}), 62: (1, {'@': 135}), 63: (1, {'@': 135}), 64: (1, {'@': 135}), 65: (1, {'@': 135}), 66: (1, {'@': 135}), 19: (1, {'@': 135}), 67: (1, {'@': 135}), 21: (1, {'@': 135}), 23: (1, {'@': 135}), 57: (1, {'@': 135}), 68: (1, {'@': 135}), 69: (1, {'@': 135}), 24: (1, {'@': 135}), 25: (1, {'@': 135}), 45: (1, {'@': 135}), 70: (1, {'@': 135}), 71: (1, {'@': 135}), 72: (1, {'@': 135}), 26: (1, {'@': 135}), 73: (1, {'@': 135}), 74: (1, {'@': 135}), 75: (1, {'@': 135}), 76: (1, {'@': 135}), 27: (1, {'@': 135}), 77: (1, {'@': 135}), 78: (1, {'@': 135}), 79: (1, {'@': 135}), 80: (1, {'@': 135}), 22: (1, {'@': 135}), 81: (1, {'@': 135}), 56: (1, {'@': 135}), 82: (1, {'@': 135}), 46: (1, {'@': 135}), 48: (1, {'@': 135}), 83: (1, {'@': 135}), 51: (1, {'@': 135})}, 133: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 143), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 134: {30: (0, 70), 19: (0, 57), 28: (0, 10), 42: (0, 81), 25: (0, 89), 24: (0, 8), 20: (0, 43), 22: (0, 4), 21: (0, 79), 50: (0, 251), 35: (0, 155), 36: (0, 177), 23: (0, 160), 38: (0, 249), 39: (0, 236), 54: (0, 213), 41: (0, 132), 44: (0, 226), 43: (0, 127), 26: (0, 19), 27: (0, 216), 29: (0, 66)}, 135: {65: (1, {'@': 136}), 66: (1, {'@': 136}), 67: (1, {'@': 136}), 5: (1, {'@': 136}), 23: (1, {'@': 136}), 68: (1, {'@': 136}), 62: (1, {'@': 136}), 8: (1, {'@': 136}), 25: (1, {'@': 136}), 45: (1, {'@': 136}), 70: (1, {'@': 136}), 63: (1, {'@': 136}), 72: (1, {'@': 136}), 11: (1, {'@': 136}), 73: (1, {'@': 136}), 76: (1, {'@': 136}), 87: (1, {'@': 136}), 16: (1, {'@': 136}), 4: (1, {'@': 136}), 0: (1, {'@': 136}), 60: (1, {'@': 136}), 82: (1, {'@': 136}), 15: (1, {'@': 136}), 1: (1, {'@': 136}), 19: (1, {'@': 136}), 21: (1, {'@': 136}), 6: (1, {'@': 136}), 61: (1, {'@': 136}), 57: (1, {'@': 136}), 69: (1, {'@': 136}), 24: (1, {'@': 136}), 9: (1, {'@': 136}), 71: (1, {'@': 136}), 10: (1, {'@': 136}), 26: (1, {'@': 136}), 13: (1, {'@': 136}), 74: (1, {'@': 136}), 64: (1, {'@': 136}), 75: (1, {'@': 136}), 27: (1, {'@': 136}), 77: (1, {'@': 136}), 17: (1, {'@': 136}), 78: (1, {'@': 136}), 58: (1, {'@': 136}), 84: (1, {'@': 136}), 79: (1, {'@': 136}), 2: (1, {'@': 136}), 3: (1, {'@': 136}), 20: (1, {'@': 136}), 80: (1, {'@': 136}), 59: (1, {'@': 136}), 22: (1, {'@': 136}), 81: (1, {'@': 136}), 56: (1, {'@': 136}), 46: (1, {'@': 136}), 48: (1, {'@': 136}), 12: (1, {'@': 136}), 83: (1, {'@': 136}), 51: (1, {'@': 136}), 14: (1, {'@': 136})}, 136: {65: (1, {'@': 137}), 66: (1, {'@': 137}), 1: (1, {'@': 137}), 19: (1, {'@': 137}), 21: (1, {'@': 137}), 5: (1, {'@': 137}), 6: (1, {'@': 137}), 23: (1, {'@': 137}), 57: (1, {'@': 137}), 68: (1, {'@': 137}), 69: (1, {'@': 137}), 24: (1, {'@': 137}), 25: (1, {'@': 137}), 8: (1, {'@': 137}), 45: (1, {'@': 137}), 9: (1, {'@': 137}), 10: (1, {'@': 137}), 26: (1, {'@': 137}), 11: (1, {'@': 137}), 13: (1, {'@': 137}), 76: (1, {'@': 137}), 27: (1, {'@': 137}), 16: (1, {'@': 137}), 17: (1, {'@': 137}), 4: (1, {'@': 137}), 78: (1, {'@': 137}), 0: (1, {'@': 137}), 79: (1, {'@': 137}), 2: (1, {'@': 137}), 3: (1, {'@': 137}), 20: (1, {'@': 137}), 80: (1, {'@': 137}), 22: (1, {'@': 137}), 56: (1, {'@': 137}), 46: (1, {'@': 137}), 48: (1, {'@': 137}), 12: (1, {'@': 137}), 51: (1, {'@': 137}), 14: (1, {'@': 137}), 15: (1, {'@': 137})}, 137: {14: (0, 142), 0: (1, {'@': 138}), 1: (1, {'@': 138}), 2: (1, {'@': 138}), 3: (1, {'@': 138}), 4: (1, {'@': 138}), 5: (1, {'@': 138}), 18: (1, {'@': 138}), 6: (1, {'@': 138}), 9: (1, {'@': 138}), 10: (1, {'@': 138}), 11: (1, {'@': 138}), 12: (1, {'@': 138}), 13: (1, {'@': 138}), 15: (1, {'@': 138}), 16: (1, {'@': 138}), 17: (1, {'@': 138}), 19: (1, {'@': 138}), 20: (1, {'@': 138}), 21: (1, {'@': 138}), 22: (1, {'@': 138}), 23: (1, {'@': 138}), 24: (1, {'@': 138}), 25: (1, {'@': 138}), 26: (1, {'@': 138}), 27: (1, {'@': 138}), 7: (1, {'@': 138}), 8: (1, {'@': 138})}, 138: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 180), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 139: {0: (1, {'@': 139}), 1: (1, {'@': 139}), 84: (1, {'@': 139}), 58: (1, {'@': 139}), 2: (1, {'@': 139}), 3: (1, {'@': 139}), 20: (1, {'@': 139}), 21: (1, {'@': 139}), 5: (1, {'@': 139}), 59: (1, {'@': 139}), 60: (1, {'@': 139}), 6: (1, {'@': 139}), 61: (1, {'@': 139}), 17: (1, {'@': 139}), 85: (1, {'@': 139}), 24: (1, {'@': 139}), 86: (1, {'@': 139}), 8: (1, {'@': 139}), 9: (1, {'@': 139}), 10: (1, {'@': 139}), 11: (1, {'@': 139}), 12: (1, {'@': 139}), 13: (1, {'@': 139}), 14: (1, {'@': 139}), 15: (1, {'@': 139}), 87: (1, {'@': 139}), 16: (1, {'@': 139}), 4: (1, {'@': 139}), 62: (1, {'@': 139}), 65: (1, {'@': 139}), 66: (1, {'@': 139}), 67: (1, {'@': 139}), 23: (1, {'@': 139}), 68: (1, {'@': 139}), 63: (1, {'@': 139}), 25: (1, {'@': 139}), 45: (1, {'@': 139}), 70: (1, {'@': 139}), 72: (1, {'@': 139}), 73: (1, {'@': 139}), 76: (1, {'@': 139}), 82: (1, {'@': 139}), 19: (1, {'@': 139}), 57: (1, {'@': 139}), 69: (1, {'@': 139}), 71: (1, {'@': 139}), 26: (1, {'@': 139}), 74: (1, {'@': 139}), 64: (1, {'@': 139}), 75: (1, {'@': 139}), 27: (1, {'@': 139}), 77: (1, {'@': 139}), 78: (1, {'@': 139}), 79: (1, {'@': 139}), 80: (1, {'@': 139}), 22: (1, {'@': 139}), 81: (1, {'@': 139}), 56: (1, {'@': 139}), 46: (1, {'@': 139}), 48: (1, {'@': 139}), 83: (1, {'@': 139}), 51: (1, {'@': 139})}, 140: {14: (0, 173)}, 141: {74: (0, 87)}, 142: {0: (1, {'@': 140}), 1: (1, {'@': 140}), 2: (1, {'@': 140}), 3: (1, {'@': 140}), 4: (1, {'@': 140}), 5: (1, {'@': 140}), 6: (1, {'@': 140}), 7: (1, {'@': 140}), 8: (1, {'@': 140}), 9: (1, {'@': 140}), 10: (1, {'@': 140}), 11: (1, {'@': 140}), 12: (1, {'@': 140}), 13: (1, {'@': 140}), 14: (1, {'@': 140}), 15: (1, {'@': 140}), 16: (1, {'@': 140}), 17: (1, {'@': 140}), 18: (1, {'@': 140}), 19: (1, {'@': 140}), 20: (1, {'@': 140}), 21: (1, {'@': 140}), 22: (1, {'@': 140}), 23: (1, {'@': 140}), 24: (1, {'@': 140}), 25: (1, {'@': 140}), 26: (1, {'@': 140}), 27: (1, {'@': 140})}, 143: {60: (0, 80), 8: (0, 228), 58: (1, {'@': 141}), 62: (1, {'@': 141}), 64: (1, {'@': 141}), 63: (1, {'@': 141}), 65: (1, {'@': 141}), 66: (1, {'@': 141}), 1: (1, {'@': 141}), 19: (1, {'@': 141}), 67: (1, {'@': 141}), 21: (1, {'@': 141}), 5: (1, {'@': 141}), 6: (1, {'@': 141}), 23: (1, {'@': 141}), 57: (1, {'@': 141}), 68: (1, {'@': 141}), 69: (1, {'@': 141}), 24: (1, {'@': 141}), 25: (1, {'@': 141}), 45: (1, {'@': 141}), 70: (1, {'@': 141}), 71: (1, {'@': 141}), 9: (1, {'@': 141}), 10: (1, {'@': 141}), 72: (1, {'@': 141}), 11: (1, {'@': 141}), 26: (1, {'@': 141}), 73: (1, {'@': 141}), 74: (1, {'@': 141}), 13: (1, {'@': 141}), 75: (1, {'@': 141}), 76: (1, {'@': 141}), 27: (1, {'@': 141}), 77: (1, {'@': 141}), 16: (1, {'@': 141}), 4: (1, {'@': 141}), 17: (1, {'@': 141}), 78: (1, {'@': 141}), 0: (1, {'@': 141}), 79: (1, {'@': 141}), 2: (1, {'@': 141}), 3: (1, {'@': 141}), 20: (1, {'@': 141}), 80: (1, {'@': 141}), 22: (1, {'@': 141}), 81: (1, {'@': 141}), 56: (1, {'@': 141}), 82: (1, {'@': 141}), 46: (1, {'@': 141}), 48: (1, {'@': 141}), 12: (1, {'@': 141}), 83: (1, {'@': 141}), 51: (1, {'@': 141}), 15: (1, {'@': 141}), 14: (1, {'@': 141})}, 144: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 60), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 145: {73: (0, 161), 60: (0, 80), 8: (0, 228)}, 146: {60: (0, 80), 64: (0, 186), 8: (0, 228), 1: (1, {'@': 142}), 19: (1, {'@': 142}), 21: (1, {'@': 142}), 5: (1, {'@': 142}), 6: (1, {'@': 142}), 23: (1, {'@': 142}), 57: (1, {'@': 142}), 24: (1, {'@': 142}), 25: (1, {'@': 142}), 45: (1, {'@': 142}), 9: (1, {'@': 142}), 10: (1, {'@': 142}), 26: (1, {'@': 142}), 11: (1, {'@': 142}), 13: (1, {'@': 142}), 27: (1, {'@': 142}), 16: (1, {'@': 142}), 17: (1, {'@': 142}), 4: (1, {'@': 142}), 0: (1, {'@': 142}), 2: (1, {'@': 142}), 3: (1, {'@': 142}), 20: (1, {'@': 142}), 22: (1, {'@': 142}), 81: (1, {'@': 142}), 56: (1, {'@': 142}), 46: (1, {'@': 142}), 48: (1, {'@': 142}), 12: (1, {'@': 142}), 51: (1, {'@': 142}), 14: (1, {'@': 142}), 15: (1, {'@': 142})}, 147: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 219), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 148: {65: (1, {'@': 143}), 66: (1, {'@': 143}), 67: (1, {'@': 143}), 5: (1, {'@': 143}), 23: (1, {'@': 143}), 68: (1, {'@': 143}), 62: (1, {'@': 143}), 8: (1, {'@': 143}), 63: (1, {'@': 143}), 25: (1, {'@': 143}), 45: (1, {'@': 143}), 70: (1, {'@': 143}), 72: (1, {'@': 143}), 11: (1, {'@': 143}), 73: (1, {'@': 143}), 76: (1, {'@': 143}), 16: (1, {'@': 143}), 4: (1, {'@': 143}), 0: (1, {'@': 143}), 60: (1, {'@': 143}), 82: (1, {'@': 143}), 15: (1, {'@': 143}), 1: (1, {'@': 143}), 19: (1, {'@': 143}), 21: (1, {'@': 143}), 6: (1, {'@': 143}), 61: (1, {'@': 143}), 57: (1, {'@': 143}), 69: (1, {'@': 143}), 24: (1, {'@': 143}), 9: (1, {'@': 143}), 71: (1, {'@': 143}), 10: (1, {'@': 143}), 26: (1, {'@': 143}), 13: (1, {'@': 143}), 74: (1, {'@': 143}), 64: (1, {'@': 143}), 75: (1, {'@': 143}), 27: (1, {'@': 143}), 77: (1, {'@': 143}), 17: (1, {'@': 143}), 78: (1, {'@': 143}), 58: (1, {'@': 143}), 79: (1, {'@': 143}), 2: (1, {'@': 143}), 3: (1, {'@': 143}), 20: (1, {'@': 143}), 80: (1, {'@': 143}), 59: (1, {'@': 143}), 22: (1, {'@': 143}), 81: (1, {'@': 143}), 56: (1, {'@': 143}), 46: (1, {'@': 143}), 48: (1, {'@': 143}), 12: (1, {'@': 143}), 83: (1, {'@': 143}), 51: (1, {'@': 143}), 14: (1, {'@': 143})}, 149: {60: (0, 80), 8: (0, 228), 58: (1, {'@': 144}), 64: (1, {'@': 144}), 82: (1, {'@': 144}), 63: (1, {'@': 144})}, 150: {0: (1, {'@': 145}), 1: (1, {'@': 145}), 84: (1, {'@': 145}), 58: (1, {'@': 145}), 2: (1, {'@': 145}), 3: (1, {'@': 145}), 20: (1, {'@': 145}), 21: (1, {'@': 145}), 5: (1, {'@': 145}), 59: (1, {'@': 145}), 60: (1, {'@': 145}), 6: (1, {'@': 145}), 61: (1, {'@': 145}), 17: (1, {'@': 145}), 85: (1, {'@': 145}), 24: (1, {'@': 145}), 86: (1, {'@': 145}), 8: (1, {'@': 145}), 9: (1, {'@': 145}), 10: (1, {'@': 145}), 11: (1, {'@': 145}), 12: (1, {'@': 145}), 13: (1, {'@': 145}), 14: (1, {'@': 145}), 15: (1, {'@': 145}), 87: (1, {'@': 145}), 16: (1, {'@': 145}), 4: (1, {'@': 145}), 62: (1, {'@': 145}), 65: (1, {'@': 145}), 66: (1, {'@': 145}), 67: (1, {'@': 145}), 23: (1, {'@': 145}), 68: (1, {'@': 145}), 63: (1, {'@': 145}), 25: (1, {'@': 145}), 45: (1, {'@': 145}), 70: (1, {'@': 145}), 72: (1, {'@': 145}), 73: (1, {'@': 145}), 76: (1, {'@': 145}), 82: (1, {'@': 145}), 19: (1, {'@': 145}), 57: (1, {'@': 145}), 69: (1, {'@': 145}), 71: (1, {'@': 145}), 26: (1, {'@': 145}), 74: (1, {'@': 145}), 64: (1, {'@': 145}), 75: (1, {'@': 145}), 27: (1, {'@': 145}), 77: (1, {'@': 145}), 78: (1, {'@': 145}), 79: (1, {'@': 145}), 80: (1, {'@': 145}), 22: (1, {'@': 145}), 81: (1, {'@': 145}), 56: (1, {'@': 145}), 46: (1, {'@': 145}), 48: (1, {'@': 145}), 83: (1, {'@': 145}), 51: (1, {'@': 145})}, 151: {0: (1, {'@': 146}), 1: (1, {'@': 146}), 84: (1, {'@': 146}), 58: (1, {'@': 146}), 2: (1, {'@': 146}), 3: (1, {'@': 146}), 20: (1, {'@': 146}), 21: (1, {'@': 146}), 5: (1, {'@': 146}), 59: (1, {'@': 146}), 60: (1, {'@': 146}), 6: (1, {'@': 146}), 61: (1, {'@': 146}), 17: (1, {'@': 146}), 85: (1, {'@': 146}), 24: (1, {'@': 146}), 86: (1, {'@': 146}), 8: (1, {'@': 146}), 9: (1, {'@': 146}), 10: (1, {'@': 146}), 11: (1, {'@': 146}), 12: (1, {'@': 146}), 13: (1, {'@': 146}), 14: (1, {'@': 146}), 15: (1, {'@': 146}), 87: (1, {'@': 146}), 16: (1, {'@': 146}), 4: (1, {'@': 146}), 62: (1, {'@': 146}), 65: (1, {'@': 146}), 66: (1, {'@': 146}), 67: (1, {'@': 146}), 23: (1, {'@': 146}), 68: (1, {'@': 146}), 63: (1, {'@': 146}), 25: (1, {'@': 146}), 45: (1, {'@': 146}), 70: (1, {'@': 146}), 72: (1, {'@': 146}), 73: (1, {'@': 146}), 76: (1, {'@': 146}), 82: (1, {'@': 146}), 19: (1, {'@': 146}), 57: (1, {'@': 146}), 69: (1, {'@': 146}), 71: (1, {'@': 146}), 26: (1, {'@': 146}), 74: (1, {'@': 146}), 64: (1, {'@': 146}), 75: (1, {'@': 146}), 27: (1, {'@': 146}), 77: (1, {'@': 146}), 78: (1, {'@': 146}), 79: (1, {'@': 146}), 80: (1, {'@': 146}), 22: (1, {'@': 146}), 81: (1, {'@': 146}), 56: (1, {'@': 146}), 46: (1, {'@': 146}), 48: (1, {'@': 146}), 83: (1, {'@': 146}), 51: (1, {'@': 146})}, 152: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 79: (0, 153), 9: (0, 181), 31: (0, 162), 32: (0, 205), 33: (0, 220), 100: (0, 175), 34: (0, 200), 65: (0, 144), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 101: (0, 71), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 76: (0, 72), 44: (0, 104), 5: (0, 51), 102: (0, 122), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 69: (0, 67), 80: (0, 109), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 66: (0, 141), 51: (0, 156), 103: (0, 172), 52: (0, 182), 78: (0, 208), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176), 68: (1, {'@': 147})}, 153: {76: (0, 33)}, 154: {2: (0, 227), 3: (0, 126), 16: (0, 0), 34: (0, 200), 40: (0, 121), 0: (0, 91), 12: (0, 188), 9: (0, 137), 4: (0, 56), 17: (0, 50), 11: (0, 140), 47: (0, 114), 10: (0, 29), 31: (0, 162), 33: (0, 220), 13: (0, 167), 52: (0, 182), 14: (0, 197), 6: (0, 203), 1: (0, 245), 5: (0, 51), 15: (0, 178), 58: (1, {'@': 148}), 59: (1, {'@': 148}), 60: (1, {'@': 148}), 61: (1, {'@': 148}), 8: (1, {'@': 148}), 62: (1, {'@': 148}), 63: (1, {'@': 148}), 64: (1, {'@': 148}), 65: (1, {'@': 148}), 66: (1, {'@': 148}), 67: (1, {'@': 148}), 23: (1, {'@': 148}), 68: (1, {'@': 148}), 25: (1, {'@': 148}), 45: (1, {'@': 148}), 70: (1, {'@': 148}), 72: (1, {'@': 148}), 73: (1, {'@': 148}), 76: (1, {'@': 148}), 82: (1, {'@': 148}), 19: (1, {'@': 148}), 21: (1, {'@': 148}), 57: (1, {'@': 148}), 69: (1, {'@': 148}), 24: (1, {'@': 148}), 71: (1, {'@': 148}), 26: (1, {'@': 148}), 74: (1, {'@': 148}), 75: (1, {'@': 148}), 27: (1, {'@': 148}), 77: (1, {'@': 148}), 78: (1, {'@': 148}), 79: (1, {'@': 148}), 20: (1, {'@': 148}), 80: (1, {'@': 148}), 22: (1, {'@': 148}), 81: (1, {'@': 148}), 56: (1, {'@': 148}), 46: (1, {'@': 148}), 48: (1, {'@': 148}), 83: (1, {'@': 148}), 51: (1, {'@': 148})}, 155: {85: (0, 97), 104: (0, 124), 0: (1, {'@': 149}), 1: (1, {'@': 149}), 84: (1, {'@': 149}), 58: (1, {'@': 149}), 2: (1, {'@': 149}), 3: (1, {'@': 149}), 20: (1, {'@': 149}), 4: (1, {'@': 149}), 5: (1, {'@': 149}), 59: (1, {'@': 149}), 60: (1, {'@': 149}), 6: (1, {'@': 149}), 61: (1, {'@': 149}), 8: (1, {'@': 149}), 9: (1, {'@': 149}), 10: (1, {'@': 149}), 11: (1, {'@': 149}), 12: (1, {'@': 149}), 13: (1, {'@': 149}), 14: (1, {'@': 149}), 15: (1, {'@': 149}), 87: (1, {'@': 149}), 16: (1, {'@': 149}), 17: (1, {'@': 149}), 62: (1, {'@': 149}), 65: (1, {'@': 149}), 66: (1, {'@': 149}), 19: (1, {'@': 149}), 67: (1, {'@': 149}), 21: (1, {'@': 149}), 23: (1, {'@': 149}), 57: (1, {'@': 149}), 68: (1, {'@': 149}), 69: (1, {'@': 149}), 24: (1, {'@': 149}), 63: (1, {'@': 149}), 25: (1, {'@': 149}), 45: (1, {'@': 149}), 70: (1, {'@': 149}), 71: (1, {'@': 149}), 72: (1, {'@': 149}), 26: (1, {'@': 149}), 73: (1, {'@': 149}), 74: (1, {'@': 149}), 64: (1, {'@': 149}), 75: (1, {'@': 149}), 76: (1, {'@': 149}), 27: (1, {'@': 149}), 77: (1, {'@': 149}), 78: (1, {'@': 149}), 79: (1, {'@': 149}), 80: (1, {'@': 149}), 22: (1, {'@': 149}), 81: (1, {'@': 149}), 56: (1, {'@': 149}), 82: (1, {'@': 149}), 46: (1, {'@': 149}), 48: (1, {'@': 149}), 83: (1, {'@': 149}), 51: (1, {'@': 149})}, 156: {1: (1, {'@': 150}), 19: (1, {'@': 150}), 21: (1, {'@': 150}), 5: (1, {'@': 150}), 6: (1, {'@': 150}), 23: (1, {'@': 150}), 57: (1, {'@': 150}), 24: (1, {'@': 150}), 25: (1, {'@': 150}), 8: (1, {'@': 150}), 45: (1, {'@': 150}), 9: (1, {'@': 150}), 10: (1, {'@': 150}), 26: (1, {'@': 150}), 11: (1, {'@': 150}), 13: (1, {'@': 150}), 27: (1, {'@': 150}), 16: (1, {'@': 150}), 17: (1, {'@': 150}), 4: (1, {'@': 150}), 0: (1, {'@': 150}), 2: (1, {'@': 150}), 3: (1, {'@': 150}), 20: (1, {'@': 150}), 22: (1, {'@': 150}), 56: (1, {'@': 150}), 46: (1, {'@': 150}), 48: (1, {'@': 150}), 12: (1, {'@': 150}), 51: (1, {'@': 150}), 14: (1, {'@': 150}), 15: (1, {'@': 150})}, 157: {75: (0, 107), 8: (0, 228), 60: (0, 80)}, 158: {90: (0, 49)}, 159: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 218), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 68), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 160: {0: (1, {'@': 151}), 1: (1, {'@': 151}), 84: (1, {'@': 151}), 58: (1, {'@': 151}), 2: (1, {'@': 151}), 3: (1, {'@': 151}), 20: (1, {'@': 151}), 21: (1, {'@': 151}), 5: (1, {'@': 151}), 59: (1, {'@': 151}), 60: (1, {'@': 151}), 6: (1, {'@': 151}), 61: (1, {'@': 151}), 17: (1, {'@': 151}), 85: (1, {'@': 151}), 24: (1, {'@': 151}), 86: (1, {'@': 151}), 8: (1, {'@': 151}), 9: (1, {'@': 151}), 10: (1, {'@': 151}), 11: (1, {'@': 151}), 12: (1, {'@': 151}), 13: (1, {'@': 151}), 14: (1, {'@': 151}), 15: (1, {'@': 151}), 87: (1, {'@': 151}), 16: (1, {'@': 151}), 4: (1, {'@': 151}), 62: (1, {'@': 151}), 65: (1, {'@': 151}), 66: (1, {'@': 151}), 19: (1, {'@': 151}), 67: (1, {'@': 151}), 23: (1, {'@': 151}), 57: (1, {'@': 151}), 68: (1, {'@': 151}), 69: (1, {'@': 151}), 63: (1, {'@': 151}), 25: (1, {'@': 151}), 45: (1, {'@': 151}), 70: (1, {'@': 151}), 71: (1, {'@': 151}), 72: (1, {'@': 151}), 26: (1, {'@': 151}), 73: (1, {'@': 151}), 74: (1, {'@': 151}), 64: (1, {'@': 151}), 75: (1, {'@': 151}), 76: (1, {'@': 151}), 27: (1, {'@': 151}), 77: (1, {'@': 151}), 78: (1, {'@': 151}), 79: (1, {'@': 151}), 80: (1, {'@': 151}), 22: (1, {'@': 151}), 81: (1, {'@': 151}), 56: (1, {'@': 151}), 82: (1, {'@': 151}), 46: (1, {'@': 151}), 48: (1, {'@': 151}), 83: (1, {'@': 151}), 51: (1, {'@': 151})}, 161: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 204), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 162: {0: (1, {'@': 152}), 1: (1, {'@': 152}), 8: (1, {'@': 152}), 2: (1, {'@': 152}), 3: (1, {'@': 152}), 9: (1, {'@': 152}), 10: (1, {'@': 152}), 11: (1, {'@': 152}), 12: (1, {'@': 152}), 5: (1, {'@': 152}), 17: (1, {'@': 152}), 13: (1, {'@': 152}), 6: (1, {'@': 152}), 7: (1, {'@': 152}), 14: (1, {'@': 152}), 15: (1, {'@': 152}), 16: (1, {'@': 152}), 4: (1, {'@': 152}), 18: (1, {'@': 152}), 19: (1, {'@': 152}), 20: (1, {'@': 152}), 21: (1, {'@': 152}), 22: (1, {'@': 152}), 23: (1, {'@': 152}), 24: (1, {'@': 152}), 25: (1, {'@': 152}), 26: (1, {'@': 152}), 27: (1, {'@': 152})}, 163: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 234), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 164: {65: (1, {'@': 153}), 66: (1, {'@': 153}), 1: (1, {'@': 153}), 19: (1, {'@': 153}), 21: (1, {'@': 153}), 5: (1, {'@': 153}), 6: (1, {'@': 153}), 23: (1, {'@': 153}), 57: (1, {'@': 153}), 68: (1, {'@': 153}), 69: (1, {'@': 153}), 24: (1, {'@': 153}), 25: (1, {'@': 153}), 8: (1, {'@': 153}), 45: (1, {'@': 153}), 9: (1, {'@': 153}), 10: (1, {'@': 153}), 26: (1, {'@': 153}), 11: (1, {'@': 153}), 13: (1, {'@': 153}), 76: (1, {'@': 153}), 27: (1, {'@': 153}), 16: (1, {'@': 153}), 17: (1, {'@': 153}), 4: (1, {'@': 153}), 78: (1, {'@': 153}), 0: (1, {'@': 153}), 79: (1, {'@': 153}), 2: (1, {'@': 153}), 3: (1, {'@': 153}), 20: (1, {'@': 153}), 80: (1, {'@': 153}), 22: (1, {'@': 153}), 56: (1, {'@': 153}), 46: (1, {'@': 153}), 48: (1, {'@': 153}), 12: (1, {'@': 153}), 51: (1, {'@': 153}), 14: (1, {'@': 153}), 15: (1, {'@': 153})}, 165: {60: (0, 80), 8: (0, 228), 65: (1, {'@': 154}), 66: (1, {'@': 154}), 1: (1, {'@': 154}), 19: (1, {'@': 154}), 21: (1, {'@': 154}), 5: (1, {'@': 154}), 6: (1, {'@': 154}), 23: (1, {'@': 154}), 57: (1, {'@': 154}), 68: (1, {'@': 154}), 69: (1, {'@': 154}), 24: (1, {'@': 154}), 25: (1, {'@': 154}), 45: (1, {'@': 154}), 9: (1, {'@': 154}), 10: (1, {'@': 154}), 26: (1, {'@': 154}), 11: (1, {'@': 154}), 13: (1, {'@': 154}), 76: (1, {'@': 154}), 27: (1, {'@': 154}), 16: (1, {'@': 154}), 17: (1, {'@': 154}), 4: (1, {'@': 154}), 78: (1, {'@': 154}), 0: (1, {'@': 154}), 79: (1, {'@': 154}), 2: (1, {'@': 154}), 3: (1, {'@': 154}), 20: (1, {'@': 154}), 80: (1, {'@': 154}), 22: (1, {'@': 154}), 56: (1, {'@': 154}), 46: (1, {'@': 154}), 48: (1, {'@': 154}), 12: (1, {'@': 154}), 51: (1, {'@': 154}), 14: (1, {'@': 154}), 15: (1, {'@': 154})}, 166: {82: (0, 15), 64: (0, 64)}, 167: {0: (1, {'@': 155}), 1: (1, {'@': 155}), 2: (1, {'@': 155}), 3: (1, {'@': 155}), 4: (1, {'@': 155}), 5: (1, {'@': 155}), 6: (1, {'@': 155}), 7: (1, {'@': 155}), 8: (1, {'@': 155}), 9: (1, {'@': 155}), 10: (1, {'@': 155}), 11: (1, {'@': 155}), 12: (1, {'@': 155}), 13: (1, {'@': 155}), 14: (1, {'@': 155}), 15: (1, {'@': 155}), 16: (1, {'@': 155}), 17: (1, {'@': 155}), 18: (1, {'@': 155}), 19: (1, {'@': 155}), 20: (1, {'@': 155}), 21: (1, {'@': 155}), 22: (1, {'@': 155}), 23: (1, {'@': 155}), 24: (1, {'@': 155}), 25: (1, {'@': 155}), 26: (1, {'@': 155}), 27: (1, {'@': 155})}, 168: {60: (0, 80), 8: (0, 228), 67: (0, 96)}, 169: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 254), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 170: {82: (0, 94), 64: (0, 64)}, 171: {72: (0, 130), 81: (0, 136)}, 172: {65: (1, {'@': 156}), 66: (1, {'@': 156}), 1: (1, {'@': 156}), 19: (1, {'@': 156}), 21: (1, {'@': 156}), 5: (1, {'@': 156}), 6: (1, {'@': 156}), 23: (1, {'@': 156}), 57: (1, {'@': 156}), 68: (1, {'@': 156}), 69: (1, {'@': 156}), 24: (1, {'@': 156}), 25: (1, {'@': 156}), 8: (1, {'@': 156}), 45: (1, {'@': 156}), 9: (1, {'@': 156}), 10: (1, {'@': 156}), 26: (1, {'@': 156}), 11: (1, {'@': 156}), 13: (1, {'@': 156}), 76: (1, {'@': 156}), 27: (1, {'@': 156}), 16: (1, {'@': 156}), 17: (1, {'@': 156}), 4: (1, {'@': 156}), 78: (1, {'@': 156}), 0: (1, {'@': 156}), 79: (1, {'@': 156}), 2: (1, {'@': 156}), 3: (1, {'@': 156}), 20: (1, {'@': 156}), 80: (1, {'@': 156}), 22: (1, {'@': 156}), 56: (1, {'@': 156}), 46: (1, {'@': 156}), 48: (1, {'@': 156}), 12: (1, {'@': 156}), 51: (1, {'@': 156}), 14: (1, {'@': 156}), 15: (1, {'@': 156})}, 173: {0: (1, {'@': 157}), 1: (1, {'@': 157}), 2: (1, {'@': 157}), 3: (1, {'@': 157}), 4: (1, {'@': 157}), 5: (1, {'@': 157}), 6: (1, {'@': 157}), 7: (1, {'@': 157}), 8: (1, {'@': 157}), 9: (1, {'@': 157}), 10: (1, {'@': 157}), 11: (1, {'@': 157}), 12: (1, {'@': 157}), 13: (1, {'@': 157}), 14: (1, {'@': 157}), 15: (1, {'@': 157}), 16: (1, {'@': 157}), 17: (1, {'@': 157}), 18: (1, {'@': 157}), 19: (1, {'@': 157}), 20: (1, {'@': 157}), 21: (1, {'@': 157}), 22: (1, {'@': 157}), 23: (1, {'@': 157}), 24: (1, {'@': 157}), 25: (1, {'@': 157}), 26: (1, {'@': 157}), 27: (1, {'@': 157})}, 174: {0: (1, {'@': 158}), 1: (1, {'@': 158}), 84: (1, {'@': 158}), 58: (1, {'@': 158}), 2: (1, {'@': 158}), 3: (1, {'@': 158}), 20: (1, {'@': 158}), 4: (1, {'@': 158}), 5: (1, {'@': 158}), 59: (1, {'@': 158}), 60: (1, {'@': 158}), 6: (1, {'@': 158}), 61: (1, {'@': 158}), 85: (1, {'@': 158}), 86: (1, {'@': 158}), 8: (1, {'@': 158}), 9: (1, {'@': 158}), 10: (1, {'@': 158}), 11: (1, {'@': 158}), 12: (1, {'@': 158}), 13: (1, {'@': 158}), 14: (1, {'@': 158}), 15: (1, {'@': 158}), 87: (1, {'@': 158}), 16: (1, {'@': 158}), 17: (1, {'@': 158}), 62: (1, {'@': 158}), 65: (1, {'@': 158}), 66: (1, {'@': 158}), 19: (1, {'@': 158}), 67: (1, {'@': 158}), 21: (1, {'@': 158}), 23: (1, {'@': 158}), 57: (1, {'@': 158}), 68: (1, {'@': 158}), 69: (1, {'@': 158}), 24: (1, {'@': 158}), 63: (1, {'@': 158}), 25: (1, {'@': 158}), 45: (1, {'@': 158}), 70: (1, {'@': 158}), 71: (1, {'@': 158}), 72: (1, {'@': 158}), 26: (1, {'@': 158}), 73: (1, {'@': 158}), 74: (1, {'@': 158}), 64: (1, {'@': 158}), 75: (1, {'@': 158}), 76: (1, {'@': 158}), 27: (1, {'@': 158}), 77: (1, {'@': 158}), 78: (1, {'@': 158}), 79: (1, {'@': 158}), 80: (1, {'@': 158}), 22: (1, {'@': 158}), 81: (1, {'@': 158}), 56: (1, {'@': 158}), 82: (1, {'@': 158}), 46: (1, {'@': 158}), 48: (1, {'@': 158}), 83: (1, {'@': 158}), 51: (1, {'@': 158})}, 175: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 79: (0, 153), 9: (0, 181), 31: (0, 162), 32: (0, 165), 33: (0, 220), 34: (0, 200), 65: (0, 144), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 76: (0, 72), 44: (0, 104), 5: (0, 51), 103: (0, 34), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 69: (0, 67), 80: (0, 109), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 66: (0, 141), 52: (0, 182), 78: (0, 208), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 102: (0, 128), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176), 68: (1, {'@': 159})}, 176: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 157), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 177: {0: (1, {'@': 160}), 1: (1, {'@': 160}), 58: (1, {'@': 160}), 2: (1, {'@': 160}), 3: (1, {'@': 160}), 4: (1, {'@': 160}), 5: (1, {'@': 160}), 59: (1, {'@': 160}), 60: (1, {'@': 160}), 6: (1, {'@': 160}), 61: (1, {'@': 160}), 8: (1, {'@': 160}), 9: (1, {'@': 160}), 10: (1, {'@': 160}), 11: (1, {'@': 160}), 12: (1, {'@': 160}), 13: (1, {'@': 160}), 14: (1, {'@': 160}), 15: (1, {'@': 160}), 16: (1, {'@': 160}), 17: (1, {'@': 160}), 62: (1, {'@': 160}), 63: (1, {'@': 160}), 64: (1, {'@': 160}), 65: (1, {'@': 160}), 66: (1, {'@': 160}), 67: (1, {'@': 160}), 23: (1, {'@': 160}), 68: (1, {'@': 160}), 25: (1, {'@': 160}), 45: (1, {'@': 160}), 70: (1, {'@': 160}), 72: (1, {'@': 160}), 73: (1, {'@': 160}), 76: (1, {'@': 160}), 82: (1, {'@': 160}), 19: (1, {'@': 160}), 21: (1, {'@': 160}), 57: (1, {'@': 160}), 69: (1, {'@': 160}), 24: (1, {'@': 160}), 71: (1, {'@': 160}), 26: (1, {'@': 160}), 74: (1, {'@': 160}), 75: (1, {'@': 160}), 27: (1, {'@': 160}), 77: (1, {'@': 160}), 78: (1, {'@': 160}), 79: (1, {'@': 160}), 20: (1, {'@': 160}), 80: (1, {'@': 160}), 22: (1, {'@': 160}), 81: (1, {'@': 160}), 56: (1, {'@': 160}), 46: (1, {'@': 160}), 48: (1, {'@': 160}), 83: (1, {'@': 160}), 51: (1, {'@': 160})}, 178: {0: (1, {'@': 161}), 1: (1, {'@': 161}), 2: (1, {'@': 161}), 3: (1, {'@': 161}), 4: (1, {'@': 161}), 5: (1, {'@': 161}), 6: (1, {'@': 161}), 7: (1, {'@': 161}), 8: (1, {'@': 161}), 9: (1, {'@': 161}), 10: (1, {'@': 161}), 11: (1, {'@': 161}), 12: (1, {'@': 161}), 13: (1, {'@': 161}), 14: (1, {'@': 161}), 15: (1, {'@': 161}), 16: (1, {'@': 161}), 17: (1, {'@': 161}), 18: (1, {'@': 161}), 19: (1, {'@': 161}), 20: (1, {'@': 161}), 21: (1, {'@': 161}), 22: (1, {'@': 161}), 23: (1, {'@': 161}), 24: (1, {'@': 161}), 25: (1, {'@': 161}), 26: (1, {'@': 161}), 27: (1, {'@': 161})}, 179: {2: (0, 227), 3: (0, 126), 16: (0, 0), 34: (0, 200), 40: (0, 121), 0: (0, 91), 12: (0, 188), 9: (0, 137), 4: (0, 56), 17: (0, 50), 11: (0, 140), 47: (0, 114), 10: (0, 29), 31: (0, 162), 33: (0, 220), 13: (0, 167), 52: (0, 182), 14: (0, 197), 6: (0, 203), 1: (0, 245), 5: (0, 51), 15: (0, 178), 65: (1, {'@': 162}), 66: (1, {'@': 162}), 67: (1, {'@': 162}), 23: (1, {'@': 162}), 68: (1, {'@': 162}), 62: (1, {'@': 162}), 8: (1, {'@': 162}), 25: (1, {'@': 162}), 45: (1, {'@': 162}), 70: (1, {'@': 162}), 63: (1, {'@': 162}), 72: (1, {'@': 162}), 73: (1, {'@': 162}), 76: (1, {'@': 162}), 60: (1, {'@': 162}), 82: (1, {'@': 162}), 19: (1, {'@': 162}), 21: (1, {'@': 162}), 57: (1, {'@': 162}), 69: (1, {'@': 162}), 24: (1, {'@': 162}), 71: (1, {'@': 162}), 26: (1, {'@': 162}), 74: (1, {'@': 162}), 64: (1, {'@': 162}), 75: (1, {'@': 162}), 27: (1, {'@': 162}), 77: (1, {'@': 162}), 78: (1, {'@': 162}), 58: (1, {'@': 162}), 79: (1, {'@': 162}), 20: (1, {'@': 162}), 80: (1, {'@': 162}), 59: (1, {'@': 162}), 22: (1, {'@': 162}), 81: (1, {'@': 162}), 56: (1, {'@': 162}), 46: (1, {'@': 162}), 48: (1, {'@': 162}), 83: (1, {'@': 162}), 51: (1, {'@': 162})}, 180: {60: (0, 80), 8: (0, 228), 81: (1, {'@': 163}), 72: (1, {'@': 163})}, 181: {30: (0, 70), 19: (0, 57), 28: (0, 10), 42: (0, 81), 25: (0, 89), 24: (0, 8), 20: (0, 43), 22: (0, 4), 21: (0, 79), 14: (0, 142), 50: (0, 251), 35: (0, 155), 36: (0, 177), 23: (0, 160), 38: (0, 249), 39: (0, 236), 54: (0, 213), 41: (0, 132), 43: (0, 127), 26: (0, 19), 27: (0, 216), 29: (0, 66), 44: (0, 59), 0: (1, {'@': 138}), 1: (1, {'@': 138}), 2: (1, {'@': 138}), 3: (1, {'@': 138}), 4: (1, {'@': 138}), 5: (1, {'@': 138}), 6: (1, {'@': 138}), 7: (1, {'@': 138}), 8: (1, {'@': 138}), 9: (1, {'@': 138}), 10: (1, {'@': 138}), 11: (1, {'@': 138}), 12: (1, {'@': 138}), 13: (1, {'@': 138}), 15: (1, {'@': 138}), 16: (1, {'@': 138}), 17: (1, {'@': 138})}, 182: {0: (1, {'@': 164}), 1: (1, {'@': 164}), 2: (1, {'@': 164}), 3: (1, {'@': 164}), 4: (1, {'@': 164}), 5: (1, {'@': 164}), 6: (1, {'@': 164}), 7: (1, {'@': 164}), 8: (1, {'@': 164}), 9: (1, {'@': 164}), 10: (1, {'@': 164}), 11: (1, {'@': 164}), 12: (1, {'@': 164}), 13: (1, {'@': 164}), 14: (1, {'@': 164}), 15: (1, {'@': 164}), 16: (1, {'@': 164}), 17: (1, {'@': 164}), 18: (1, {'@': 164}), 19: (1, {'@': 164}), 20: (1, {'@': 164}), 21: (1, {'@': 164}), 22: (1, {'@': 164}), 23: (1, {'@': 164}), 24: (1, {'@': 164}), 25: (1, {'@': 164}), 26: (1, {'@': 164}), 27: (1, {'@': 164})}, 183: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 214), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 184: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 146), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 105: (0, 253), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 185: {81: (0, 189)}, 186: {1: (1, {'@': 165}), 19: (1, {'@': 165}), 21: (1, {'@': 165}), 5: (1, {'@': 165}), 6: (1, {'@': 165}), 23: (1, {'@': 165}), 57: (1, {'@': 165}), 24: (1, {'@': 165}), 25: (1, {'@': 165}), 8: (1, {'@': 165}), 45: (1, {'@': 165}), 9: (1, {'@': 165}), 10: (1, {'@': 165}), 26: (1, {'@': 165}), 11: (1, {'@': 165}), 13: (1, {'@': 165}), 27: (1, {'@': 165}), 16: (1, {'@': 165}), 17: (1, {'@': 165}), 4: (1, {'@': 165}), 0: (1, {'@': 165}), 2: (1, {'@': 165}), 3: (1, {'@': 165}), 20: (1, {'@': 165}), 22: (1, {'@': 165}), 81: (1, {'@': 165}), 56: (1, {'@': 165}), 46: (1, {'@': 165}), 48: (1, {'@': 165}), 12: (1, {'@': 165}), 51: (1, {'@': 165}), 14: (1, {'@': 165}), 15: (1, {'@': 165})}, 187: {30: (0, 70), 19: (0, 57), 42: (0, 81), 25: (0, 89), 28: (0, 41), 24: (0, 8), 22: (0, 4), 21: (0, 79), 35: (0, 155), 23: (0, 160), 38: (0, 249), 39: (0, 236), 54: (0, 213), 43: (0, 127), 26: (0, 19), 27: (0, 216), 29: (0, 66)}, 188: {14: (0, 129), 0: (1, {'@': 166}), 1: (1, {'@': 166}), 2: (1, {'@': 166}), 3: (1, {'@': 166}), 4: (1, {'@': 166}), 5: (1, {'@': 166}), 6: (1, {'@': 166}), 7: (1, {'@': 166}), 8: (1, {'@': 166}), 9: (1, {'@': 166}), 10: (1, {'@': 166}), 11: (1, {'@': 166}), 12: (1, {'@': 166}), 13: (1, {'@': 166}), 15: (1, {'@': 166}), 16: (1, {'@': 166}), 17: (1, {'@': 166}), 18: (1, {'@': 166}), 19: (1, {'@': 166}), 20: (1, {'@': 166}), 21: (1, {'@': 166}), 22: (1, {'@': 166}), 23: (1, {'@': 166}), 24: (1, {'@': 166}), 25: (1, {'@': 166}), 26: (1, {'@': 166}), 27: (1, {'@': 166})}, 189: {65: (1, {'@': 167}), 66: (1, {'@': 167}), 1: (1, {'@': 167}), 19: (1, {'@': 167}), 21: (1, {'@': 167}), 5: (1, {'@': 167}), 6: (1, {'@': 167}), 23: (1, {'@': 167}), 57: (1, {'@': 167}), 68: (1, {'@': 167}), 69: (1, {'@': 167}), 24: (1, {'@': 167}), 25: (1, {'@': 167}), 8: (1, {'@': 167}), 45: (1, {'@': 167}), 9: (1, {'@': 167}), 10: (1, {'@': 167}), 26: (1, {'@': 167}), 11: (1, {'@': 167}), 13: (1, {'@': 167}), 76: (1, {'@': 167}), 27: (1, {'@': 167}), 16: (1, {'@': 167}), 17: (1, {'@': 167}), 4: (1, {'@': 167}), 78: (1, {'@': 167}), 0: (1, {'@': 167}), 79: (1, {'@': 167}), 2: (1, {'@': 167}), 3: (1, {'@': 167}), 20: (1, {'@': 167}), 80: (1, {'@': 167}), 22: (1, {'@': 167}), 56: (1, {'@': 167}), 46: (1, {'@': 167}), 48: (1, {'@': 167}), 12: (1, {'@': 167}), 51: (1, {'@': 167}), 14: (1, {'@': 167}), 15: (1, {'@': 167})}, 190: {64: (0, 65), 1: (1, {'@': 168}), 19: (1, {'@': 168}), 21: (1, {'@': 168}), 5: (1, {'@': 168}), 6: (1, {'@': 168}), 23: (1, {'@': 168}), 57: (1, {'@': 168}), 24: (1, {'@': 168}), 25: (1, {'@': 168}), 70: (1, {'@': 168}), 8: (1, {'@': 168}), 45: (1, {'@': 168}), 9: (1, {'@': 168}), 10: (1, {'@': 168}), 26: (1, {'@': 168}), 11: (1, {'@': 168}), 13: (1, {'@': 168}), 27: (1, {'@': 168}), 16: (1, {'@': 168}), 17: (1, {'@': 168}), 4: (1, {'@': 168}), 0: (1, {'@': 168}), 2: (1, {'@': 168}), 3: (1, {'@': 168}), 20: (1, {'@': 168}), 22: (1, {'@': 168}), 81: (1, {'@': 168}), 56: (1, {'@': 168}), 46: (1, {'@': 168}), 48: (1, {'@': 168}), 12: (1, {'@': 168}), 51: (1, {'@': 168}), 14: (1, {'@': 168}), 15: (1, {'@': 168})}, 191: {65: (1, {'@': 169}), 66: (1, {'@': 169}), 67: (1, {'@': 169}), 5: (1, {'@': 169}), 23: (1, {'@': 169}), 68: (1, {'@': 169}), 62: (1, {'@': 169}), 8: (1, {'@': 169}), 25: (1, {'@': 169}), 45: (1, {'@': 169}), 70: (1, {'@': 169}), 63: (1, {'@': 169}), 72: (1, {'@': 169}), 11: (1, {'@': 169}), 73: (1, {'@': 169}), 76: (1, {'@': 169}), 87: (1, {'@': 169}), 16: (1, {'@': 169}), 4: (1, {'@': 169}), 0: (1, {'@': 169}), 60: (1, {'@': 169}), 82: (1, {'@': 169}), 15: (1, {'@': 169}), 1: (1, {'@': 169}), 19: (1, {'@': 169}), 21: (1, {'@': 169}), 6: (1, {'@': 169}), 61: (1, {'@': 169}), 57: (1, {'@': 169}), 69: (1, {'@': 169}), 24: (1, {'@': 169}), 9: (1, {'@': 169}), 71: (1, {'@': 169}), 10: (1, {'@': 169}), 26: (1, {'@': 169}), 13: (1, {'@': 169}), 74: (1, {'@': 169}), 64: (1, {'@': 169}), 75: (1, {'@': 169}), 27: (1, {'@': 169}), 77: (1, {'@': 169}), 17: (1, {'@': 169}), 78: (1, {'@': 169}), 58: (1, {'@': 169}), 84: (1, {'@': 169}), 79: (1, {'@': 169}), 2: (1, {'@': 169}), 3: (1, {'@': 169}), 20: (1, {'@': 169}), 80: (1, {'@': 169}), 59: (1, {'@': 169}), 22: (1, {'@': 169}), 81: (1, {'@': 169}), 56: (1, {'@': 169}), 46: (1, {'@': 169}), 48: (1, {'@': 169}), 12: (1, {'@': 169}), 83: (1, {'@': 169}), 51: (1, {'@': 169}), 14: (1, {'@': 169})}, 192: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 256), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 193: {60: (0, 235)}, 194: {65: (1, {'@': 170}), 66: (1, {'@': 170}), 67: (1, {'@': 170}), 5: (1, {'@': 170}), 23: (1, {'@': 170}), 68: (1, {'@': 170}), 62: (1, {'@': 170}), 8: (1, {'@': 170}), 63: (1, {'@': 170}), 25: (1, {'@': 170}), 45: (1, {'@': 170}), 70: (1, {'@': 170}), 72: (1, {'@': 170}), 11: (1, {'@': 170}), 73: (1, {'@': 170}), 76: (1, {'@': 170}), 87: (1, {'@': 170}), 16: (1, {'@': 170}), 4: (1, {'@': 170}), 0: (1, {'@': 170}), 60: (1, {'@': 170}), 82: (1, {'@': 170}), 15: (1, {'@': 170}), 1: (1, {'@': 170}), 19: (1, {'@': 170}), 21: (1, {'@': 170}), 6: (1, {'@': 170}), 61: (1, {'@': 170}), 57: (1, {'@': 170}), 69: (1, {'@': 170}), 24: (1, {'@': 170}), 9: (1, {'@': 170}), 71: (1, {'@': 170}), 10: (1, {'@': 170}), 26: (1, {'@': 170}), 13: (1, {'@': 170}), 74: (1, {'@': 170}), 64: (1, {'@': 170}), 75: (1, {'@': 170}), 27: (1, {'@': 170}), 77: (1, {'@': 170}), 17: (1, {'@': 170}), 78: (1, {'@': 170}), 58: (1, {'@': 170}), 84: (1, {'@': 170}), 79: (1, {'@': 170}), 2: (1, {'@': 170}), 3: (1, {'@': 170}), 20: (1, {'@': 170}), 80: (1, {'@': 170}), 59: (1, {'@': 170}), 22: (1, {'@': 170}), 81: (1, {'@': 170}), 56: (1, {'@': 170}), 46: (1, {'@': 170}), 48: (1, {'@': 170}), 12: (1, {'@': 170}), 83: (1, {'@': 170}), 51: (1, {'@': 170}), 14: (1, {'@': 170})}, 195: {64: (0, 32), 60: (0, 80), 8: (0, 228), 1: (1, {'@': 171}), 19: (1, {'@': 171}), 21: (1, {'@': 171}), 5: (1, {'@': 171}), 6: (1, {'@': 171}), 23: (1, {'@': 171}), 57: (1, {'@': 171}), 24: (1, {'@': 171}), 25: (1, {'@': 171}), 45: (1, {'@': 171}), 9: (1, {'@': 171}), 10: (1, {'@': 171}), 26: (1, {'@': 171}), 11: (1, {'@': 171}), 13: (1, {'@': 171}), 27: (1, {'@': 171}), 16: (1, {'@': 171}), 17: (1, {'@': 171}), 4: (1, {'@': 171}), 0: (1, {'@': 171}), 2: (1, {'@': 171}), 3: (1, {'@': 171}), 20: (1, {'@': 171}), 22: (1, {'@': 171}), 81: (1, {'@': 171}), 56: (1, {'@': 171}), 46: (1, {'@': 171}), 48: (1, {'@': 171}), 12: (1, {'@': 171}), 51: (1, {'@': 171}), 14: (1, {'@': 171}), 15: (1, {'@': 171})}, 196: {65: (1, {'@': 172}), 66: (1, {'@': 172}), 1: (1, {'@': 172}), 19: (1, {'@': 172}), 21: (1, {'@': 172}), 5: (1, {'@': 172}), 6: (1, {'@': 172}), 23: (1, {'@': 172}), 57: (1, {'@': 172}), 68: (1, {'@': 172}), 69: (1, {'@': 172}), 24: (1, {'@': 172}), 25: (1, {'@': 172}), 8: (1, {'@': 172}), 45: (1, {'@': 172}), 9: (1, {'@': 172}), 10: (1, {'@': 172}), 26: (1, {'@': 172}), 11: (1, {'@': 172}), 13: (1, {'@': 172}), 76: (1, {'@': 172}), 27: (1, {'@': 172}), 16: (1, {'@': 172}), 17: (1, {'@': 172}), 4: (1, {'@': 172}), 78: (1, {'@': 172}), 0: (1, {'@': 172}), 79: (1, {'@': 172}), 2: (1, {'@': 172}), 3: (1, {'@': 172}), 20: (1, {'@': 172}), 80: (1, {'@': 172}), 22: (1, {'@': 172}), 56: (1, {'@': 172}), 46: (1, {'@': 172}), 48: (1, {'@': 172}), 12: (1, {'@': 172}), 51: (1, {'@': 172}), 14: (1, {'@': 172}), 15: (1, {'@': 172})}, 197: {0: (1, {'@': 173}), 1: (1, {'@': 173}), 2: (1, {'@': 173}), 3: (1, {'@': 173}), 4: (1, {'@': 173}), 5: (1, {'@': 173}), 6: (1, {'@': 173}), 7: (1, {'@': 173}), 8: (1, {'@': 173}), 9: (1, {'@': 173}), 10: (1, {'@': 173}), 11: (1, {'@': 173}), 12: (1, {'@': 173}), 13: (1, {'@': 173}), 14: (1, {'@': 173}), 15: (1, {'@': 173}), 16: (1, {'@': 173}), 17: (1, {'@': 173}), 18: (1, {'@': 173}), 19: (1, {'@': 173}), 20: (1, {'@': 173}), 21: (1, {'@': 173}), 22: (1, {'@': 173}), 23: (1, {'@': 173}), 24: (1, {'@': 173}), 25: (1, {'@': 173}), 26: (1, {'@': 173}), 27: (1, {'@': 173})}, 198: {65: (1, {'@': 174}), 66: (1, {'@': 174}), 67: (1, {'@': 174}), 5: (1, {'@': 174}), 23: (1, {'@': 174}), 68: (1, {'@': 174}), 62: (1, {'@': 174}), 8: (1, {'@': 174}), 63: (1, {'@': 174}), 25: (1, {'@': 174}), 45: (1, {'@': 174}), 70: (1, {'@': 174}), 72: (1, {'@': 174}), 11: (1, {'@': 174}), 73: (1, {'@': 174}), 76: (1, {'@': 174}), 16: (1, {'@': 174}), 4: (1, {'@': 174}), 0: (1, {'@': 174}), 60: (1, {'@': 174}), 82: (1, {'@': 174}), 15: (1, {'@': 174}), 1: (1, {'@': 174}), 19: (1, {'@': 174}), 21: (1, {'@': 174}), 6: (1, {'@': 174}), 61: (1, {'@': 174}), 57: (1, {'@': 174}), 69: (1, {'@': 174}), 24: (1, {'@': 174}), 9: (1, {'@': 174}), 71: (1, {'@': 174}), 10: (1, {'@': 174}), 26: (1, {'@': 174}), 13: (1, {'@': 174}), 74: (1, {'@': 174}), 64: (1, {'@': 174}), 75: (1, {'@': 174}), 27: (1, {'@': 174}), 77: (1, {'@': 174}), 17: (1, {'@': 174}), 78: (1, {'@': 174}), 58: (1, {'@': 174}), 79: (1, {'@': 174}), 2: (1, {'@': 174}), 3: (1, {'@': 174}), 20: (1, {'@': 174}), 80: (1, {'@': 174}), 59: (1, {'@': 174}), 22: (1, {'@': 174}), 81: (1, {'@': 174}), 56: (1, {'@': 174}), 46: (1, {'@': 174}), 48: (1, {'@': 174}), 12: (1, {'@': 174}), 83: (1, {'@': 174}), 51: (1, {'@': 174}), 14: (1, {'@': 174})}, 199: {65: (1, {'@': 175}), 66: (1, {'@': 175}), 1: (1, {'@': 175}), 19: (1, {'@': 175}), 21: (1, {'@': 175}), 5: (1, {'@': 175}), 6: (1, {'@': 175}), 23: (1, {'@': 175}), 57: (1, {'@': 175}), 68: (1, {'@': 175}), 69: (1, {'@': 175}), 24: (1, {'@': 175}), 25: (1, {'@': 175}), 8: (1, {'@': 175}), 45: (1, {'@': 175}), 9: (1, {'@': 175}), 10: (1, {'@': 175}), 26: (1, {'@': 175}), 11: (1, {'@': 175}), 13: (1, {'@': 175}), 76: (1, {'@': 175}), 27: (1, {'@': 175}), 16: (1, {'@': 175}), 17: (1, {'@': 175}), 4: (1, {'@': 175}), 78: (1, {'@': 175}), 0: (1, {'@': 175}), 79: (1, {'@': 175}), 2: (1, {'@': 175}), 3: (1, {'@': 175}), 20: (1, {'@': 175}), 80: (1, {'@': 175}), 22: (1, {'@': 175}), 56: (1, {'@': 175}), 46: (1, {'@': 175}), 48: (1, {'@': 175}), 12: (1, {'@': 175}), 51: (1, {'@': 175}), 14: (1, {'@': 175}), 15: (1, {'@': 175})}, 200: {2: (0, 227), 3: (0, 126), 16: (0, 0), 40: (0, 121), 0: (0, 91), 12: (0, 188), 9: (0, 137), 4: (0, 56), 17: (0, 50), 11: (0, 140), 10: (0, 29), 33: (0, 220), 31: (0, 106), 13: (0, 167), 52: (0, 182), 14: (0, 197), 6: (0, 203), 5: (0, 51), 1: (0, 245), 15: (0, 178), 7: (1, {'@': 176}), 8: (1, {'@': 176}), 18: (1, {'@': 176}), 25: (1, {'@': 176}), 19: (1, {'@': 176}), 20: (1, {'@': 176}), 21: (1, {'@': 176}), 26: (1, {'@': 176}), 22: (1, {'@': 176}), 23: (1, {'@': 176}), 27: (1, {'@': 176}), 24: (1, {'@': 176})}, 201: {83: (0, 244), 81: (0, 238), 60: (0, 80), 8: (0, 228)}, 202: {60: (0, 80), 8: (0, 228), 58: (1, {'@': 177}), 62: (1, {'@': 177}), 64: (1, {'@': 177}), 63: (1, {'@': 177}), 65: (1, {'@': 177}), 66: (1, {'@': 177}), 1: (1, {'@': 177}), 19: (1, {'@': 177}), 67: (1, {'@': 177}), 21: (1, {'@': 177}), 5: (1, {'@': 177}), 6: (1, {'@': 177}), 23: (1, {'@': 177}), 57: (1, {'@': 177}), 68: (1, {'@': 177}), 69: (1, {'@': 177}), 24: (1, {'@': 177}), 25: (1, {'@': 177}), 45: (1, {'@': 177}), 70: (1, {'@': 177}), 71: (1, {'@': 177}), 9: (1, {'@': 177}), 10: (1, {'@': 177}), 72: (1, {'@': 177}), 11: (1, {'@': 177}), 26: (1, {'@': 177}), 73: (1, {'@': 177}), 74: (1, {'@': 177}), 13: (1, {'@': 177}), 75: (1, {'@': 177}), 76: (1, {'@': 177}), 27: (1, {'@': 177}), 77: (1, {'@': 177}), 16: (1, {'@': 177}), 4: (1, {'@': 177}), 17: (1, {'@': 177}), 78: (1, {'@': 177}), 0: (1, {'@': 177}), 79: (1, {'@': 177}), 2: (1, {'@': 177}), 3: (1, {'@': 177}), 20: (1, {'@': 177}), 80: (1, {'@': 177}), 22: (1, {'@': 177}), 81: (1, {'@': 177}), 56: (1, {'@': 177}), 82: (1, {'@': 177}), 46: (1, {'@': 177}), 48: (1, {'@': 177}), 12: (1, {'@': 177}), 83: (1, {'@': 177}), 51: (1, {'@': 177}), 15: (1, {'@': 177}), 14: (1, {'@': 177})}, 203: {14: (0, 54), 0: (1, {'@': 178}), 1: (1, {'@': 178}), 2: (1, {'@': 178}), 3: (1, {'@': 178}), 4: (1, {'@': 178}), 5: (1, {'@': 178}), 6: (1, {'@': 178}), 7: (1, {'@': 178}), 8: (1, {'@': 178}), 9: (1, {'@': 178}), 10: (1, {'@': 178}), 11: (1, {'@': 178}), 12: (1, {'@': 178}), 13: (1, {'@': 178}), 15: (1, {'@': 178}), 16: (1, {'@': 178}), 17: (1, {'@': 178}), 18: (1, {'@': 178}), 19: (1, {'@': 178}), 20: (1, {'@': 178}), 21: (1, {'@': 178}), 22: (1, {'@': 178}), 23: (1, {'@': 178}), 24: (1, {'@': 178}), 25: (1, {'@': 178}), 26: (1, {'@': 178}), 27: (1, {'@': 178})}, 204: {83: (0, 224), 81: (0, 102), 8: (0, 228), 60: (0, 80)}, 205: {8: (0, 228), 60: (0, 80), 65: (1, {'@': 179}), 66: (1, {'@': 179}), 1: (1, {'@': 179}), 19: (1, {'@': 179}), 21: (1, {'@': 179}), 5: (1, {'@': 179}), 6: (1, {'@': 179}), 23: (1, {'@': 179}), 57: (1, {'@': 179}), 68: (1, {'@': 179}), 69: (1, {'@': 179}), 24: (1, {'@': 179}), 25: (1, {'@': 179}), 45: (1, {'@': 179}), 9: (1, {'@': 179}), 10: (1, {'@': 179}), 26: (1, {'@': 179}), 11: (1, {'@': 179}), 13: (1, {'@': 179}), 76: (1, {'@': 179}), 27: (1, {'@': 179}), 16: (1, {'@': 179}), 17: (1, {'@': 179}), 4: (1, {'@': 179}), 78: (1, {'@': 179}), 0: (1, {'@': 179}), 79: (1, {'@': 179}), 2: (1, {'@': 179}), 3: (1, {'@': 179}), 20: (1, {'@': 179}), 80: (1, {'@': 179}), 22: (1, {'@': 179}), 56: (1, {'@': 179}), 46: (1, {'@': 179}), 48: (1, {'@': 179}), 12: (1, {'@': 179}), 51: (1, {'@': 179}), 14: (1, {'@': 179}), 15: (1, {'@': 179})}, 206: {0: (1, {'@': 180}), 1: (1, {'@': 180}), 84: (1, {'@': 180}), 58: (1, {'@': 180}), 2: (1, {'@': 180}), 3: (1, {'@': 180}), 20: (1, {'@': 180}), 21: (1, {'@': 180}), 5: (1, {'@': 180}), 59: (1, {'@': 180}), 60: (1, {'@': 180}), 6: (1, {'@': 180}), 61: (1, {'@': 180}), 17: (1, {'@': 180}), 85: (1, {'@': 180}), 24: (1, {'@': 180}), 86: (1, {'@': 180}), 8: (1, {'@': 180}), 9: (1, {'@': 180}), 10: (1, {'@': 180}), 11: (1, {'@': 180}), 12: (1, {'@': 180}), 13: (1, {'@': 180}), 14: (1, {'@': 180}), 15: (1, {'@': 180}), 87: (1, {'@': 180}), 16: (1, {'@': 180}), 4: (1, {'@': 180}), 62: (1, {'@': 180}), 65: (1, {'@': 180}), 66: (1, {'@': 180}), 67: (1, {'@': 180}), 23: (1, {'@': 180}), 68: (1, {'@': 180}), 63: (1, {'@': 180}), 25: (1, {'@': 180}), 45: (1, {'@': 180}), 70: (1, {'@': 180}), 72: (1, {'@': 180}), 73: (1, {'@': 180}), 76: (1, {'@': 180}), 82: (1, {'@': 180}), 19: (1, {'@': 180}), 57: (1, {'@': 180}), 69: (1, {'@': 180}), 71: (1, {'@': 180}), 26: (1, {'@': 180}), 74: (1, {'@': 180}), 64: (1, {'@': 180}), 75: (1, {'@': 180}), 27: (1, {'@': 180}), 77: (1, {'@': 180}), 78: (1, {'@': 180}), 79: (1, {'@': 180}), 80: (1, {'@': 180}), 22: (1, {'@': 180}), 81: (1, {'@': 180}), 56: (1, {'@': 180}), 46: (1, {'@': 180}), 48: (1, {'@': 180}), 83: (1, {'@': 180}), 51: (1, {'@': 180})}, 207: {18: (0, 193)}, 208: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 88: (0, 185), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 61), 70: (0, 98), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 209: {26: (0, 19), 29: (0, 223)}, 210: {58: (1, {'@': 77}), 60: (1, {'@': 77}), 8: (1, {'@': 77}), 62: (1, {'@': 77}), 64: (1, {'@': 77}), 63: (1, {'@': 77}), 65: (1, {'@': 77}), 66: (1, {'@': 77}), 1: (1, {'@': 77}), 19: (1, {'@': 77}), 67: (1, {'@': 77}), 21: (1, {'@': 77}), 5: (1, {'@': 77}), 6: (1, {'@': 77}), 23: (1, {'@': 77}), 57: (1, {'@': 77}), 68: (1, {'@': 77}), 69: (1, {'@': 77}), 24: (1, {'@': 77}), 25: (1, {'@': 77}), 45: (1, {'@': 77}), 70: (1, {'@': 77}), 71: (1, {'@': 77}), 9: (1, {'@': 77}), 10: (1, {'@': 77}), 72: (1, {'@': 77}), 11: (1, {'@': 77}), 26: (1, {'@': 77}), 73: (1, {'@': 77}), 74: (1, {'@': 77}), 13: (1, {'@': 77}), 75: (1, {'@': 77}), 76: (1, {'@': 77}), 27: (1, {'@': 77}), 77: (1, {'@': 77}), 16: (1, {'@': 77}), 4: (1, {'@': 77}), 17: (1, {'@': 77}), 78: (1, {'@': 77}), 0: (1, {'@': 77}), 79: (1, {'@': 77}), 2: (1, {'@': 77}), 3: (1, {'@': 77}), 20: (1, {'@': 77}), 80: (1, {'@': 77}), 22: (1, {'@': 77}), 81: (1, {'@': 77}), 56: (1, {'@': 77}), 82: (1, {'@': 77}), 46: (1, {'@': 77}), 48: (1, {'@': 77}), 12: (1, {'@': 77}), 83: (1, {'@': 77}), 51: (1, {'@': 77}), 15: (1, {'@': 77}), 14: (1, {'@': 77})}, 211: {2: (0, 222), 0: (1, {'@': 181}), 1: (1, {'@': 181}), 84: (1, {'@': 181}), 58: (1, {'@': 181}), 3: (1, {'@': 181}), 20: (1, {'@': 181}), 5: (1, {'@': 181}), 59: (1, {'@': 181}), 60: (1, {'@': 181}), 6: (1, {'@': 181}), 61: (1, {'@': 181}), 17: (1, {'@': 181}), 8: (1, {'@': 181}), 9: (1, {'@': 181}), 10: (1, {'@': 181}), 11: (1, {'@': 181}), 12: (1, {'@': 181}), 13: (1, {'@': 181}), 14: (1, {'@': 181}), 15: (1, {'@': 181}), 87: (1, {'@': 181}), 16: (1, {'@': 181}), 4: (1, {'@': 181}), 62: (1, {'@': 181}), 65: (1, {'@': 181}), 66: (1, {'@': 181}), 19: (1, {'@': 181}), 67: (1, {'@': 181}), 21: (1, {'@': 181}), 23: (1, {'@': 181}), 57: (1, {'@': 181}), 68: (1, {'@': 181}), 69: (1, {'@': 181}), 24: (1, {'@': 181}), 63: (1, {'@': 181}), 25: (1, {'@': 181}), 45: (1, {'@': 181}), 70: (1, {'@': 181}), 71: (1, {'@': 181}), 72: (1, {'@': 181}), 26: (1, {'@': 181}), 73: (1, {'@': 181}), 74: (1, {'@': 181}), 64: (1, {'@': 181}), 75: (1, {'@': 181}), 76: (1, {'@': 181}), 27: (1, {'@': 181}), 77: (1, {'@': 181}), 78: (1, {'@': 181}), 79: (1, {'@': 181}), 80: (1, {'@': 181}), 22: (1, {'@': 181}), 81: (1, {'@': 181}), 56: (1, {'@': 181}), 82: (1, {'@': 181}), 46: (1, {'@': 181}), 48: (1, {'@': 181}), 83: (1, {'@': 181}), 51: (1, {'@': 181})}, 212: {60: (0, 80), 81: (0, 196), 8: (0, 228)}, 213: {87: (0, 35), 106: (0, 117), 0: (1, {'@': 182}), 1: (1, {'@': 182}), 84: (1, {'@': 182}), 58: (1, {'@': 182}), 2: (1, {'@': 182}), 3: (1, {'@': 182}), 20: (1, {'@': 182}), 4: (1, {'@': 182}), 5: (1, {'@': 182}), 59: (1, {'@': 182}), 60: (1, {'@': 182}), 6: (1, {'@': 182}), 61: (1, {'@': 182}), 8: (1, {'@': 182}), 9: (1, {'@': 182}), 10: (1, {'@': 182}), 11: (1, {'@': 182}), 12: (1, {'@': 182}), 13: (1, {'@': 182}), 14: (1, {'@': 182}), 15: (1, {'@': 182}), 16: (1, {'@': 182}), 17: (1, {'@': 182}), 62: (1, {'@': 182}), 65: (1, {'@': 182}), 66: (1, {'@': 182}), 19: (1, {'@': 182}), 67: (1, {'@': 182}), 21: (1, {'@': 182}), 23: (1, {'@': 182}), 57: (1, {'@': 182}), 68: (1, {'@': 182}), 69: (1, {'@': 182}), 24: (1, {'@': 182}), 63: (1, {'@': 182}), 25: (1, {'@': 182}), 45: (1, {'@': 182}), 70: (1, {'@': 182}), 71: (1, {'@': 182}), 72: (1, {'@': 182}), 26: (1, {'@': 182}), 73: (1, {'@': 182}), 74: (1, {'@': 182}), 64: (1, {'@': 182}), 75: (1, {'@': 182}), 76: (1, {'@': 182}), 27: (1, {'@': 182}), 77: (1, {'@': 182}), 78: (1, {'@': 182}), 79: (1, {'@': 182}), 80: (1, {'@': 182}), 22: (1, {'@': 182}), 81: (1, {'@': 182}), 56: (1, {'@': 182}), 82: (1, {'@': 182}), 46: (1, {'@': 182}), 48: (1, {'@': 182}), 83: (1, {'@': 182}), 51: (1, {'@': 182})}, 214: {60: (0, 80), 8: (0, 228), 58: (1, {'@': 183}), 62: (1, {'@': 183}), 64: (1, {'@': 183}), 63: (1, {'@': 183}), 65: (1, {'@': 183}), 66: (1, {'@': 183}), 1: (1, {'@': 183}), 19: (1, {'@': 183}), 67: (1, {'@': 183}), 21: (1, {'@': 183}), 5: (1, {'@': 183}), 6: (1, {'@': 183}), 23: (1, {'@': 183}), 57: (1, {'@': 183}), 68: (1, {'@': 183}), 69: (1, {'@': 183}), 24: (1, {'@': 183}), 25: (1, {'@': 183}), 45: (1, {'@': 183}), 70: (1, {'@': 183}), 71: (1, {'@': 183}), 9: (1, {'@': 183}), 10: (1, {'@': 183}), 72: (1, {'@': 183}), 11: (1, {'@': 183}), 26: (1, {'@': 183}), 73: (1, {'@': 183}), 74: (1, {'@': 183}), 13: (1, {'@': 183}), 75: (1, {'@': 183}), 76: (1, {'@': 183}), 27: (1, {'@': 183}), 77: (1, {'@': 183}), 16: (1, {'@': 183}), 4: (1, {'@': 183}), 17: (1, {'@': 183}), 78: (1, {'@': 183}), 0: (1, {'@': 183}), 79: (1, {'@': 183}), 2: (1, {'@': 183}), 3: (1, {'@': 183}), 20: (1, {'@': 183}), 80: (1, {'@': 183}), 22: (1, {'@': 183}), 81: (1, {'@': 183}), 56: (1, {'@': 183}), 82: (1, {'@': 183}), 46: (1, {'@': 183}), 48: (1, {'@': 183}), 12: (1, {'@': 183}), 83: (1, {'@': 183}), 51: (1, {'@': 183}), 15: (1, {'@': 183}), 14: (1, {'@': 183})}, 215: {0: (1, {'@': 184}), 1: (1, {'@': 184}), 84: (1, {'@': 184}), 58: (1, {'@': 184}), 2: (1, {'@': 184}), 3: (1, {'@': 184}), 20: (1, {'@': 184}), 4: (1, {'@': 184}), 5: (1, {'@': 184}), 59: (1, {'@': 184}), 60: (1, {'@': 184}), 6: (1, {'@': 184}), 61: (1, {'@': 184}), 85: (1, {'@': 184}), 86: (1, {'@': 184}), 8: (1, {'@': 184}), 9: (1, {'@': 184}), 10: (1, {'@': 184}), 11: (1, {'@': 184}), 12: (1, {'@': 184}), 13: (1, {'@': 184}), 14: (1, {'@': 184}), 15: (1, {'@': 184}), 87: (1, {'@': 184}), 16: (1, {'@': 184}), 17: (1, {'@': 184}), 62: (1, {'@': 184}), 65: (1, {'@': 184}), 66: (1, {'@': 184}), 19: (1, {'@': 184}), 67: (1, {'@': 184}), 21: (1, {'@': 184}), 23: (1, {'@': 184}), 57: (1, {'@': 184}), 68: (1, {'@': 184}), 69: (1, {'@': 184}), 24: (1, {'@': 184}), 63: (1, {'@': 184}), 25: (1, {'@': 184}), 45: (1, {'@': 184}), 70: (1, {'@': 184}), 71: (1, {'@': 184}), 72: (1, {'@': 184}), 26: (1, {'@': 184}), 73: (1, {'@': 184}), 74: (1, {'@': 184}), 64: (1, {'@': 184}), 75: (1, {'@': 184}), 76: (1, {'@': 184}), 27: (1, {'@': 184}), 77: (1, {'@': 184}), 78: (1, {'@': 184}), 79: (1, {'@': 184}), 80: (1, {'@': 184}), 22: (1, {'@': 184}), 81: (1, {'@': 184}), 56: (1, {'@': 184}), 82: (1, {'@': 184}), 46: (1, {'@': 184}), 48: (1, {'@': 184}), 83: (1, {'@': 184}), 51: (1, {'@': 184})}, 216: {0: (1, {'@': 185}), 1: (1, {'@': 185}), 84: (1, {'@': 185}), 58: (1, {'@': 185}), 2: (1, {'@': 185}), 3: (1, {'@': 185}), 20: (1, {'@': 185}), 21: (1, {'@': 185}), 5: (1, {'@': 185}), 59: (1, {'@': 185}), 60: (1, {'@': 185}), 6: (1, {'@': 185}), 61: (1, {'@': 185}), 17: (1, {'@': 185}), 85: (1, {'@': 185}), 24: (1, {'@': 185}), 86: (1, {'@': 185}), 8: (1, {'@': 185}), 9: (1, {'@': 185}), 10: (1, {'@': 185}), 11: (1, {'@': 185}), 12: (1, {'@': 185}), 13: (1, {'@': 185}), 14: (1, {'@': 185}), 15: (1, {'@': 185}), 87: (1, {'@': 185}), 16: (1, {'@': 185}), 4: (1, {'@': 185}), 62: (1, {'@': 185}), 65: (1, {'@': 185}), 66: (1, {'@': 185}), 19: (1, {'@': 185}), 67: (1, {'@': 185}), 23: (1, {'@': 185}), 57: (1, {'@': 185}), 68: (1, {'@': 185}), 69: (1, {'@': 185}), 63: (1, {'@': 185}), 25: (1, {'@': 185}), 45: (1, {'@': 185}), 70: (1, {'@': 185}), 71: (1, {'@': 185}), 72: (1, {'@': 185}), 26: (1, {'@': 185}), 73: (1, {'@': 185}), 74: (1, {'@': 185}), 64: (1, {'@': 185}), 75: (1, {'@': 185}), 76: (1, {'@': 185}), 27: (1, {'@': 185}), 77: (1, {'@': 185}), 78: (1, {'@': 185}), 79: (1, {'@': 185}), 80: (1, {'@': 185}), 22: (1, {'@': 185}), 81: (1, {'@': 185}), 56: (1, {'@': 185}), 82: (1, {'@': 185}), 46: (1, {'@': 185}), 48: (1, {'@': 185}), 83: (1, {'@': 185}), 51: (1, {'@': 185})}, 217: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 111), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 218: {60: (0, 80), 8: (0, 228)}, 219: {82: (0, 225), 60: (0, 80), 8: (0, 228)}, 220: {0: (1, {'@': 186}), 1: (1, {'@': 186}), 2: (1, {'@': 186}), 3: (1, {'@': 186}), 4: (1, {'@': 186}), 5: (1, {'@': 186}), 6: (1, {'@': 186}), 7: (1, {'@': 186}), 8: (1, {'@': 186}), 9: (1, {'@': 186}), 10: (1, {'@': 186}), 11: (1, {'@': 186}), 12: (1, {'@': 186}), 13: (1, {'@': 186}), 14: (1, {'@': 186}), 15: (1, {'@': 186}), 16: (1, {'@': 186}), 17: (1, {'@': 186}), 18: (1, {'@': 186}), 19: (1, {'@': 186}), 20: (1, {'@': 186}), 21: (1, {'@': 186}), 22: (1, {'@': 186}), 23: (1, {'@': 186}), 24: (1, {'@': 186}), 25: (1, {'@': 186}), 26: (1, {'@': 186}), 27: (1, {'@': 186})}, 221: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 45), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 222: {30: (0, 70), 24: (0, 8), 19: (0, 57), 25: (0, 89), 42: (0, 135), 22: (0, 4), 21: (0, 79), 43: (0, 127), 38: (0, 249), 26: (0, 19), 27: (0, 216), 29: (0, 66), 35: (0, 155), 23: (0, 160), 39: (0, 236)}, 223: {58: (1, {'@': 187}), 64: (1, {'@': 187})}, 224: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 88: (0, 190), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 61), 70: (0, 98), 107: (0, 5), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 225: {0: (1, {'@': 188}), 1: (1, {'@': 188}), 84: (1, {'@': 188}), 58: (1, {'@': 188}), 2: (1, {'@': 188}), 3: (1, {'@': 188}), 20: (1, {'@': 188}), 21: (1, {'@': 188}), 5: (1, {'@': 188}), 59: (1, {'@': 188}), 60: (1, {'@': 188}), 6: (1, {'@': 188}), 61: (1, {'@': 188}), 17: (1, {'@': 188}), 85: (1, {'@': 188}), 24: (1, {'@': 188}), 86: (1, {'@': 188}), 8: (1, {'@': 188}), 9: (1, {'@': 188}), 10: (1, {'@': 188}), 11: (1, {'@': 188}), 12: (1, {'@': 188}), 13: (1, {'@': 188}), 14: (1, {'@': 188}), 15: (1, {'@': 188}), 87: (1, {'@': 188}), 16: (1, {'@': 188}), 4: (1, {'@': 188}), 62: (1, {'@': 188}), 65: (1, {'@': 188}), 66: (1, {'@': 188}), 67: (1, {'@': 188}), 23: (1, {'@': 188}), 68: (1, {'@': 188}), 63: (1, {'@': 188}), 25: (1, {'@': 188}), 45: (1, {'@': 188}), 70: (1, {'@': 188}), 72: (1, {'@': 188}), 73: (1, {'@': 188}), 76: (1, {'@': 188}), 82: (1, {'@': 188}), 19: (1, {'@': 188}), 57: (1, {'@': 188}), 69: (1, {'@': 188}), 71: (1, {'@': 188}), 26: (1, {'@': 188}), 74: (1, {'@': 188}), 64: (1, {'@': 188}), 75: (1, {'@': 188}), 27: (1, {'@': 188}), 77: (1, {'@': 188}), 78: (1, {'@': 188}), 79: (1, {'@': 188}), 80: (1, {'@': 188}), 22: (1, {'@': 188}), 81: (1, {'@': 188}), 56: (1, {'@': 188}), 46: (1, {'@': 188}), 48: (1, {'@': 188}), 83: (1, {'@': 188}), 51: (1, {'@': 188})}, 226: {2: (0, 227), 3: (0, 126), 16: (0, 0), 34: (0, 200), 40: (0, 121), 0: (0, 91), 12: (0, 188), 9: (0, 137), 4: (0, 56), 17: (0, 50), 11: (0, 140), 47: (0, 114), 10: (0, 29), 31: (0, 162), 33: (0, 220), 13: (0, 167), 52: (0, 182), 14: (0, 197), 6: (0, 203), 1: (0, 245), 5: (0, 51), 15: (0, 178), 65: (1, {'@': 189}), 66: (1, {'@': 189}), 67: (1, {'@': 189}), 23: (1, {'@': 189}), 68: (1, {'@': 189}), 62: (1, {'@': 189}), 8: (1, {'@': 189}), 25: (1, {'@': 189}), 45: (1, {'@': 189}), 70: (1, {'@': 189}), 63: (1, {'@': 189}), 72: (1, {'@': 189}), 73: (1, {'@': 189}), 76: (1, {'@': 189}), 60: (1, {'@': 189}), 82: (1, {'@': 189}), 19: (1, {'@': 189}), 21: (1, {'@': 189}), 57: (1, {'@': 189}), 69: (1, {'@': 189}), 24: (1, {'@': 189}), 71: (1, {'@': 189}), 26: (1, {'@': 189}), 74: (1, {'@': 189}), 64: (1, {'@': 189}), 75: (1, {'@': 189}), 27: (1, {'@': 189}), 77: (1, {'@': 189}), 78: (1, {'@': 189}), 58: (1, {'@': 189}), 79: (1, {'@': 189}), 20: (1, {'@': 189}), 80: (1, {'@': 189}), 59: (1, {'@': 189}), 22: (1, {'@': 189}), 81: (1, {'@': 189}), 56: (1, {'@': 189}), 46: (1, {'@': 189}), 48: (1, {'@': 189}), 83: (1, {'@': 189}), 51: (1, {'@': 189})}, 227: {0: (1, {'@': 190}), 1: (1, {'@': 190}), 2: (1, {'@': 190}), 3: (1, {'@': 190}), 4: (1, {'@': 190}), 5: (1, {'@': 190}), 6: (1, {'@': 190}), 7: (1, {'@': 190}), 8: (1, {'@': 190}), 9: (1, {'@': 190}), 10: (1, {'@': 190}), 11: (1, {'@': 190}), 12: (1, {'@': 190}), 13: (1, {'@': 190}), 14: (1, {'@': 190}), 15: (1, {'@': 190}), 16: (1, {'@': 190}), 17: (1, {'@': 190}), 18: (1, {'@': 190}), 19: (1, {'@': 190}), 20: (1, {'@': 190}), 21: (1, {'@': 190}), 22: (1, {'@': 190}), 23: (1, {'@': 190}), 24: (1, {'@': 190}), 25: (1, {'@': 190}), 26: (1, {'@': 190}), 27: (1, {'@': 190})}, 228: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 250), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 229: {25: (1, {'@': 191}), 19: (1, {'@': 191}), 21: (1, {'@': 191}), 26: (1, {'@': 191}), 22: (1, {'@': 191}), 23: (1, {'@': 191}), 27: (1, {'@': 191}), 24: (1, {'@': 191})}, 230: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 32: (0, 93), 11: (0, 140), 9: (0, 181), 31: (0, 162), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 231: {60: (0, 80), 8: (0, 228), 58: (1, {'@': 192}), 62: (1, {'@': 192}), 64: (1, {'@': 192}), 63: (1, {'@': 192}), 65: (1, {'@': 192}), 66: (1, {'@': 192}), 1: (1, {'@': 192}), 19: (1, {'@': 192}), 67: (1, {'@': 192}), 21: (1, {'@': 192}), 5: (1, {'@': 192}), 6: (1, {'@': 192}), 23: (1, {'@': 192}), 57: (1, {'@': 192}), 68: (1, {'@': 192}), 69: (1, {'@': 192}), 24: (1, {'@': 192}), 25: (1, {'@': 192}), 45: (1, {'@': 192}), 70: (1, {'@': 192}), 71: (1, {'@': 192}), 9: (1, {'@': 192}), 10: (1, {'@': 192}), 72: (1, {'@': 192}), 11: (1, {'@': 192}), 26: (1, {'@': 192}), 73: (1, {'@': 192}), 74: (1, {'@': 192}), 13: (1, {'@': 192}), 75: (1, {'@': 192}), 76: (1, {'@': 192}), 27: (1, {'@': 192}), 77: (1, {'@': 192}), 16: (1, {'@': 192}), 4: (1, {'@': 192}), 17: (1, {'@': 192}), 78: (1, {'@': 192}), 0: (1, {'@': 192}), 79: (1, {'@': 192}), 2: (1, {'@': 192}), 3: (1, {'@': 192}), 20: (1, {'@': 192}), 80: (1, {'@': 192}), 22: (1, {'@': 192}), 81: (1, {'@': 192}), 56: (1, {'@': 192}), 82: (1, {'@': 192}), 46: (1, {'@': 192}), 48: (1, {'@': 192}), 12: (1, {'@': 192}), 83: (1, {'@': 192}), 51: (1, {'@': 192}), 15: (1, {'@': 192}), 14: (1, {'@': 192})}, 232: {60: (0, 80), 8: (0, 228), 58: (1, {'@': 193}), 64: (1, {'@': 193}), 82: (1, {'@': 193}), 63: (1, {'@': 193})}, 233: {58: (1, {'@': 194}), 60: (1, {'@': 194}), 8: (1, {'@': 194}), 62: (1, {'@': 194}), 64: (1, {'@': 194}), 63: (1, {'@': 194}), 65: (1, {'@': 194}), 66: (1, {'@': 194}), 1: (1, {'@': 194}), 19: (1, {'@': 194}), 67: (1, {'@': 194}), 21: (1, {'@': 194}), 5: (1, {'@': 194}), 6: (1, {'@': 194}), 23: (1, {'@': 194}), 57: (1, {'@': 194}), 68: (1, {'@': 194}), 69: (1, {'@': 194}), 24: (1, {'@': 194}), 25: (1, {'@': 194}), 45: (1, {'@': 194}), 70: (1, {'@': 194}), 71: (1, {'@': 194}), 9: (1, {'@': 194}), 10: (1, {'@': 194}), 72: (1, {'@': 194}), 11: (1, {'@': 194}), 26: (1, {'@': 194}), 73: (1, {'@': 194}), 74: (1, {'@': 194}), 13: (1, {'@': 194}), 75: (1, {'@': 194}), 76: (1, {'@': 194}), 27: (1, {'@': 194}), 77: (1, {'@': 194}), 16: (1, {'@': 194}), 4: (1, {'@': 194}), 17: (1, {'@': 194}), 78: (1, {'@': 194}), 0: (1, {'@': 194}), 79: (1, {'@': 194}), 2: (1, {'@': 194}), 3: (1, {'@': 194}), 20: (1, {'@': 194}), 80: (1, {'@': 194}), 22: (1, {'@': 194}), 81: (1, {'@': 194}), 56: (1, {'@': 194}), 82: (1, {'@': 194}), 46: (1, {'@': 194}), 48: (1, {'@': 194}), 12: (1, {'@': 194}), 83: (1, {'@': 194}), 51: (1, {'@': 194}), 15: (1, {'@': 194}), 14: (1, {'@': 194})}, 234: {71: (0, 147), 60: (0, 80), 8: (0, 228), 64: (1, {'@': 193}), 82: (1, {'@': 193})}, 235: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 108), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 236: {0: (1, {'@': 195}), 1: (1, {'@': 195}), 84: (1, {'@': 195}), 58: (1, {'@': 195}), 2: (1, {'@': 195}), 3: (1, {'@': 195}), 20: (1, {'@': 195}), 21: (1, {'@': 195}), 5: (1, {'@': 195}), 59: (1, {'@': 195}), 60: (1, {'@': 195}), 6: (1, {'@': 195}), 61: (1, {'@': 195}), 17: (1, {'@': 195}), 85: (1, {'@': 195}), 24: (1, {'@': 195}), 86: (1, {'@': 195}), 8: (1, {'@': 195}), 9: (1, {'@': 195}), 10: (1, {'@': 195}), 11: (1, {'@': 195}), 12: (1, {'@': 195}), 13: (1, {'@': 195}), 14: (1, {'@': 195}), 15: (1, {'@': 195}), 87: (1, {'@': 195}), 16: (1, {'@': 195}), 4: (1, {'@': 195}), 62: (1, {'@': 195}), 65: (1, {'@': 195}), 66: (1, {'@': 195}), 67: (1, {'@': 195}), 23: (1, {'@': 195}), 68: (1, {'@': 195}), 63: (1, {'@': 195}), 25: (1, {'@': 195}), 45: (1, {'@': 195}), 70: (1, {'@': 195}), 72: (1, {'@': 195}), 73: (1, {'@': 195}), 76: (1, {'@': 195}), 82: (1, {'@': 195}), 19: (1, {'@': 195}), 57: (1, {'@': 195}), 69: (1, {'@': 195}), 71: (1, {'@': 195}), 26: (1, {'@': 195}), 74: (1, {'@': 195}), 64: (1, {'@': 195}), 75: (1, {'@': 195}), 27: (1, {'@': 195}), 77: (1, {'@': 195}), 78: (1, {'@': 195}), 79: (1, {'@': 195}), 80: (1, {'@': 195}), 22: (1, {'@': 195}), 81: (1, {'@': 195}), 56: (1, {'@': 195}), 46: (1, {'@': 195}), 48: (1, {'@': 195}), 83: (1, {'@': 195}), 51: (1, {'@': 195})}, 237: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 115), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 238: {65: (1, {'@': 196}), 66: (1, {'@': 196}), 1: (1, {'@': 196}), 19: (1, {'@': 196}), 21: (1, {'@': 196}), 5: (1, {'@': 196}), 6: (1, {'@': 196}), 23: (1, {'@': 196}), 57: (1, {'@': 196}), 68: (1, {'@': 196}), 69: (1, {'@': 196}), 24: (1, {'@': 196}), 25: (1, {'@': 196}), 8: (1, {'@': 196}), 45: (1, {'@': 196}), 9: (1, {'@': 196}), 10: (1, {'@': 196}), 26: (1, {'@': 196}), 11: (1, {'@': 196}), 13: (1, {'@': 196}), 76: (1, {'@': 196}), 27: (1, {'@': 196}), 16: (1, {'@': 196}), 17: (1, {'@': 196}), 4: (1, {'@': 196}), 78: (1, {'@': 196}), 0: (1, {'@': 196}), 79: (1, {'@': 196}), 2: (1, {'@': 196}), 3: (1, {'@': 196}), 20: (1, {'@': 196}), 80: (1, {'@': 196}), 22: (1, {'@': 196}), 56: (1, {'@': 196}), 46: (1, {'@': 196}), 48: (1, {'@': 196}), 12: (1, {'@': 196}), 51: (1, {'@': 196}), 14: (1, {'@': 196}), 15: (1, {'@': 196})}, 239: {65: (1, {'@': 197}), 66: (1, {'@': 197}), 67: (1, {'@': 197}), 5: (1, {'@': 197}), 23: (1, {'@': 197}), 68: (1, {'@': 197}), 62: (1, {'@': 197}), 8: (1, {'@': 197}), 25: (1, {'@': 197}), 45: (1, {'@': 197}), 70: (1, {'@': 197}), 63: (1, {'@': 197}), 72: (1, {'@': 197}), 11: (1, {'@': 197}), 73: (1, {'@': 197}), 76: (1, {'@': 197}), 16: (1, {'@': 197}), 4: (1, {'@': 197}), 0: (1, {'@': 197}), 60: (1, {'@': 197}), 82: (1, {'@': 197}), 15: (1, {'@': 197}), 1: (1, {'@': 197}), 19: (1, {'@': 197}), 21: (1, {'@': 197}), 6: (1, {'@': 197}), 61: (1, {'@': 197}), 57: (1, {'@': 197}), 69: (1, {'@': 197}), 24: (1, {'@': 197}), 9: (1, {'@': 197}), 71: (1, {'@': 197}), 10: (1, {'@': 197}), 26: (1, {'@': 197}), 13: (1, {'@': 197}), 74: (1, {'@': 197}), 64: (1, {'@': 197}), 75: (1, {'@': 197}), 27: (1, {'@': 197}), 77: (1, {'@': 197}), 17: (1, {'@': 197}), 78: (1, {'@': 197}), 58: (1, {'@': 197}), 84: (1, {'@': 197}), 79: (1, {'@': 197}), 2: (1, {'@': 197}), 3: (1, {'@': 197}), 20: (1, {'@': 197}), 80: (1, {'@': 197}), 59: (1, {'@': 197}), 22: (1, {'@': 197}), 81: (1, {'@': 197}), 56: (1, {'@': 197}), 46: (1, {'@': 197}), 48: (1, {'@': 197}), 12: (1, {'@': 197}), 83: (1, {'@': 197}), 51: (1, {'@': 197}), 14: (1, {'@': 197})}, 240: {30: (0, 70), 24: (0, 8), 19: (0, 57), 25: (0, 89), 22: (0, 4), 21: (0, 79), 43: (0, 127), 38: (0, 249), 26: (0, 19), 27: (0, 216), 29: (0, 66), 35: (0, 155), 42: (0, 48), 23: (0, 160), 39: (0, 236)}, 241: {0: (1, {'@': 198}), 1: (1, {'@': 198}), 84: (1, {'@': 198}), 58: (1, {'@': 198}), 2: (1, {'@': 198}), 3: (1, {'@': 198}), 20: (1, {'@': 198}), 21: (1, {'@': 198}), 5: (1, {'@': 198}), 59: (1, {'@': 198}), 60: (1, {'@': 198}), 6: (1, {'@': 198}), 61: (1, {'@': 198}), 17: (1, {'@': 198}), 85: (1, {'@': 198}), 24: (1, {'@': 198}), 86: (1, {'@': 198}), 8: (1, {'@': 198}), 9: (1, {'@': 198}), 10: (1, {'@': 198}), 11: (1, {'@': 198}), 12: (1, {'@': 198}), 13: (1, {'@': 198}), 14: (1, {'@': 198}), 15: (1, {'@': 198}), 87: (1, {'@': 198}), 16: (1, {'@': 198}), 4: (1, {'@': 198}), 62: (1, {'@': 198}), 65: (1, {'@': 198}), 66: (1, {'@': 198}), 67: (1, {'@': 198}), 23: (1, {'@': 198}), 68: (1, {'@': 198}), 63: (1, {'@': 198}), 25: (1, {'@': 198}), 45: (1, {'@': 198}), 70: (1, {'@': 198}), 72: (1, {'@': 198}), 73: (1, {'@': 198}), 76: (1, {'@': 198}), 82: (1, {'@': 198}), 19: (1, {'@': 198}), 57: (1, {'@': 198}), 69: (1, {'@': 198}), 71: (1, {'@': 198}), 26: (1, {'@': 198}), 74: (1, {'@': 198}), 64: (1, {'@': 198}), 75: (1, {'@': 198}), 27: (1, {'@': 198}), 77: (1, {'@': 198}), 78: (1, {'@': 198}), 79: (1, {'@': 198}), 80: (1, {'@': 198}), 22: (1, {'@': 198}), 81: (1, {'@': 198}), 56: (1, {'@': 198}), 46: (1, {'@': 198}), 48: (1, {'@': 198}), 83: (1, {'@': 198}), 51: (1, {'@': 198})}, 242: {65: (1, {'@': 199}), 66: (1, {'@': 199}), 67: (1, {'@': 199}), 5: (1, {'@': 199}), 23: (1, {'@': 199}), 68: (1, {'@': 199}), 62: (1, {'@': 199}), 8: (1, {'@': 199}), 25: (1, {'@': 199}), 45: (1, {'@': 199}), 70: (1, {'@': 199}), 63: (1, {'@': 199}), 72: (1, {'@': 199}), 11: (1, {'@': 199}), 73: (1, {'@': 199}), 76: (1, {'@': 199}), 87: (1, {'@': 199}), 16: (1, {'@': 199}), 4: (1, {'@': 199}), 0: (1, {'@': 199}), 60: (1, {'@': 199}), 82: (1, {'@': 199}), 15: (1, {'@': 199}), 1: (1, {'@': 199}), 19: (1, {'@': 199}), 21: (1, {'@': 199}), 6: (1, {'@': 199}), 61: (1, {'@': 199}), 57: (1, {'@': 199}), 85: (1, {'@': 199}), 69: (1, {'@': 199}), 24: (1, {'@': 199}), 9: (1, {'@': 199}), 71: (1, {'@': 199}), 10: (1, {'@': 199}), 26: (1, {'@': 199}), 13: (1, {'@': 199}), 74: (1, {'@': 199}), 64: (1, {'@': 199}), 75: (1, {'@': 199}), 27: (1, {'@': 199}), 77: (1, {'@': 199}), 17: (1, {'@': 199}), 78: (1, {'@': 199}), 58: (1, {'@': 199}), 84: (1, {'@': 199}), 79: (1, {'@': 199}), 2: (1, {'@': 199}), 3: (1, {'@': 199}), 20: (1, {'@': 199}), 80: (1, {'@': 199}), 22: (1, {'@': 199}), 59: (1, {'@': 199}), 81: (1, {'@': 199}), 56: (1, {'@': 199}), 46: (1, {'@': 199}), 48: (1, {'@': 199}), 12: (1, {'@': 199}), 83: (1, {'@': 199}), 51: (1, {'@': 199}), 14: (1, {'@': 199})}, 243: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 201), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 244: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 88: (0, 190), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 107: (0, 116), 31: (0, 162), 32: (0, 61), 70: (0, 98), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 245: {0: (1, {'@': 200}), 1: (1, {'@': 200}), 2: (1, {'@': 200}), 3: (1, {'@': 200}), 4: (1, {'@': 200}), 5: (1, {'@': 200}), 6: (1, {'@': 200}), 7: (1, {'@': 200}), 8: (1, {'@': 200}), 9: (1, {'@': 200}), 10: (1, {'@': 200}), 11: (1, {'@': 200}), 12: (1, {'@': 200}), 13: (1, {'@': 200}), 14: (1, {'@': 200}), 15: (1, {'@': 200}), 16: (1, {'@': 200}), 17: (1, {'@': 200}), 18: (1, {'@': 200}), 19: (1, {'@': 200}), 20: (1, {'@': 200}), 21: (1, {'@': 200}), 22: (1, {'@': 200}), 23: (1, {'@': 200}), 24: (1, {'@': 200}), 25: (1, {'@': 200}), 26: (1, {'@': 200}), 27: (1, {'@': 200})}, 246: {0: (1, {'@': 201}), 1: (1, {'@': 201}), 84: (1, {'@': 201}), 58: (1, {'@': 201}), 2: (1, {'@': 201}), 3: (1, {'@': 201}), 20: (1, {'@': 201}), 21: (1, {'@': 201}), 5: (1, {'@': 201}), 59: (1, {'@': 201}), 60: (1, {'@': 201}), 6: (1, {'@': 201}), 61: (1, {'@': 201}), 17: (1, {'@': 201}), 85: (1, {'@': 201}), 24: (1, {'@': 201}), 86: (1, {'@': 201}), 8: (1, {'@': 201}), 9: (1, {'@': 201}), 10: (1, {'@': 201}), 11: (1, {'@': 201}), 12: (1, {'@': 201}), 13: (1, {'@': 201}), 14: (1, {'@': 201}), 15: (1, {'@': 201}), 87: (1, {'@': 201}), 16: (1, {'@': 201}), 4: (1, {'@': 201}), 62: (1, {'@': 201}), 65: (1, {'@': 201}), 66: (1, {'@': 201}), 67: (1, {'@': 201}), 23: (1, {'@': 201}), 68: (1, {'@': 201}), 63: (1, {'@': 201}), 25: (1, {'@': 201}), 45: (1, {'@': 201}), 70: (1, {'@': 201}), 72: (1, {'@': 201}), 73: (1, {'@': 201}), 76: (1, {'@': 201}), 82: (1, {'@': 201}), 19: (1, {'@': 201}), 57: (1, {'@': 201}), 69: (1, {'@': 201}), 71: (1, {'@': 201}), 26: (1, {'@': 201}), 74: (1, {'@': 201}), 64: (1, {'@': 201}), 75: (1, {'@': 201}), 27: (1, {'@': 201}), 77: (1, {'@': 201}), 78: (1, {'@': 201}), 79: (1, {'@': 201}), 80: (1, {'@': 201}), 22: (1, {'@': 201}), 81: (1, {'@': 201}), 56: (1, {'@': 201}), 46: (1, {'@': 201}), 48: (1, {'@': 201}), 83: (1, {'@': 201}), 51: (1, {'@': 201})}, 247: {108: (0, 252), 58: (0, 158), 64: (0, 209), 90: (0, 11), 0: (1, {'@': 105}), 1: (1, {'@': 105}), 84: (1, {'@': 105}), 2: (1, {'@': 105}), 3: (1, {'@': 105}), 20: (1, {'@': 105}), 21: (1, {'@': 105}), 5: (1, {'@': 105}), 59: (1, {'@': 105}), 60: (1, {'@': 105}), 6: (1, {'@': 105}), 61: (1, {'@': 105}), 17: (1, {'@': 105}), 85: (1, {'@': 105}), 24: (1, {'@': 105}), 86: (1, {'@': 105}), 8: (1, {'@': 105}), 9: (1, {'@': 105}), 10: (1, {'@': 105}), 11: (1, {'@': 105}), 12: (1, {'@': 105}), 13: (1, {'@': 105}), 14: (1, {'@': 105}), 15: (1, {'@': 105}), 87: (1, {'@': 105}), 16: (1, {'@': 105}), 4: (1, {'@': 105})}, 248: {0: (1, {'@': 202}), 1: (1, {'@': 202}), 84: (1, {'@': 202}), 58: (1, {'@': 202}), 2: (1, {'@': 202}), 3: (1, {'@': 202}), 20: (1, {'@': 202}), 21: (1, {'@': 202}), 5: (1, {'@': 202}), 59: (1, {'@': 202}), 60: (1, {'@': 202}), 6: (1, {'@': 202}), 61: (1, {'@': 202}), 17: (1, {'@': 202}), 85: (1, {'@': 202}), 24: (1, {'@': 202}), 86: (1, {'@': 202}), 8: (1, {'@': 202}), 9: (1, {'@': 202}), 10: (1, {'@': 202}), 11: (1, {'@': 202}), 12: (1, {'@': 202}), 13: (1, {'@': 202}), 14: (1, {'@': 202}), 15: (1, {'@': 202}), 87: (1, {'@': 202}), 16: (1, {'@': 202}), 4: (1, {'@': 202}), 62: (1, {'@': 202}), 65: (1, {'@': 202}), 66: (1, {'@': 202}), 67: (1, {'@': 202}), 23: (1, {'@': 202}), 68: (1, {'@': 202}), 63: (1, {'@': 202}), 25: (1, {'@': 202}), 45: (1, {'@': 202}), 70: (1, {'@': 202}), 72: (1, {'@': 202}), 73: (1, {'@': 202}), 76: (1, {'@': 202}), 82: (1, {'@': 202}), 19: (1, {'@': 202}), 57: (1, {'@': 202}), 69: (1, {'@': 202}), 71: (1, {'@': 202}), 26: (1, {'@': 202}), 74: (1, {'@': 202}), 64: (1, {'@': 202}), 75: (1, {'@': 202}), 27: (1, {'@': 202}), 77: (1, {'@': 202}), 78: (1, {'@': 202}), 79: (1, {'@': 202}), 80: (1, {'@': 202}), 22: (1, {'@': 202}), 81: (1, {'@': 202}), 56: (1, {'@': 202}), 46: (1, {'@': 202}), 48: (1, {'@': 202}), 83: (1, {'@': 202}), 51: (1, {'@': 202})}, 249: {86: (0, 17), 0: (1, {'@': 203}), 1: (1, {'@': 203}), 84: (1, {'@': 203}), 58: (1, {'@': 203}), 2: (1, {'@': 203}), 3: (1, {'@': 203}), 20: (1, {'@': 203}), 5: (1, {'@': 203}), 59: (1, {'@': 203}), 60: (1, {'@': 203}), 6: (1, {'@': 203}), 61: (1, {'@': 203}), 17: (1, {'@': 203}), 85: (1, {'@': 203}), 8: (1, {'@': 203}), 9: (1, {'@': 203}), 10: (1, {'@': 203}), 11: (1, {'@': 203}), 12: (1, {'@': 203}), 13: (1, {'@': 203}), 14: (1, {'@': 203}), 15: (1, {'@': 203}), 87: (1, {'@': 203}), 16: (1, {'@': 203}), 4: (1, {'@': 203}), 62: (1, {'@': 203}), 65: (1, {'@': 203}), 66: (1, {'@': 203}), 19: (1, {'@': 203}), 67: (1, {'@': 203}), 21: (1, {'@': 203}), 23: (1, {'@': 203}), 57: (1, {'@': 203}), 68: (1, {'@': 203}), 69: (1, {'@': 203}), 24: (1, {'@': 203}), 63: (1, {'@': 203}), 25: (1, {'@': 203}), 45: (1, {'@': 203}), 70: (1, {'@': 203}), 71: (1, {'@': 203}), 72: (1, {'@': 203}), 26: (1, {'@': 203}), 73: (1, {'@': 203}), 74: (1, {'@': 203}), 64: (1, {'@': 203}), 75: (1, {'@': 203}), 76: (1, {'@': 203}), 27: (1, {'@': 203}), 77: (1, {'@': 203}), 78: (1, {'@': 203}), 79: (1, {'@': 203}), 80: (1, {'@': 203}), 22: (1, {'@': 203}), 81: (1, {'@': 203}), 56: (1, {'@': 203}), 82: (1, {'@': 203}), 46: (1, {'@': 203}), 48: (1, {'@': 203}), 83: (1, {'@': 203}), 51: (1, {'@': 203})}, 250: {60: (0, 80), 8: (0, 228), 58: (1, {'@': 204}), 62: (1, {'@': 204}), 64: (1, {'@': 204}), 63: (1, {'@': 204}), 65: (1, {'@': 204}), 66: (1, {'@': 204}), 1: (1, {'@': 204}), 19: (1, {'@': 204}), 67: (1, {'@': 204}), 21: (1, {'@': 204}), 5: (1, {'@': 204}), 6: (1, {'@': 204}), 23: (1, {'@': 204}), 57: (1, {'@': 204}), 68: (1, {'@': 204}), 69: (1, {'@': 204}), 24: (1, {'@': 204}), 25: (1, {'@': 204}), 45: (1, {'@': 204}), 70: (1, {'@': 204}), 71: (1, {'@': 204}), 9: (1, {'@': 204}), 10: (1, {'@': 204}), 72: (1, {'@': 204}), 11: (1, {'@': 204}), 26: (1, {'@': 204}), 73: (1, {'@': 204}), 74: (1, {'@': 204}), 13: (1, {'@': 204}), 75: (1, {'@': 204}), 76: (1, {'@': 204}), 27: (1, {'@': 204}), 77: (1, {'@': 204}), 16: (1, {'@': 204}), 4: (1, {'@': 204}), 17: (1, {'@': 204}), 78: (1, {'@': 204}), 0: (1, {'@': 204}), 79: (1, {'@': 204}), 2: (1, {'@': 204}), 3: (1, {'@': 204}), 20: (1, {'@': 204}), 80: (1, {'@': 204}), 22: (1, {'@': 204}), 81: (1, {'@': 204}), 56: (1, {'@': 204}), 82: (1, {'@': 204}), 46: (1, {'@': 204}), 48: (1, {'@': 204}), 12: (1, {'@': 204}), 83: (1, {'@': 204}), 51: (1, {'@': 204}), 15: (1, {'@': 204}), 14: (1, {'@': 204})}, 251: {0: (1, {'@': 205}), 1: (1, {'@': 205}), 58: (1, {'@': 205}), 2: (1, {'@': 205}), 3: (1, {'@': 205}), 4: (1, {'@': 205}), 5: (1, {'@': 205}), 59: (1, {'@': 205}), 60: (1, {'@': 205}), 6: (1, {'@': 205}), 61: (1, {'@': 205}), 8: (1, {'@': 205}), 9: (1, {'@': 205}), 10: (1, {'@': 205}), 11: (1, {'@': 205}), 12: (1, {'@': 205}), 13: (1, {'@': 205}), 14: (1, {'@': 205}), 15: (1, {'@': 205}), 16: (1, {'@': 205}), 17: (1, {'@': 205}), 62: (1, {'@': 205}), 63: (1, {'@': 205}), 64: (1, {'@': 205}), 65: (1, {'@': 205}), 66: (1, {'@': 205}), 19: (1, {'@': 205}), 67: (1, {'@': 205}), 21: (1, {'@': 205}), 23: (1, {'@': 205}), 57: (1, {'@': 205}), 68: (1, {'@': 205}), 69: (1, {'@': 205}), 24: (1, {'@': 205}), 25: (1, {'@': 205}), 45: (1, {'@': 205}), 70: (1, {'@': 205}), 71: (1, {'@': 205}), 72: (1, {'@': 205}), 26: (1, {'@': 205}), 73: (1, {'@': 205}), 74: (1, {'@': 205}), 75: (1, {'@': 205}), 76: (1, {'@': 205}), 27: (1, {'@': 205}), 77: (1, {'@': 205}), 78: (1, {'@': 205}), 79: (1, {'@': 205}), 20: (1, {'@': 205}), 80: (1, {'@': 205}), 22: (1, {'@': 205}), 81: (1, {'@': 205}), 56: (1, {'@': 205}), 82: (1, {'@': 205}), 46: (1, {'@': 205}), 48: (1, {'@': 205}), 83: (1, {'@': 205}), 51: (1, {'@': 205})}, 252: {58: (0, 101), 64: (0, 95)}, 253: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 32: (0, 195), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 81: (0, 199), 11: (0, 140), 9: (0, 181), 31: (0, 162), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 254: {8: (0, 228), 60: (0, 80), 58: (1, {'@': 206}), 62: (1, {'@': 206}), 64: (1, {'@': 206}), 63: (1, {'@': 206}), 65: (1, {'@': 206}), 66: (1, {'@': 206}), 1: (1, {'@': 206}), 19: (1, {'@': 206}), 67: (1, {'@': 206}), 21: (1, {'@': 206}), 5: (1, {'@': 206}), 6: (1, {'@': 206}), 23: (1, {'@': 206}), 57: (1, {'@': 206}), 68: (1, {'@': 206}), 69: (1, {'@': 206}), 24: (1, {'@': 206}), 25: (1, {'@': 206}), 45: (1, {'@': 206}), 70: (1, {'@': 206}), 71: (1, {'@': 206}), 9: (1, {'@': 206}), 10: (1, {'@': 206}), 72: (1, {'@': 206}), 11: (1, {'@': 206}), 26: (1, {'@': 206}), 73: (1, {'@': 206}), 74: (1, {'@': 206}), 13: (1, {'@': 206}), 75: (1, {'@': 206}), 76: (1, {'@': 206}), 27: (1, {'@': 206}), 77: (1, {'@': 206}), 16: (1, {'@': 206}), 4: (1, {'@': 206}), 17: (1, {'@': 206}), 78: (1, {'@': 206}), 0: (1, {'@': 206}), 79: (1, {'@': 206}), 2: (1, {'@': 206}), 3: (1, {'@': 206}), 20: (1, {'@': 206}), 80: (1, {'@': 206}), 22: (1, {'@': 206}), 81: (1, {'@': 206}), 56: (1, {'@': 206}), 82: (1, {'@': 206}), 46: (1, {'@': 206}), 48: (1, {'@': 206}), 12: (1, {'@': 206}), 83: (1, {'@': 206}), 51: (1, {'@': 206}), 15: (1, {'@': 206}), 14: (1, {'@': 206})}, 255: {30: (0, 70), 24: (0, 8), 19: (0, 57), 25: (0, 89), 22: (0, 4), 21: (0, 79), 43: (0, 127), 38: (0, 249), 26: (0, 19), 27: (0, 216), 29: (0, 66), 35: (0, 7), 23: (0, 160), 39: (0, 236)}, 256: {77: (0, 36), 60: (0, 80), 8: (0, 228)}, 257: {19: (0, 57), 28: (0, 10), 3: (0, 126), 16: (0, 0), 25: (0, 89), 0: (0, 91), 29: (0, 112), 30: (0, 70), 20: (0, 43), 11: (0, 140), 9: (0, 181), 31: (0, 162), 32: (0, 119), 33: (0, 220), 34: (0, 200), 35: (0, 155), 14: (0, 197), 36: (0, 177), 37: (0, 210), 6: (0, 203), 38: (0, 249), 39: (0, 236), 8: (0, 230), 2: (0, 227), 40: (0, 121), 41: (0, 132), 17: (0, 50), 42: (0, 81), 43: (0, 127), 26: (0, 19), 21: (0, 1), 44: (0, 104), 5: (0, 51), 45: (0, 47), 46: (0, 92), 47: (0, 2), 24: (0, 8), 48: (0, 20), 4: (0, 56), 49: (0, 113), 10: (0, 29), 22: (0, 4), 50: (0, 251), 51: (0, 156), 52: (0, 182), 53: (0, 233), 23: (0, 160), 15: (0, 178), 54: (0, 213), 12: (0, 188), 55: (0, 159), 13: (0, 167), 27: (0, 216), 56: (0, 221), 1: (0, 245), 57: (0, 176)}, 258: {65: (1, {'@': 207}), 66: (1, {'@': 207}), 1: (1, {'@': 207}), 19: (1, {'@': 207}), 21: (1, {'@': 207}), 5: (1, {'@': 207}), 6: (1, {'@': 207}), 23: (1, {'@': 207}), 57: (1, {'@': 207}), 68: (1, {'@': 207}), 69: (1, {'@': 207}), 24: (1, {'@': 207}), 25: (1, {'@': 207}), 8: (1, {'@': 207}), 45: (1, {'@': 207}), 9: (1, {'@': 207}), 10: (1, {'@': 207}), 26: (1, {'@': 207}), 11: (1, {'@': 207}), 13: (1, {'@': 207}), 76: (1, {'@': 207}), 27: (1, {'@': 207}), 16: (1, {'@': 207}), 17: (1, {'@': 207}), 4: (1, {'@': 207}), 78: (1, {'@': 207}), 0: (1, {'@': 207}), 79: (1, {'@': 207}), 2: (1, {'@': 207}), 3: (1, {'@': 207}), 20: (1, {'@': 207}), 80: (1, {'@': 207}), 22: (1, {'@': 207}), 56: (1, {'@': 207}), 46: (1, {'@': 207}), 48: (1, {'@': 207}), 12: (1, {'@': 207}), 51: (1, {'@': 207}), 14: (1, {'@': 207}), 15: (1, {'@': 207})}}, 'start_states': {'start': 152}, 'end_states': {'start': 71}}, 'lexer_conf': {'tokens': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}], 'ignore': ['WS', 'COMMENT'], 'g_regex_flags': 0, '__type__': 'LexerConf'}, 'start': ['start'], '__type__': 'LALR_ContextualLexer'}, 'rules': [{'@': 159}, {'@': 147}, {'@': 172}, {'@': 75}, {'@': 121}, {'@': 196}, {'@': 109}, {'@': 118}, {'@': 80}, {'@': 167}, {'@': 207}, {'@': 175}, {'@': 124}, {'@': 110}, {'@': 153}, {'@': 137}, {'@': 163}, {'@': 101}, {'@': 73}, {'@': 122}, {'@': 177}, {'@': 194}, {'@': 141}, {'@': 204}, {'@': 115}, {'@': 183}, {'@': 206}, {'@': 125}, {'@': 71}, {'@': 103}, {'@': 119}, {'@': 117}, {'@': 102}, {'@': 77}, {'@': 148}, {'@': 160}, {'@': 176}, {'@': 200}, {'@': 113}, {'@': 96}, {'@': 190}, {'@': 99}, {'@': 164}, {'@': 186}, {'@': 126}, {'@': 173}, {'@': 178}, {'@': 166}, {'@': 95}, {'@': 161}, {'@': 138}, {'@': 155}, {'@': 68}, {'@': 205}, {'@': 81}, {'@': 135}, {'@': 86}, {'@': 72}, {'@': 123}, {'@': 182}, {'@': 112}, {'@': 111}, {'@': 181}, {'@': 129}, {'@': 149}, {'@': 76}, {'@': 203}, {'@': 184}, {'@': 92}, {'@': 158}, {'@': 108}, {'@': 107}, {'@': 105}, {'@': 195}, {'@': 131}, {'@': 100}, {'@': 69}, {'@': 139}, {'@': 180}, {'@': 201}, {'@': 145}, {'@': 74}, {'@': 202}, {'@': 128}, {'@': 198}, {'@': 188}, {'@': 116}, {'@': 146}, {'@': 192}, {'@': 151}, {'@': 78}, {'@': 185}, {'@': 140}, {'@': 157}, {'@': 130}, {'@': 98}, {'@': 67}, {'@': 133}, {'@': 85}, {'@': 114}, {'@': 93}, {'@': 79}, {'@': 150}, {'@': 179}, {'@': 156}, {'@': 127}, {'@': 154}, {'@': 88}, {'@': 132}, {'@': 104}, {'@': 168}, {'@': 82}, {'@': 91}, {'@': 165}, {'@': 142}, {'@': 87}, {'@': 171}, {'@': 134}, {'@': 191}, {'@': 187}, {'@': 84}, {'@': 97}, {'@': 90}, {'@': 162}, {'@': 189}, {'@': 152}, {'@': 120}, {'@': 174}, {'@': 143}, {'@': 197}, {'@': 89}, {'@': 106}, {'@': 170}, {'@': 169}, {'@': 94}, {'@': 83}, {'@': 136}, {'@': 199}, {'@': 70}, {'@': 193}, {'@': 144}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache_grammar': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': None, 'ambiguity': 'auto', 'propagate_positions': False, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'PP', 'pattern': {'value': '++', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 1: {'name': 'MM', 'pattern': {'value': '--', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 2: {'name': 'TT', 'pattern': {'value': '**', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 3: {'name': 'CONJ', 'pattern': {'value': '(?:(?:(?:\\&|/\\\\)|∧)|and)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 4: {'name': 'DISJ', 'pattern': {'value': '(?:(?:(?:\\||\\\\/)|∨)|or)', 'flags': [], '_width': [1, 2], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 5: {'name': 'PERCENT', 'pattern': {'value': '%', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 6: {'name': 'ATSIGN', 'pattern': {'value': '@', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 7: {'name': 'EQ', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 8: {'name': 'GT', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 9: {'name': 'LT', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 10: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 11: {'name': '_IS', 'pattern': {'value': '(?:(?:(?:(?:are|is)|∈)|be)|:=)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 12: {'name': 'COMP', 'pattern': {'value': '(?:(?:(?:!|\\~)|¬)|not)', 'flags': [], '_width': [1, 3], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 13: {'name': 'VAR', 'pattern': {'value': '(?!(Section|let|be|true|false|if|then|else|iff|is|are|forall|exists|not|or|and|∈)\\b)[ℕ𝕀ℙℂℚωℝπστΠξμδθγβαa-z_A-Z\\$⋃⋂][\\$a-zA-Z_0-9ℕ𝕀ℙℂℚℝπστωΠξμδθγβαa-z_A-Z⋃⋂]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 14: {'name': 'COMMENT', 'pattern': {'value': '\\/\\/[^\n]*', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 15: {'name': 'INT', 'pattern': {'value': '(?:[0-9])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 16: {'name': 'WS', 'pattern': {'value': '(?:[ \t\x0c\r\n])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 17: {'name': 'ESCAPED_STRING', 'pattern': {'value': '".*?(?<!\\\\)(\\\\\\\\)*?"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 18: {'name': 'LET', 'pattern': {'value': 'Let', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 19: {'name': 'DOT', 'pattern': {'value': '.', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 20: {'name': 'QUOTE', 'pattern': {'value': "'", 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 21: {'name': 'SECTION', 'pattern': {'value': 'Section', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 22: {'name': 'RULE', 'pattern': {'value': 'Rule', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 23: {'name': '__ANON_0', 'pattern': {'value': '=>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 24: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 25: {'name': 'ASSUMING', 'pattern': {'value': 'assuming', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 26: {'name': 'PROOF', 'pattern': {'value': 'Proof', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 27: {'name': 'ASSUME', 'pattern': {'value': 'Assume', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 28: {'name': 'PROVE', 'pattern': {'value': 'Prove', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 29: {'name': 'HAS', 'pattern': {'value': 'has', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 30: {'name': 'PROPERTY', 'pattern': {'value': 'property', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 31: {'name': 'THAT', 'pattern': {'value': 'that', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 32: {'name': 'SEMICOLON', 'pattern': {'value': ';', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 33: {'name': 'SEQUENCE', 'pattern': {'value': 'Sequence', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 34: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 35: {'name': 'THEN', 'pattern': {'value': 'then', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 36: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 37: {'name': '__ANON_1', 'pattern': {'value': '|->', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 38: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 39: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 40: {'name': '__ANON_2', 'pattern': {'value': 'Σ', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 41: {'name': 'SUM', 'pattern': {'value': 'sum', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 42: {'name': '__ANON_3', 'pattern': {'value': 'let', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 43: {'name': 'IN', 'pattern': {'value': 'in', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 44: {'name': 'OR', 'pattern': {'value': 'or', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 45: {'name': 'AND', 'pattern': {'value': 'and', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 46: {'name': '__ANON_4', 'pattern': {'value': '[^\x00-ÿ]|×', 'flags': [], '_width': [1, 1], '__type__': 'PatternRE'}, 'priority': 1, '__type__': 'TerminalDef'}, 47: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 48: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 49: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 50: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 51: {'name': 'CIRCUMFLEX', 'pattern': {'value': '^', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 52: {'name': 'BANG', 'pattern': {'value': '!', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 53: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 54: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 55: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 56: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 57: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 58: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 59: {'name': '__ANON_5', 'pattern': {'value': '...', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 60: {'name': '__ANON_6', 'pattern': {'value': '≠', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 61: {'name': '__ANON_7', 'pattern': {'value': '≥', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 62: {'name': '__ANON_8', 'pattern': {'value': '≤', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 63: {'name': 'FORALL', 'pattern': {'value': 'forall', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 64: {'name': '__ANON_9', 'pattern': {'value': '∀', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 65: {'name': 'EXISTS', 'pattern': {'value': 'exists', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 66: {'name': '__ANON_10', 'pattern': {'value': '∃', 'flags': [], '__type__': 'PatternStr'}, 'priority': 1, '__type__': 'TerminalDef'}, 67: {'origin': {'name': 'ge', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_7', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 68: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'neg', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 69: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'praline_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 70: {'origin': {'name': '__praline_exp_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_exp_star_13', '__type__': 'NonTerminal'}, {'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_factorial', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 71: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_3', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 11, 'alias': 'let_match', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 72: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 73: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'lambda_fun', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 74: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__app_star_14', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'finset', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 75: {'origin': {'name': 'definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'QUOTE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'QUOTE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'let_operator', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 76: {'origin': {'name': 'praline_factorial', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': 'BANG', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_factorial', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 77: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'quant_qual', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'elem', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 78: {'origin': {'name': 'var', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_var', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 79: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXISTS', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 80: {'origin': {'name': 'definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PROOF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RULE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'ASSUMING', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__definition_plus_1', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'proof_rule_assuming', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 81: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}, {'name': '__praline_sub_star_8', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 82: {'origin': {'name': '__definition_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__definition_plus_1', '__type__': 'NonTerminal'}, {'name': 'assumption', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 83: {'origin': {'name': '__praline_div_plus_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PERCENT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exp', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 84: {'origin': {'name': '__term_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__term_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 85: {'origin': {'name': 'le', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_8', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 86: {'origin': {'name': 'praline_add', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_mul', '__type__': 'NonTerminal'}, {'name': '__praline_add_star_9', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_add', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 87: {'origin': {'name': '__definition_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__definition_plus_2', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 88: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'definition', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 89: {'origin': {'name': '__praline_add_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_add_star_9', '__type__': 'NonTerminal'}, {'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 90: {'origin': {'name': '__bool_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__bool_star_5', '__type__': 'NonTerminal'}, {'name': 'OR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'operator', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 91: {'origin': {'name': '__definition_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__definition_plus_1', '__type__': 'NonTerminal'}, {'name': 'assumption', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 92: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_atom', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'praline_app', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 93: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_9', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 94: {'origin': {'name': '__praline_div_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_div_star_11', '__type__': 'NonTerminal'}, {'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exp', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 95: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DISJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 96: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 97: {'origin': {'name': '__bool_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'OR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'operator', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': 'ge', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_ge', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ATSIGN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'praline_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'THEN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'if_stmt', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'operator', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'complement', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator', '__type__': 'NonTerminal'}, {'name': '__bool_star_5', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'or_op', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': '__definition_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assumption', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': '__praline_mul_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_atom', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_atom', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'image', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': 'definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RULE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'ASSUMING', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__definition_plus_1', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'rule_assuming', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': 'assumption', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'THAT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'assume_that', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exp', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exp', '__type__': 'NonTerminal'}, {'name': '__praline_div_star_11', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_div', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MM', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': 'forall_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FORALL', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_2', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'reduce_sum', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__app_star_14', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 14, 'alias': 'comp_set', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator', '__type__': 'NonTerminal'}, {'name': '__bool_plus_6', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'and_op', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': 'definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PROOF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RULE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'proof_rule', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': 'bool', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'or_op', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': '__operator_sym_plus_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__operator_sym_plus_7', '__type__': 'NonTerminal'}, {'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': 'definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SECTION', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'section', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '__term_star_4', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'lambda_fun', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}, {'name': '__praline_mul_star_10', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': 'assumption', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': 'HAS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'PROPERTY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'assume_property', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'exists_sym', '__type__': 'NonTerminal'}, {'name': 'quant_qual', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 10, 'alias': 'exists', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ge', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'sequence', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': 'finset', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': 'praline_exp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_factorial', '__type__': 'NonTerminal'}, {'name': '__praline_exp_star_13', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'praline_exp', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': 'ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_6', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_string', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'sequence', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': 'le', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'elim_le', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': '__sequence_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'seq_def', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': 'praline_sub', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_sub', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': '__praline_div_plus_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_div_plus_12', '__type__': 'NonTerminal'}, {'name': 'PERCENT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exp', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': 'sequence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SEQUENCE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'seq_def', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': 'ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': '__ANON_2', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'reduce', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': '__definition_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': '__praline_sub_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_sub_star_8', '__type__': 'NonTerminal'}, {'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': '__app_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__app_star_14', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 15, 'alias': 'comp_set', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': 'operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator', '__type__': 'NonTerminal'}, {'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'operator', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'operator', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': 'praline_exp', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_factorial', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_exp', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': 'exists_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_10', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': 'int', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'int_tok', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': '__operator_sym_plus_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym_char', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': 'sequence', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SEQUENCE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__sequence_star_3', '__type__': 'NonTerminal'}, {'name': 'seq_def', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_4', 'filter_out': False, '__type__': 'Terminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'definition', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': 'ne', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_atom', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'praline_app', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': 'start', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__start_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': 'operator', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_arith', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CONJ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': '__bool_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'operator', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': 'seq_def', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'le', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': '__definition_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': 'definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ASSUME', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'assumption', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'assumption', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': '__definition_plus_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assumption', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': '__praline_div_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_exp', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': '__praline_mul_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__praline_mul_star_10', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': '__definition_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__definition_plus_2', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': 'definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EQ', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': '__praline_sub_star_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_add', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': 'definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PROVE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__definition_plus_2', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'prove_hints', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': 'operator_sym', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__operator_sym_plus_7', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'operator_sym', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'lambda_fun', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': '__start_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__app_star_14', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': 'praline_div', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_exp', '__type__': 'NonTerminal'}, {'name': '__praline_div_plus_12', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'praline_mod', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': 'praline_mul', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_div', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_mul', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'operator_sym', '__type__': 'NonTerminal'}, {'name': 'SUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 8, 'alias': 'reduce', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': 'app', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_atom', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__app_star_14', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'praline_app', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': 'string', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ESCAPED_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': 'escaped_str', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ne', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': '__term_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'var', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 13, 'alias': 'range_set_step', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': '__bool_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__bool_plus_6', '__type__': 'NonTerminal'}, {'name': 'AND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'operator', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PERCENT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': '__sequence_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__sequence_star_3', '__type__': 'NonTerminal'}, {'name': 'seq_def', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': 'quant_qual', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': '_IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': '__app_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bool', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'int', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'praline_int', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': 'definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RULE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'rule', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': '__praline_add_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_mul', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': '__ANON_5', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 12, 'alias': 'range_set', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': '__praline_exp_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'praline_factorial', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': 'operator_sym_char', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PP', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': 'praline_atom', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': 'finset', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': 'praline_factorial', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'app', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': '__ANON_2', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'reduce', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': 'praline_arith', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'praline_sub', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': 'term', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'forall_sym', '__type__': 'NonTerminal'}, {'name': 'quant_qual', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 9, 'alias': 'forall', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': 'definition', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PROVE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'term', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'prove', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(transformer=None, postlex=None):
  namespace = {'Rule': Rule, 'TerminalDef': TerminalDef}
  return Lark.deserialize(DATA, namespace, MEMO, transformer=transformer, postlex=postlex)
