main = _{ SOI ~ (term ~ ".")* ~ EOI }

term = _{ definition
        | proof_rule
        | rule
        | prove
        | assumption
        | ite
        | sum
        | bool_term }

definition = { "Let" ~ (var | var_op) ~ is ~ term }
rule = { "Rule" ~ term ~ "=>" ~ term }
proof_rule = { "Proof" ~ "Rule" ~ term ~ "=>" ~ term }
prove = { "Prove" ~ term }
assumption = { "Assume" ~ term }

var_op = { rel_op }

ite = { "if" ~ term ~ "then" ~ term ~ "else" ~ term }

sum = { sum_sym ~ term }
sum_sym = _{ "Σ" | "∑" }

bool_term = { complement_term ~ (infix_bool_op ~ complement_term)* }
infix_bool_op = _{ elem | and_op | or_op | imp_op }
elem = { "∈" }
and_op = { "and" | "∧" }
or_op = { "or" | "∨" }
imp_op = { "==>" | "⇒" }

complement_term = _{ complement | rel }
complement = { ("not" | "!") ~ rel }
rel = { arith ~ (rel_op ~ arith)* }
rel_op = @{ "<=" | ">=" | "<" | "=" | "≠" | "!" | "|-" | "|" | "≥" | ">" | "≤" | "∪" | "∩" }

arith = _{ negate | bin_arith }
negate = { "-" ~ bin_arith }

bin_arith = { factorial_term ~ (bin_op ~ factorial_term)* }

bin_op = _{ add | sub | mul | div | mod_op | exp | concat }
add = { "+" }
sub = { "-" }
mul = { "*" }
div = { "/" }
mod_op = { "%" }
exp = { "^" }
concat = { "@" }

factorial_term = _{ factorial | app }
factorial = { app ~ "!" }

app = _{ call | image | atom }

call = { atom ~ "(" ~ (term ~ ("," ~ term)*)? ~ ")" }
image = { atom ~ "[" ~ term ~ "]" }

atom = _{ int
        | "(" ~ term ~ ")"
        | finset | rangeset | rangeset_step | comp_set
        | list
        | fun_single_arg | fun_multi_arg
        | var
        }

fun_single_arg = { var ~ "|->" ~ term }
fun_multi_arg = { "(" ~ var ~ ("," ~ var)* ~ ")" ~ "|->" ~ term }

finset = { "{" ~ (term ~ ("," ~ term)*)? ~ "}" }
list = { "[" ~ (term ~ ("," ~ term)*)? ~ "]" }
rangeset = { "{" ~ term ~ "..." ~ term ~ "}" }
rangeset_step = { "{" ~ term ~ "," ~ term ~ "..." ~ term ~ "}" }
comp_set = { "{" ~ term ~ ":" ~ term ~ ("," ~ term)* ~ "}" }

int = @{ "-"? ~ ASCII_DIGIT+ }

is = _{ "are" | "is" | "be" | ":=" }

WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT = _{ ("//" ~ (!"\n" ~ ANY)*)
           | ("/*" ~ (!"*/" ~ ANY)* ~ "*/") }

special = { "ℕ" | "𝕀" | "ℙ" | "ℂ" | "ℚ" | "ω" | "ℝ" | "π"
          | "σ" | "τ" | "Π" | "ξ" | "μ" | "δ" | "θ" | "γ"
          | "β" | "α" | "$" | "⋃" | "⋂" | "_" }
start_char = { ASCII_ALPHA | special }
char = { ASCII_ALPHANUMERIC | special }
var = @{ start_char ~ char* }

